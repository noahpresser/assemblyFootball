0029DEE8 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/18/2017 10:11:39 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main file for Football Assembly Game
00000000                             3  * Written by : Noah Presser
00000000                             4  * Date       : When Tom assigned this
00000000                             5  * Description: Run this to execute the program
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      include 'constants.x68'
00001000                             9  
00001000  =00000021                 10  SET_OUTPUT_RESOLUTION_TRAP_CODE     equ  33
00001000  =00000280                 11  OUTPUT_WIDTH                        equ  640 
00001000  =00000348                 12  OUTPUT_HEIGHT                       equ  840
00001000                            13  
00001000                            14  ;COMMAND
00001000  =00000050                 15  SET_PEN_COLOR_COMMAND               equ 80
00001000  =0000005D                 16  SET_PEN_WIDTH_COMMAND               equ 93
00001000  =00000051                 17  SET_FILL_COLOR_COMMAND              equ 81
00001000  =00000058                 18  DRAW_CIRCLE_COMMAND                 equ 88
00001000  =00000008                 19  TIME_SINCE_MIDNIGHT_CODE            equ 8
00001000  =00000054                 20  DRAW_LINE_COMMAND                   equ 84
00001000  =00000057                 21  DRAW_RECTANGLE_COMMAND              equ 87
00001000  =0000000B                 22  CLEAR_SCREEN_COMMAND                equ 11
00001000  =0000FF00                 23  CLEAR_SCREEN_MAGIC_VAL              equ $FF00
00001000  =0000005C                 24  DRAWING_MODE_TRAP_CODE              equ 92
00001000  =00000011                 25  DOUBLE_BUFFERED_MODE                equ 17
00001000  =0000005E                 26  REPAINT_SCREEN_TRAP_CODE            equ 94
00001000                            27  
00001000  =00000013                 28  KEY_SCAN_CODE                       equ 19
00001000  =57415344                 29  WASD_LONG equ                       $57415344 ;this is 'W' = 87 in the top byte, 'A' = 65 in the next byte, etc
00001000  =4A4B4820                 30  SPACEH_LONG equ                     $4A4B4820 ;this is 'J' 'K' 'H' SPACE 
00001000                            31  
00001000                            32  ;player vars
00001000  =0000001E                 33  PLAYER_WIDTH                        equ 30
00001000  =0000001E                 34  PLAYER_HEIGHT                       equ 30
00001000  =00000000                 35  PLAYER_LEFT_X_POS                   equ $0
00001000  =00000000                 36  PLAYER_TOP_Y_POS                    equ $0
00001000  =00000008                 37  PLAYER_X_ACCELLERATION              equ $8
00001000  =00000008                 38  PLAYER_Y_ACCELLERATION              equ $8
00001000  =00000004                 39  PLAYER_X_DRAG                       equ $4
00001000  =00000004                 40  PLAYER_Y_DRAG                       equ $4
00001000  =00000090                 41  PLAYER_MAX_SPEED_X                  equ $0090
00001000  =0000FF70                 42  PLAYER_MIN_SPEED_X                  equ $FF70
00001000  =00000078                 43  PLAYER_MAX_SPEED_Y                  equ $0078
00001000  =0000FF82                 44  PLAYER_MIN_SPEED_Y                  equ $FF82 
00001000                            45  
00001000  =00000000                 46  BALLSTATE_QB                        equ 0
00001000  =00000001                 47  BALLSTATE_FLY                       equ 1
00001000  =00000002                 48  BALLSTATE_CAUGHT                    equ 2
00001000  =00000003                 49  BALLSTATE_TIMEOUT                   equ 3
00001000                            50  
00001000                            51  ;for displaying the menu
00001000  =00000000                 52  GAMESTATE_MENU                      equ 0
00001000  =00000001                 53  GAMESTATE_CLEAR_MENU                equ 1
00001000  =00000002                 54  GAMESTATE_PLAY                      equ 2
00001000  =00000003                 55  GAMESTATE_DRAW_MENU                 equ 3
00001000                            56  
00001000                            57  ;menu positions
00001000  =00000041                 58  MENU_XPOS                           equ 65
00001000  =0000006E                 59  MENU_1_YPOS                         equ 110
00001000  =000001D4                 60  MENU_2_YPOS                         equ 468
00001000  =000001F4                 61  MENU_WIDTH                          equ 500
00001000  =00000136                 62  MENU_HEIGHT                         equ 310
00001000                            63  
00001000                            64  ;highscore positions
00001000  =00000028                 65  YOURSCORE_XPOS                      equ 40
00001000  =00000181                 66  YOURSCORE_YPOS                      equ 385
00001000  =00000190                 67  HIGHSCORE_XPOS                      equ 400
00001000  =0000017C                 68  HIGHSCORE_YPOS                      equ 380
00001000  =000000C8                 69  HIGHSCORE_WIDTH                     equ 200
00001000  =0000007C                 70  HIGHSCORE_HEIGHT                    equ 124
00001000  =000001F4                 71  HIGHSCORE_DIGIT_XPOS                equ 500
00001000  =000001B6                 72  HIGHSCORE_DIGIT_YPOS                equ 438
00001000  =0000008C                 73  YOURSCORE_DIGIT_XPOS                equ 140
00001000  =000001BB                 74  YOURSCORE_DIGIT_YPOS                equ 443
00001000                            75  
00001000                            76  ;offsets for the player carrying the football
00001000  =00001900                 77  FOOTBALL_CARRY_OFFSET_X             equ 256*25
00001000  =00000A00                 78  FOOTBALL_CARRY_OFFSET_Y             equ 256*10
00001000  =00000009                 79  FOOTBALL_WIDTH                      equ 9
00001000  =00000015                 80  FOOTBALL_HEIGHT                     equ 21
00001000                            81  
00001000  =00000002                 82  LINE_OF_SCRIMMAGE_HEIGHT            equ 2
00001000                            83  
00001000                            84  ;create different values for different throw states
00001000  =FFFFF900                 85  FASTBALL_SPEED                      equ $FFFFF900
00001000  =FFFFFB00                 86  SLOWBALL_SPEED                      equ $FFFFFB00
00001000  =FFFFFEE0                 87  BALL_Y_SPEED_BASE                   equ -$120
00001000  =000001FE                 88  BALL_FLIGHT_DIST                    equ 510
00001000  =0000025B                 89  RIGHT_SIDE_OF_FIELD                 equ 603
00001000  =00000025                 90  LEFT_SIDE_OF_FIELD                  equ 37
00001000  =000001BC                 91  FIFTY_YARD_LINE_LOCATION            equ 444
00001000  =00000045                 92  TOP_OF_FIELD                        equ 69
00001000  =00000339                 93  BOTTOM_OF_FIELD                     equ 825
00001000  =00000084                 94  TOUCHDOWN_POS                       equ 132
00001000  =000002F1                 95  TOUCHBACK_POS                       equ 753
00001000  =000002F5                 96  NEAR_ENDZONE_POS                    equ 757
00001000  =00000235                 97  LEFT_RECEIVER_MAX_POS               equ 595-PLAYER_WIDTH
00001000  =00000046                 98  RIGHT_RECEIVER_MAX_POS              equ 70
00001000  =0000004A                 99  TOP_RECEIVER_MAX_POS                equ 74
00001000                           100  
00001000                           101  ;defender vars
00001000  =FFFFFF80                102  CHASE_SPEED_LEFT                    equ $FFFFFF80
00001000  =00000080                103  CHASE_SPEED_RIGHT                   equ $00000080
00001000  =FFFFFF85                104  CHASE_SPEED_UP                      equ $FFFFFF85
00001000  =00000077                105  CHASE_SPEED_DOWN                    equ $00000077
00001000                           106      
00001000  =FFFFFFF8                107  LINEBACKER_CHASE_SPEED_LEFT         equ $FFFFFFF8 ;make it player speed / 2
00001000  =00000008                108  LINEBACKER_CHASE_SPEED_RIGHT        equ $00000008 ;make it player speed / 2
00001000  =FFFFFFB0                109  LINEBACKER_CHASE_SPEED_UP           equ $FFFFFFB0
00001000  =000000B0                110  LINEBACKER_CHASE_SPEED_DOWN         equ $000000B0
00001000                           111  
00001000  =00000100                112  RECEIVER_SPEED_RIGHT                equ $00000100
00001000  =FFFFFF00                113  RECEIVER_SPEED_LEFT                 equ $FFFFFF00
00001000                           114  
00001000  =0001DF00                115  SQUISHPOS_1                         equ 479*256
00001000  =00015400                116  SQUISHPOS_2                         equ 340*256
00001000  =0000BE00                117  SQUISHPOS_3                         equ 190*256
00001000  =0000B400                118  SQUISHPOS_4                         equ 180*256
00001000                           119  
00001000                           120  
00001000  =00000000                121  LINEBACKERSTATE_STRAFE              equ 0
00001000  =00000001                122  LINEBACKERSTATE_BLITZ               equ 1
00001000                           123  
00001000  =00005000                124  SHOTGUN_OFFSET_1                    equ $5000
00001000  =00003200                125  SHOTGUN_OFFSET_2                    equ $3200
00001000  =01000000                126  DROPBACK_VELOCITY_Y                 equ $01000000
00001000                           127  
00001000                           128  
00001000                           129  
00001000                           130  ;number positions
00001000  =0000001E                131  SECOND_NUMBER_OFFSET                equ 30
00001000  =0000014E                132  SCORE_POSX_1                        equ 334
00001000  =0000016C                133  SCORE_POSX_2                        equ 364  
00001000  =0000007B                134  DOWN_POSX                           equ 123
00001000  =0000000B                135  DOWN_POSY                           equ 11
00001000  =00000253                136  TIMER_SECONDS_POSX_1                equ 595
00001000  =00000235                137  TIMER_SECONDS_POSX_2                equ 565
00001000  =00000212                138  TIMER_MINUTES_POSX                  equ 530
00001000                           139  
00001000  =0000001E                140  UI_LENGTH                           equ 30
00001000                           141  
00001000  =00009B00                142  FIRST_DOWN_YARDS                    equ 62*256*5/2      ;62 is ten yards
00001000  =0001F900                143  INITIAL_FIRST_DOWN                  equ 505*256
00001000                           144  
00001000                           145  ;times for timers
00001000  =00002328                146  ROUND_TIME_IN_HUNDREDTHS            equ 90*100     
00001000  =00000064                147  SCORE_FLASH_TIMER                   equ 1*100
00001000  =00000064                148  DOWN_FLASH_TIMER                    equ 1*100
00001000  =00000064                149  TIMER_FLASH_TIMER                   equ 1*100
00001000  =00000023                150  SNAP_DEBOUNCE_TIMER                 equ 35             ;a quarter second after the snap, the player can throw   
00001000                           151  ;colors
00001000  =000000FF                152  RED                                 equ $000000FF
00001000  =0000FFFF                153  YELLOW                              equ $0000FFFF
00001000  =000000FF                154  PATH_COLOR                          equ RED
00001000  =0000B05C                155  FIELD_GREEN                         equ $0000B05C
00001000  =00FFFFFF                156  WHITE                               equ $00FFFFFF
00001000  =00FF0000                157  BLUE                                equ $00FF0000
00001000  =00FCBF25                158  PANTHERS                            equ $00FCBF25
00001000  =000077E0                159  BADGUYS                             equ $000077E0
00001000  =00080A3A                160  PIGSKIN                             equ $00080A3A
00001000  =00C9AEFF                161  DONT_DRAW_COLOR                     equ $00C9AEFF
00001000                           162  
00001000                           163  
00001000                           164  
00001000                           165  
00001000                           166  
00001000                           167  
00001000                           168  
00001000                           169  
00001000                           170  
00001000                           171  
00001000                           172  
00001000                           173  
00001000                           174  -------------------- end include --------------------
00001000                           175      include 'noahBitmap.x68'
00001000  =00000000                176  LEFT_X  EQU     0
00001000  =FFFFFFFF                177  TOP_Y   EQU     -1
00001000                           178  
00001000  =00000050                179  PEN_COLOR_TRAP_CODE     EQU     80
00001000  =00000052                180  DRAW_PIXEL_TRAP_CODE    EQU     82
00001000                           181  
00001000  =00808080                182  RECT_COLOR EQU $00808080
00001000                           183  
00001000                           184  ;variables for function
00001000  =00000004                185  PIECE_WIDTH EQU 4
00001000  =00000008                186  PIECE_HEIGHT EQU 8
00001000  =0000000C                187  PIECE_XPOS  EQU 12
00001000  =00000010                188  PIECE_YPOS  EQU 16
00001000  =00000014                189  SCREEN_X    EQU 20
00001000  =00000018                190  SCREEN_Y    EQU 24
00001000  =0000001C                191  FILE_ADDRESS    EQU 28
00001000                           192  
00001000                           193  
00001000                           194  ;these vals are same for both 256 and 24bit
00001000  =0000000A                195  OFFSET_TO_PIXEL_OFFSET EQU 10
00001000  =00000012                196  OFFSET_TO_WIDTH EQU 18
00001000  =00000016                197  OFFSET_TO_HEIGHT EQU 22
00001000  =0000001C                198  OFFSET_TO_BITS_PER_PIXEL EQU 28 ;if its 8, we have a 8x8x8, else we have a 256
00001000  =00000036                199  OFFSET_TO_COLOR_TABLE EQU $36
00001000                           200  
00001000                           201  ALL_REG REG D0-D7/A0-A6
00001000                           202  
00001000                           203      ORG    $1000
00001000                           204  
00001000                           205  RETURN:
00001000  4E75                     206      rts
00001002                           207  ;converts little endian number in d0 to a big endian number
00001002                           208  littleEndianToBigEndian:   ;d0=$12345678
00001002  E158                     209      rol.w   #8,d0         ;d0=$12347856
00001004  4840                     210      swap    d0            ;d0=$78561234
00001006  E158                     211      rol.w   #8,d0         ;d0=$78563412
00001008  4E75                     212      rts
0000100A                           213  
0000100A                           214  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 24 bit 8x8x8
0000100A                           215  ;sets pixel color given a0 is the pixel in the array  
0000100A                           216  
0000100A                           217  
0000100A                           218      
0000100A                           219  drawBitmap: ;calls either draw256 or draw24bit
0000100A                           220  
0000100A  206F 001C                221      move.l FILE_ADDRESS(sp), a0 ;load the bmp file's starting address
0000100E  D1FC 0000000A            222      add.l #OFFSET_TO_PIXEL_OFFSET, a0
00001014  2010                     223      move.l (a0), d0 ;move the little endian offset into d0
00001016  4EB8 1002                224      jsr littleEndianToBigEndian
0000101A  206F 001C                225      move.l  FILE_ADDRESS(sp), a0 ;load the bmp file's starting address
0000101E  D088                     226      add.l a0, d0 ;get the pixel start location        
00001020  23C0 00001734            227      move.l d0, pixelStartAddress ;store the pixel start address
00001026                           228      
00001026  206F 001C                229      move.l  FILE_ADDRESS(sp), a0 ;load the bmp file's starting address
0000102A  D1FC 00000012            230      add.l #OFFSET_TO_WIDTH, a0
00001030  2010                     231      move.l (a0), d0
00001032  4EB8 1002                232      jsr littleEndianToBigEndian
00001036  23C0 0000173C            233      move.l d0, width ;store the width of the bmp
0000103C                           234      
0000103C  206F 001C                235      move.l  FILE_ADDRESS(sp), a0 ;load the bmp file's starting address
00001040  D1FC 00000016            236      add.l #OFFSET_TO_HEIGHT, a0
00001046  2010                     237      move.l (a0), d0
00001048  4EB8 1002                238      jsr littleEndianToBigEndian
0000104C  23C0 00001740            239      move.l d0, height ;store the height of the bmp
00001052                           240      
00001052                           241      
00001052                           242  
00001052                           243      ;set the height
00001052  2A39 00001740            244      move.l  height, d5
00001058  D885                     245      add.l   d5, d4 ; set the starting y position at the bottom
0000105A                           246      
0000105A                           247      ;set the width of the piece
0000105A  7A00                     248      move.l  #LEFT_X, d5
0000105C  DAB9 0000173C            249      add.l   width, d5 ;set the rightmost boundary ;REASON 256 BIT ISNT WORKING
00001062                           250      
00001062                           251      ;define the padding
00001062  2039 0000173C            252      move.l  width, d0
00001068  C1FC 0003                253      muls  #3, d0
0000106C  C0BC 00000003            254      and.l   #$00000003, d0 ;mod 4
00001072  23C0 00001744            255      move.l d0, padding ;padding is correct for 256, needs to be fixed for 24 bit
00001078                           256      
00001078                           257      ;determine whether to draw a 24bit or a 256
00001078  206F 001C                258      move.l  FILE_ADDRESS(sp), a0
0000107C  D1FC 0000001C            259      add.l #OFFSET_TO_BITS_PER_PIXEL, a0
00001082  2010                     260      move.l (a0), d0
00001084  4EB8 1002                261      jsr littleEndianToBigEndian
00001088  B0BC 00000018            262      cmp.l #24, d0 ;if its 0, we have an 8x8x8
0000108E  6600 016E                263      bne draw256 ; go draw the 256
00001092                           264  draw24bit:
00001092  2079 00001734            265      move.l  pixelStartAddress, a0 ;put our current pixel address in a0
00001098                           266      
00001098                           267      ;fixes padding based on result
00001098  2039 00001744            268      move.l padding, d0
0000109E  2200                     269      move.l d0, d1
000010A0  C23C 0001                270      and.b #1, d1 ; if the last bit is 1
000010A4  B23C 0001                271      cmp.b #1, d1  
000010A8  6600 0006                272      bne dontFlip
000010AC  0840 0001                273      bchg.l #1, d0  ;flip the 2nd to last bit (turns 3 to 1 and 1 to 3) 
000010B0                           274  dontFlip:
000010B0  23C0 00001744            275      move.l d0, padding
000010B6                           276      
000010B6                           277      ;set the rightmost boundary for the piece to be drawn
000010B6  2A2F 000C                278      move.l  PIECE_XPOS(sp), d5
000010BA  DAAF 0004                279      add.l   PIECE_WIDTH(sp), d5 ;stored in register for fast access
000010BE                           280      
000010BE                           281      ;set the left piece draw position
000010BE  222F 000C                282      move.l PIECE_XPOS(sp), d1
000010C2  D681                     283      add.l d1, d3 ;startXpos is now where it should be for the piece
000010C4  C3FC 0003                284      muls.w #3, d1 ; 3 colors each for 1 position, add that to the pixel address pointer
000010C8  D1C1                     285      add.l d1, a0 
000010CA                           286      
000010CA                           287      ;set the draw position
000010CA  282F 0008                288      move.l PIECE_HEIGHT(sp), d4
000010CE  222F 0010                289      move.l PIECE_YPOS(sp), d1
000010D2  D881                     290      add.l d1, d4 ;start ypos is now where it should be
000010D4  2239 0000173C            291      move.l width, d1 ; the length of a line to advance a0
000010DA  C2FC 0003                292      mulu.w #3, d1 ; 3 colors per line
000010DE  D2B9 00001744            293      add.l padding, d1 ;make sure to account for padding in each row
000010E4  2439 00001740            294      move.l height, d2
000010EA  9484                     295      sub.l d4, d2 ;height - (yPos + pieceHeight)
000010EC  C2C2                     296      mulu.w d2, d1 ;the number of rows we are skipping up * width (move that many pixels)
000010EE  D1C1                     297      add.l d1, a0  ;increment the pointer
000010F0  5384                     298      sub.l #1, d4 ;correct for being offscreen
000010F2                           299      
000010F2                           300      ;correct for piece offset
000010F2  96AF 000C                301      sub.l  PIECE_XPOS(sp), d3 ;correct for the offset caused when drawing pixel
000010F6  9AAF 000C                302      sub.l  PIECE_XPOS(sp), d5 ;correct rightmost barrier
000010FA  98AF 0010                303      sub.l  PIECE_YPOS(sp), d4 ;correct for offset caused when drawing the pixel
000010FE                           304      
000010FE                           305      ;add in screen offset
000010FE  D66F 0014                306      add.w SCREEN_X(sp), d3 ;correct for screenX positioning
00001102  DA6F 0014                307      add.w SCREEN_X(sp), d5 ;correct rightmost barrier
00001106  D86F 0018                308      add.w SCREEN_Y(sp), d4 ;correct for screenY positioning
0000110A                           309      
0000110A                           310      ;set topmost barrier
0000110A  7CFF                     311      move.l #-1, d6
0000110C  7000                     312      move.l #0, d0
0000110E  302F 0018                313      move.w SCREEN_Y(sp), d0
00001112  DC80                     314      add.l d0, d6 
00001114  23C6 0000174A            315      move.l d6, topPieceDrawBarrier 
0000111A                           316      
0000111A  2404                     317      move.l d4, d2 ;use d2 as currentY instead of d4
0000111C  7000                     318      move.l #0, d0 ;clear this for the loop so we can use byte operations
0000111E                           319      
0000111E                           320      ;set this number for speed
0000111E  7850                     321      move.l #PEN_COLOR_TRAP_CODE, d4
00001120  7C52                     322      move.l #DRAW_PIXEL_TRAP_CODE, d6
00001122                           323      
00001122  BE3C 0001                324      cmp.b #1, d7
00001126  6700 02CE                325      beq hilariousOptomization
0000112A  BE3C 0002                326      cmp.b #2, d7
0000112E  6700 0068                327      beq continueRowMenu
00001132                           328      
00001132                           329      ;patch for crash
00001132  B4BC 00000000            330      cmp.l   #0, d2
00001138  6F00 027C                331      ble     DONE
0000113C                           332  ;beginning of drawing a row
0000113C                           333  continueRow24: ;d3 is currentX, d2 d4 is currentY
0000113C                           334      ;get the proper color from a0
0000113C                           335      
0000113C                           336      
0000113C  7200                     337      move.l #0, d1    ;clear d1
0000113E                           338      
0000113E                           339      ;working
0000113E  1218                     340      move.b (a0)+, d1 ;000000bb
00001140  4841                     341      swap d1          ;00bb0000
00001142  1218                     342      move.b (a0)+, d1 ;00bb00gg
00001144  E149                     343      lsl.w #8, d1     ;00bbgg00
00001146  1218                     344      move.b (a0)+, d1 ;00bbggrr
00001148                           345      ;;;;;;;    
00001148                           346      
00001148                           347      ;set the proper trap code to set the pen color
00001148  1004                     348      move.b  d4, d0         
0000114A  4E4F                     349      trap    #15
0000114C                           350      
0000114C                           351      ;draw the pixel
0000114C  3203                     352      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
0000114E  1006                     353      move.b  d6 ,d0
00001150  4E4F                     354      trap    #15
00001152                           355  
00001152                           356      ;test new row
00001152  5243                     357      addi.w #1,d3 ;increase xPos
00001154  B645                     358      cmp.w  d5,d3 ;compare d3 with the rightmost boundary in d5 (xpos + widthOfPiece)
00001156  66E4                     359      bne     continueRow24
00001158                           360      ;END ROW
00001158                           361      
00001158                           362      
00001158                           363      
00001158                           364      ;move the pointer to the end of the row of colors in the file
00001158  2039 0000173C            365      move.l width, d0
0000115E  90AF 0004                366      sub.l PIECE_WIDTH(sp), d0 ;get the value of width - piecewidth
00001162  90AF 000C                367      sub.l PIECE_XPOS(sp), d0 ;get the value from the end of the piece to the end of the bmp
00001166  C1FC 0003                368      muls.w #3, d0
0000116A  D1C0                     369      add.l d0, a0
0000116C                           370      
0000116C                           371      ;add the padding at the end of the row
0000116C  D1F9 00001744            372      add.l padding, a0
00001172                           373      
00001172  7600                     374      move.l #0, d3 ;reset xPos
00001174  D66F 0014                375      add.w  SCREEN_X(sp), d3 ;correct for screenX
00001178                           376      
00001178                           377      ;set the left piece draw position
00001178  222F 000C                378      move.l PIECE_XPOS(sp), d1
0000117C  C3FC 0003                379      muls.w #3, d1 ; 3 colors each for 1 position, add that to the pixel address pointer
00001180  D1C1                     380      add.l d1, a0
00001182  C03C 0001                381      and.b #1, d0         
00001186                           382      ;check if we're done with the loop (hit top draw pos)
00001186  5382                     383      sub.l  #1,d2
00001188                           384      
00001188  2039 0000174A            385      move.l topPieceDrawBarrier, d0
0000118E  B480                     386      cmp.l d0 , d2 ;check topMost Barrier
00001190  66AA                     387      bne     continueRow24 ;LOOP back to drawing the next row
00001192  4EF9 000013B6            388      jmp DONE
00001198                           389  
00001198                           390  ;beginning of drawing a row
00001198                           391  continueRowMenu: ;d3 is currentX, d2 d4 is currentY
00001198                           392      ;get the proper color from a0
00001198                           393      
00001198                           394      
00001198  7200                     395      move.l #0, d1    ;clear d1
0000119A                           396      
0000119A                           397      ;working
0000119A  1218                     398      move.b (a0)+, d1 ;000000bb
0000119C  4841                     399      swap d1          ;00bb0000
0000119E  1218                     400      move.b (a0)+, d1 ;00bb00gg
000011A0  E149                     401      lsl.w #8, d1     ;00bbgg00
000011A2  1218                     402      move.b (a0)+, d1 ;00bbggrr
000011A4                           403      ;;;;;;;    
000011A4                           404      
000011A4                           405      ;set the proper trap code to set the pen color
000011A4  1004                     406      move.b  d4, d0         
000011A6  4E4F                     407      trap    #15
000011A8                           408      
000011A8  B2BC 00C9AEFF            409      cmp.l   #DONT_DRAW_COLOR, d1
000011AE  6700 0008                410      beq     dontDrawPixel
000011B2                           411      ;draw the pixel
000011B2  3203                     412      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000011B4  1006                     413      move.b  d6 ,d0
000011B6  4E4F                     414      trap    #15
000011B8                           415  dontDrawPixel
000011B8                           416      ;test new row
000011B8  5243                     417      addi.w #1,d3 ;increase xPos
000011BA  B645                     418      cmp.w  d5,d3 ;compare d3 with the rightmost boundary in d5 (xpos + widthOfPiece)
000011BC  66DA                     419      bne     continueRowMenu
000011BE                           420      ;END ROW
000011BE                           421      
000011BE                           422      
000011BE                           423      
000011BE                           424      ;move the pointer to the end of the row of colors in the file
000011BE  2039 0000173C            425      move.l width, d0
000011C4  90AF 0004                426      sub.l PIECE_WIDTH(sp), d0 ;get the value of width - piecewidth
000011C8  90AF 000C                427      sub.l PIECE_XPOS(sp), d0 ;get the value from the end of the piece to the end of the bmp
000011CC  C1FC 0003                428      muls.w #3, d0
000011D0  D1C0                     429      add.l d0, a0
000011D2                           430      
000011D2                           431      ;add the padding at the end of the row
000011D2  D1F9 00001744            432      add.l padding, a0
000011D8                           433      
000011D8  7600                     434      move.l #0, d3 ;reset xPos
000011DA  D66F 0014                435      add.w  SCREEN_X(sp), d3 ;correct for screenX
000011DE                           436      
000011DE                           437      ;set the left piece draw position
000011DE  222F 000C                438      move.l PIECE_XPOS(sp), d1
000011E2  C3FC 0003                439      muls.w #3, d1 ; 3 colors each for 1 position, add that to the pixel address pointer
000011E6  D1C1                     440      add.l d1, a0
000011E8  C03C 0001                441      and.b #1, d0         
000011EC                           442      ;check if we're done with the loop (hit top draw pos)
000011EC  5382                     443      sub.l  #1,d2
000011EE                           444      
000011EE  2039 0000174A            445      move.l topPieceDrawBarrier, d0
000011F4  B480                     446      cmp.l d0 , d2 ;check topMost Barrier
000011F6  66A0                     447      bne     continueRowMenu ;LOOP back to drawing the next row
000011F8  4EF9 000013B6            448      jmp DONE
000011FE                           449  
000011FE                           450  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 256     
000011FE                           451  
000011FE                           452       
000011FE                           453  draw256:
000011FE                           454  
000011FE                           455  
000011FE                           456      ;get the color table's starting address
000011FE  206F 001C                457      move.l  FILE_ADDRESS(sp), a0
00001202  2008                     458      move.l a0, d0
00001204  0680 00000036            459      add.l #OFFSET_TO_COLOR_TABLE, d0
0000120A  23C0 00001738            460      move.l d0, colorTableStartAddress ;store this for later
00001210                           461  
00001210  2079 00001734            462      move.l  pixelStartAddress, a0 ;put our current pixel address in a0
00001216                           463  
00001216                           464  
00001216                           465      
00001216                           466    
00001216                           467  
00001216                           468    
00001216                           469      ;set the left piece draw position
00001216  262F 000C                470      move.l PIECE_XPOS(sp), d3 ;startXpos is now where it should be for the piece
0000121A  D1C3                     471      add.l d3, a0
0000121C  D0B9 00001744            472      add.l padding, d0
00001222                           473      
00001222                           474      ;set the rightmost barrier draw position (xPos + width)
00001222  2A2F 000C                475      move.l  PIECE_XPOS(sp), d5
00001226  DAAF 0004                476      add.l   PIECE_WIDTH(sp), d5 ;stored in register for fast access
0000122A                           477      
0000122A                           478      ;set the draw position
0000122A  282F 0008                479      move.l PIECE_HEIGHT(sp), d4
0000122E  222F 0010                480      move.l PIECE_YPOS(sp), d1
00001232  D881                     481      add.l d1, d4 ;start ypos is now where it should be
00001234  2239 0000173C            482      move.l width, d1 ; the length of a line to advance a0 
0000123A  D2B9 00001744            483      add.l padding, d1 
00001240  2439 00001740            484      move.l height, d2
00001246  9484                     485      sub.l d4, d2 ;height - (yPos + pieceHeight)
00001248  C2C2                     486      mulu.w d2, d1 ;the number of rows we are skipping up
0000124A  D1C1                     487      add.l d1, a0  ;increment the pointer
0000124C  5384                     488      sub.l #1, d4 ;correct for being offscreen
0000124E                           489      
0000124E                           490      ;correct for piece offset
0000124E  96AF 000C                491      sub.l  PIECE_XPOS(sp), d3 ;correct for the offset caused when drawing pixel
00001252  9AAF 000C                492      sub.l  PIECE_XPOS(sp), d5 ;correct rightmost barrier
00001256  98AF 0010                493      sub.l  PIECE_YPOS(sp), d4 ;correct for offset caused when drawing the pixel
0000125A                           494      
0000125A                           495      ;add in screen offset
0000125A  D66F 0014                496      add.w SCREEN_X(sp), d3 ;correct for screenX positioning
0000125E  DA6F 0014                497      add.w SCREEN_X(sp), d5 ;correct rightmost barrier
00001262  D86F 0018                498      add.w SCREEN_Y(sp), d4 ;correct for screenY positioning
00001266                           499      
00001266                           500      ;set topmost barrier
00001266  7CFF                     501      move.l #-1, d6
00001268  7000                     502      move.l #0, d0
0000126A  302F 0018                503      move.w SCREEN_Y(sp), d0
0000126E  DC80                     504      add.l d0, d6 
00001270  23C6 0000174A            505      move.l d6, topPieceDrawBarrier
00001276                           506      
00001276  2404                     507      move.l d4, d2 ;use d2 as currentY instead of d4
00001278                           508  
00001278                           509      
00001278                           510      ;save for fast access
00001278  2479 00001738            511      move.l colorTableStartAddress, a2
0000127E                           512      
0000127E                           513      ;clear for the loop
0000127E  7000                     514      move.l #0, d0 
00001280                           515      
00001280                           516      ;set this number for speed
00001280  7850                     517      move.l #PEN_COLOR_TRAP_CODE, d4
00001282  7C52                     518      move.l #DRAW_PIXEL_TRAP_CODE, d6
00001284                           519      
00001284                           520  continueRow256: ;d3 is currentX, d2 is currentY
00001284                           521      ;sets pixel color given a0 is pixel in array    
00001284  1018                     522      move.b  (a0)+, d0
00001286                           523       
00001286                           524      ;go inside color table, get color in d1
00001286  224A                     525      move.l a2, a1
00001288  E548                     526      lsl.w #2, d0 ;expand for a 4 byte color (multiply by 4)
0000128A  D3C0                     527      add.l d0, a1 ;add the offset to the value
0000128C  2211                     528      move.l (a1), d1
0000128E                           529     
0000128E  E089                     530      lsr.l #8, d1 ; shift it right to get the correct format
00001290                           531  
00001290  2004                     532      move.l  d4, d0 ;set the proper trap code to set the pen color
00001292  4E4F                     533      trap    #15
00001294                           534      
00001294                           535      ;draw the pixel
00001294  3203                     536      move.w  d3, d1
00001296  1006                     537      move.b  d6,d0
00001298  4E4F                     538      trap    #15
0000129A                           539              
0000129A                           540      ;compare d3 with the rightmost boundary in d5 (are we done with this row)
0000129A  5243                     541      addi.w  #1,d3
0000129C  B645                     542      cmp.w  d5,d3 
0000129E  66E4                     543      bne     continueRow256
000012A0                           544      ;END LOOP       
000012A0                           545      
000012A0                           546      ;move the pointer to the end of the row of colors in the file
000012A0  2039 0000173C            547      move.l width, d0
000012A6  90AF 0004                548      sub.l PIECE_WIDTH(sp), d0 ;get the value of width - piecewidth
000012AA  90AF 000C                549      sub.l PIECE_XPOS(sp), d0 ;get the value from the end of the piece to the end of the bmp
000012AE  D1C0                     550      add.l d0, a0
000012B0                           551      
000012B0                           552      ;add the padding to the image
000012B0  D1F9 00001744            553      add.l padding, a0 
000012B6                           554      
000012B6                           555      ;reset xPos
000012B6  7600                     556      move.l #0, d3 ;reset xPos
000012B8  D66F 0014                557      add.w  SCREEN_X(sp), d3 ;correct for screenX
000012BC                           558      ;add the left piece draw position
000012BC  222F 000C                559      move.l PIECE_XPOS(sp), d1
000012C0  D1C1                     560      add.l d1, a0 ;increment the color pointer
000012C2                           561      
000012C2                           562      ;check if we have reached the last row to be drawn (top of piece)
000012C2  5342                     563      sub.w  #1,d2
000012C4  B479 0000174A            564      cmp.w  topPieceDrawBarrier, d2
000012CA  66B8                     565      bne    continueRow256
000012CC  4EF9 000013B6            566      jmp DONE
000012D2                           567  drawMenuBitmap:
000012D2  48E7 FFFE                568      MOVEM.l ALL_REG, -(sp)
000012D6  4EB9 000013C2            569      jsr CLEARREG
000012DC  7E02                     570      move.l #2, d7 ;for special case
000012DE                           571      ;add variables to stack
000012DE  701C                     572      move.l #28, d0 ;store room for stack increase
000012E0  9FC0                     573      sub.l  d0, sp
000012E2  2EB9 00001720            574      move.l  widthOfPiece, (sp)
000012E8  2F79 00001724 0004       575      move.l  heightOfPiece, 4(sp)
000012F0  2F79 00001728 0008       576      move.l  xPosOfPiece, 8(sp)
000012F8  2F79 0000172C 000C       577      move.l  yPosOfPiece, 12(sp)
00001300  3F79 00001730 0010       578      move.w  screenX, 16(sp)
00001308  3F79 00001732 0014       579      move.w  screenY, 20(sp)
00001310  2079 0000171C            580      move.l fileAddress, a0
00001316  2F48 0018                581      move.l  a0, 24(sp)
0000131A  4EB8 100A                582      jsr    drawBitmap
0000131E                           583  drawPlayerBitmap:
0000131E  48E7 FFFE                584      MOVEM.l ALL_REG, -(sp)
00001322  4EB9 000013C2            585      jsr CLEARREG
00001328  7E01                     586      move.l #1, d7 ;for special case
0000132A                           587      ;add variables to stack
0000132A  701C                     588      move.l #28, d0 ;store room for stack increase
0000132C  9FC0                     589      sub.l  d0, sp
0000132E  2EB9 00001720            590      move.l  widthOfPiece, (sp)
00001334  2F79 00001724 0004       591      move.l  heightOfPiece, 4(sp)
0000133C  2F79 00001728 0008       592      move.l  xPosOfPiece, 8(sp)
00001344  2F79 0000172C 000C       593      move.l  yPosOfPiece, 12(sp)
0000134C  3F79 00001730 0010       594      move.w  screenX, 16(sp)
00001354  3F79 00001732 0014       595      move.w  screenY, 20(sp)
0000135C  2079 0000171C            596      move.l fileAddress, a0
00001362  2F48 0018                597      move.l  a0, 24(sp)
00001366  4EB8 100A                598      jsr    drawBitmap
0000136A                           599  ;main function to be called    
0000136A                           600  drawBitmapPiece:
0000136A  48E7 FFFE                601      MOVEM.l ALL_REG, -(sp)
0000136E  4EB9 000013C2            602      jsr CLEARREG
00001374  7E00                     603      move.l  #0, d7 ;for special case
00001376                           604      ;add variables to stack
00001376  701C                     605      move.l  #28, d0 ;store room for stack increase
00001378  9FC0                     606      sub.l   d0, sp
0000137A  2EB9 00001720            607      move.l  widthOfPiece, (sp)
00001380  2F79 00001724 0004       608      move.l  heightOfPiece, 4(sp)
00001388  2F79 00001728 0008       609      move.l  xPosOfPiece, 8(sp)
00001390  2F79 0000172C 000C       610      move.l  yPosOfPiece, 12(sp)
00001398  3F79 00001730 0010       611      move.w  screenX, 16(sp)
000013A0  3F79 00001732 0014       612      move.w  screenY, 20(sp)
000013A8  2079 0000171C            613      move.l fileAddress, a0
000013AE  2F48 0018                614      move.l  a0, 24(sp)
000013B2  4EB8 100A                615      jsr    drawBitmap
000013B6                           616  DONE:
000013B6  DFFC 00000020            617      add.l #32, sp ;move stack back to where it was
000013BC  4CDF 7FFF                618      MOVEM.l (sp)+, ALL_REG
000013C0  4E75                     619      rts
000013C2                           620      
000013C2                           621  CLEARREG:
000013C2  7200                     622      move.l #0, d1
000013C4  7400                     623      move.l #0, d2
000013C6  7600                     624      move.l #0, d3
000013C8  7800                     625      move.l #0, d4
000013CA  7A00                     626      move.l #0, d5
000013CC  7C00                     627      move.l #0, d6
000013CE  7E00                     628      move.l #0, d7
000013D0  227C 00000000            629      move.l #0, a1
000013D6  247C 00000000            630      move.l #0, a2
000013DC  267C 00000000            631      move.l #0, a3
000013E2  287C 00000000            632      move.l #0, a4
000013E8  2A7C 00000000            633      move.l #0, a5
000013EE  2C7C 00000000            634      move.l #0, a6
000013F4  4E75                     635      rts
000013F6                           636  ;beginning of drawing a row, draws 31 times
000013F6                           637  hilariousOptomization: ;d3 is currentX, d2 d4 is currentY
000013F6                           638      ;get the proper color from a0
000013F6                           639      
000013F6                           640      
000013F6  7200                     641      move.l #0, d1    ;clear d1
000013F8                           642      
000013F8  1218                     643      move.b (a0)+, d1 ;000000bb
000013FA  4841                     644      swap d1          ;00bb0000
000013FC  1218                     645      move.b (a0)+, d1 ;00bb00gg
000013FE  E149                     646      lsl.w #8, d1     ;00bbgg00
00001400  1218                     647      move.b (a0)+, d1 ;00bbggrr
00001402                           648      ;;;;;;;    
00001402                           649      
00001402                           650      ;set the proper trap code to set the pen color
00001402  1004                     651      move.b  d4, d0         
00001404  4E4F                     652      trap    #15
00001406                           653      
00001406                           654      ;draw the pixel
00001406  3203                     655      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001408  1006                     656      move.b  d6 ,d0
0000140A  4E4F                     657      trap    #15
0000140C                           658      
0000140C  5243                     659      add.w #1, d3
0000140E  7200                     660      move.l #0, d1
00001410  1218                     661      move.b (a0)+, d1 ;000000bb
00001412  4841                     662      swap d1          ;00bb0000
00001414  1218                     663      move.b (a0)+, d1 ;00bb00gg
00001416  E149                     664      lsl.w #8, d1     ;00bbgg00
00001418  1218                     665      move.b (a0)+, d1 ;00bbggrr
0000141A                           666      ;;;;;;;    
0000141A                           667      
0000141A                           668      ;set the proper trap code to set the pen color
0000141A  1004                     669      move.b  d4, d0         
0000141C  4E4F                     670      trap    #15
0000141E                           671      
0000141E                           672      ;draw the pixel
0000141E  3203                     673      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001420  1006                     674      move.b  d6 ,d0
00001422  4E4F                     675      trap    #15
00001424                           676      
00001424  5243                     677      add.w #1, d3
00001426  7200                     678      move.l #0, d1
00001428  1218                     679      move.b (a0)+, d1 ;000000bb
0000142A  4841                     680      swap d1          ;00bb0000
0000142C  1218                     681      move.b (a0)+, d1 ;00bb00gg
0000142E  E149                     682      lsl.w #8, d1     ;00bbgg00
00001430  1218                     683      move.b (a0)+, d1 ;00bbggrr
00001432                           684      ;;;;;;;    
00001432                           685      
00001432                           686      ;set the proper trap code to set the pen color
00001432  1004                     687      move.b  d4, d0         
00001434  4E4F                     688      trap    #15
00001436                           689      
00001436                           690      ;draw the pixel
00001436  3203                     691      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001438  1006                     692      move.b  d6 ,d0
0000143A  4E4F                     693      trap    #15
0000143C                           694  
0000143C                           695      
0000143C  5243                     696      add.w #1, d3
0000143E  7200                     697      move.l #0, d1
00001440  1218                     698      move.b (a0)+, d1 ;000000bb
00001442  4841                     699      swap d1          ;00bb0000
00001444  1218                     700      move.b (a0)+, d1 ;00bb00gg
00001446  E149                     701      lsl.w #8, d1     ;00bbgg00
00001448  1218                     702      move.b (a0)+, d1 ;00bbggrr
0000144A                           703      ;;;;;;;    
0000144A                           704      
0000144A                           705      ;set the proper trap code to set the pen color
0000144A  1004                     706      move.b  d4, d0         
0000144C  4E4F                     707      trap    #15
0000144E                           708      
0000144E                           709      ;draw the pixel
0000144E  3203                     710      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001450  1006                     711      move.b  d6 ,d0
00001452  4E4F                     712      trap    #15
00001454                           713  
00001454                           714      
00001454  5243                     715      add.w #1, d3
00001456  7200                     716      move.l #0, d1
00001458  1218                     717      move.b (a0)+, d1 ;000000bb
0000145A  4841                     718      swap d1          ;00bb0000
0000145C  1218                     719      move.b (a0)+, d1 ;00bb00gg
0000145E  E149                     720      lsl.w #8, d1     ;00bbgg00
00001460  1218                     721      move.b (a0)+, d1 ;00bbggrr
00001462                           722      ;;;;;;;    
00001462                           723      
00001462                           724      ;set the proper trap code to set the pen color
00001462  1004                     725      move.b  d4, d0         
00001464  4E4F                     726      trap    #15
00001466                           727      
00001466                           728      ;draw the pixel
00001466  3203                     729      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001468  1006                     730      move.b  d6 ,d0
0000146A  4E4F                     731      trap    #15
0000146C                           732  
0000146C                           733      
0000146C  5243                     734      add.w #1, d3
0000146E  7200                     735      move.l #0, d1
00001470  1218                     736      move.b (a0)+, d1 ;000000bb
00001472  4841                     737      swap d1          ;00bb0000
00001474  1218                     738      move.b (a0)+, d1 ;00bb00gg
00001476  E149                     739      lsl.w #8, d1     ;00bbgg00
00001478  1218                     740      move.b (a0)+, d1 ;00bbggrr
0000147A                           741      ;;;;;;;    
0000147A                           742      
0000147A                           743      ;set the proper trap code to set the pen color
0000147A  1004                     744      move.b  d4, d0         
0000147C  4E4F                     745      trap    #15
0000147E                           746      
0000147E                           747      ;draw the pixel
0000147E  3203                     748      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001480  1006                     749      move.b  d6 ,d0
00001482  4E4F                     750      trap    #15
00001484                           751  
00001484                           752      
00001484  5243                     753      add.w #1, d3
00001486  7200                     754      move.l #0, d1
00001488  1218                     755      move.b (a0)+, d1 ;000000bb
0000148A  4841                     756      swap d1          ;00bb0000
0000148C  1218                     757      move.b (a0)+, d1 ;00bb00gg
0000148E  E149                     758      lsl.w #8, d1     ;00bbgg00
00001490  1218                     759      move.b (a0)+, d1 ;00bbggrr
00001492                           760      ;;;;;;;    
00001492                           761      
00001492                           762      ;set the proper trap code to set the pen color
00001492  1004                     763      move.b  d4, d0         
00001494  4E4F                     764      trap    #15
00001496                           765      
00001496                           766      ;draw the pixel
00001496  3203                     767      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001498  1006                     768      move.b  d6 ,d0
0000149A  4E4F                     769      trap    #15
0000149C                           770  
0000149C                           771      
0000149C  5243                     772      add.w #1, d3
0000149E  7200                     773      move.l #0, d1
000014A0  1218                     774      move.b (a0)+, d1 ;000000bb
000014A2  4841                     775      swap d1          ;00bb0000
000014A4  1218                     776      move.b (a0)+, d1 ;00bb00gg
000014A6  E149                     777      lsl.w #8, d1     ;00bbgg00
000014A8  1218                     778      move.b (a0)+, d1 ;00bbggrr
000014AA                           779      ;;;;;;;    
000014AA                           780      
000014AA                           781      ;set the proper trap code to set the pen color
000014AA  1004                     782      move.b  d4, d0         
000014AC  4E4F                     783      trap    #15
000014AE                           784      
000014AE                           785      ;draw the pixel
000014AE  3203                     786      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000014B0  1006                     787      move.b  d6 ,d0
000014B2  4E4F                     788      trap    #15
000014B4                           789  
000014B4                           790      
000014B4  5243                     791      add.w #1, d3
000014B6  7200                     792      move.l #0, d1
000014B8  1218                     793      move.b (a0)+, d1 ;000000bb
000014BA  4841                     794      swap d1          ;00bb0000
000014BC  1218                     795      move.b (a0)+, d1 ;00bb00gg
000014BE  E149                     796      lsl.w #8, d1     ;00bbgg00
000014C0  1218                     797      move.b (a0)+, d1 ;00bbggrr
000014C2                           798      ;;;;;;;    
000014C2                           799      
000014C2                           800      ;set the proper trap code to set the pen color
000014C2  1004                     801      move.b  d4, d0         
000014C4  4E4F                     802      trap    #15
000014C6                           803      
000014C6                           804      ;draw the pixel
000014C6  3203                     805      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000014C8  1006                     806      move.b  d6 ,d0
000014CA  4E4F                     807      trap    #15
000014CC                           808  
000014CC                           809      
000014CC  5243                     810      add.w #1, d3
000014CE  7200                     811      move.l #0, d1
000014D0  1218                     812      move.b (a0)+, d1 ;000000bb
000014D2  4841                     813      swap d1          ;00bb0000
000014D4  1218                     814      move.b (a0)+, d1 ;00bb00gg
000014D6  E149                     815      lsl.w #8, d1     ;00bbgg00
000014D8  1218                     816      move.b (a0)+, d1 ;00bbggrr
000014DA                           817      ;;;;;;;    
000014DA                           818      
000014DA                           819      ;set the proper trap code to set the pen color
000014DA  1004                     820      move.b  d4, d0         
000014DC  4E4F                     821      trap    #15
000014DE                           822      
000014DE                           823      ;draw the pixel
000014DE  3203                     824      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000014E0  1006                     825      move.b  d6 ,d0
000014E2  4E4F                     826      trap    #15
000014E4                           827  
000014E4                           828      
000014E4  5243                     829      add.w #1, d3
000014E6  7200                     830      move.l #0, d1
000014E8  1218                     831      move.b (a0)+, d1 ;000000bb
000014EA  4841                     832      swap d1          ;00bb0000
000014EC  1218                     833      move.b (a0)+, d1 ;00bb00gg
000014EE  E149                     834      lsl.w #8, d1     ;00bbgg00
000014F0  1218                     835      move.b (a0)+, d1 ;00bbggrr
000014F2                           836      ;;;;;;;    
000014F2                           837      
000014F2                           838      ;set the proper trap code to set the pen color
000014F2  1004                     839      move.b  d4, d0         
000014F4  4E4F                     840      trap    #15
000014F6                           841      
000014F6                           842      ;draw the pixel
000014F6  3203                     843      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000014F8  1006                     844      move.b  d6 ,d0
000014FA  4E4F                     845      trap    #15
000014FC                           846  
000014FC                           847      
000014FC  5243                     848      add.w #1, d3
000014FE  7200                     849      move.l #0, d1
00001500  1218                     850      move.b (a0)+, d1 ;000000bb
00001502  4841                     851      swap d1          ;00bb0000
00001504  1218                     852      move.b (a0)+, d1 ;00bb00gg
00001506  E149                     853      lsl.w #8, d1     ;00bbgg00
00001508  1218                     854      move.b (a0)+, d1 ;00bbggrr
0000150A                           855      ;;;;;;;    
0000150A                           856      
0000150A                           857      ;set the proper trap code to set the pen color
0000150A  1004                     858      move.b  d4, d0         
0000150C  4E4F                     859      trap    #15
0000150E                           860      
0000150E                           861      ;draw the pixel
0000150E  3203                     862      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001510  1006                     863      move.b  d6 ,d0
00001512  4E4F                     864      trap    #15
00001514                           865  
00001514                           866      
00001514  5243                     867      add.w #1, d3
00001516  7200                     868      move.l #0, d1
00001518  1218                     869      move.b (a0)+, d1 ;000000bb
0000151A  4841                     870      swap d1          ;00bb0000
0000151C  1218                     871      move.b (a0)+, d1 ;00bb00gg
0000151E  E149                     872      lsl.w #8, d1     ;00bbgg00
00001520  1218                     873      move.b (a0)+, d1 ;00bbggrr
00001522                           874      ;;;;;;;    
00001522                           875      
00001522                           876      ;set the proper trap code to set the pen color
00001522  1004                     877      move.b  d4, d0         
00001524  4E4F                     878      trap    #15
00001526                           879      
00001526                           880      ;draw the pixel
00001526  3203                     881      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001528  1006                     882      move.b  d6 ,d0
0000152A  4E4F                     883      trap    #15
0000152C                           884  
0000152C                           885      
0000152C  5243                     886      add.w #1, d3
0000152E  7200                     887      move.l #0, d1
00001530  1218                     888      move.b (a0)+, d1 ;000000bb
00001532  4841                     889      swap d1          ;00bb0000
00001534  1218                     890      move.b (a0)+, d1 ;00bb00gg
00001536  E149                     891      lsl.w #8, d1     ;00bbgg00
00001538  1218                     892      move.b (a0)+, d1 ;00bbggrr
0000153A                           893      ;;;;;;;    
0000153A                           894      
0000153A                           895      ;set the proper trap code to set the pen color
0000153A  1004                     896      move.b  d4, d0         
0000153C  4E4F                     897      trap    #15
0000153E                           898      
0000153E                           899      ;draw the pixel
0000153E  3203                     900      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001540  1006                     901      move.b  d6 ,d0
00001542  4E4F                     902      trap    #15
00001544                           903  
00001544                           904      
00001544  5243                     905      add.w #1, d3
00001546  7200                     906      move.l #0, d1
00001548  1218                     907      move.b (a0)+, d1 ;000000bb
0000154A  4841                     908      swap d1          ;00bb0000
0000154C  1218                     909      move.b (a0)+, d1 ;00bb00gg
0000154E  E149                     910      lsl.w #8, d1     ;00bbgg00
00001550  1218                     911      move.b (a0)+, d1 ;00bbggrr
00001552                           912      ;;;;;;;    
00001552                           913      
00001552                           914      ;set the proper trap code to set the pen color
00001552  1004                     915      move.b  d4, d0         
00001554  4E4F                     916      trap    #15
00001556                           917      
00001556                           918      ;draw the pixel
00001556  3203                     919      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001558  1006                     920      move.b  d6 ,d0
0000155A  4E4F                     921      trap    #15
0000155C                           922  
0000155C                           923      
0000155C  5243                     924      add.w #1, d3
0000155E  7200                     925      move.l #0, d1
00001560  1218                     926      move.b (a0)+, d1 ;000000bb
00001562  4841                     927      swap d1          ;00bb0000
00001564  1218                     928      move.b (a0)+, d1 ;00bb00gg
00001566  E149                     929      lsl.w #8, d1     ;00bbgg00
00001568  1218                     930      move.b (a0)+, d1 ;00bbggrr
0000156A                           931      ;;;;;;;    
0000156A                           932      
0000156A                           933      ;set the proper trap code to set the pen color
0000156A  1004                     934      move.b  d4, d0         
0000156C  4E4F                     935      trap    #15
0000156E                           936      
0000156E                           937      ;draw the pixel
0000156E  3203                     938      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001570  1006                     939      move.b  d6 ,d0
00001572  4E4F                     940      trap    #15
00001574                           941  
00001574                           942      
00001574  5243                     943      add.w #1, d3
00001576  7200                     944      move.l #0, d1
00001578  1218                     945      move.b (a0)+, d1 ;000000bb
0000157A  4841                     946      swap d1          ;00bb0000
0000157C  1218                     947      move.b (a0)+, d1 ;00bb00gg
0000157E  E149                     948      lsl.w #8, d1     ;00bbgg00
00001580  1218                     949      move.b (a0)+, d1 ;00bbggrr
00001582                           950      ;;;;;;;    
00001582                           951      
00001582                           952      ;set the proper trap code to set the pen color
00001582  1004                     953      move.b  d4, d0         
00001584  4E4F                     954      trap    #15
00001586                           955      
00001586                           956      ;draw the pixel
00001586  3203                     957      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001588  1006                     958      move.b  d6 ,d0
0000158A  4E4F                     959      trap    #15
0000158C                           960  
0000158C                           961      
0000158C  5243                     962      add.w #1, d3
0000158E  7200                     963      move.l #0, d1
00001590  1218                     964      move.b (a0)+, d1 ;000000bb
00001592  4841                     965      swap d1          ;00bb0000
00001594  1218                     966      move.b (a0)+, d1 ;00bb00gg
00001596  E149                     967      lsl.w #8, d1     ;00bbgg00
00001598  1218                     968      move.b (a0)+, d1 ;00bbggrr
0000159A                           969      ;;;;;;;    
0000159A                           970      
0000159A                           971      ;set the proper trap code to set the pen color
0000159A  1004                     972      move.b  d4, d0         
0000159C  4E4F                     973      trap    #15
0000159E                           974      
0000159E                           975      ;draw the pixel
0000159E  3203                     976      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000015A0  1006                     977      move.b  d6 ,d0
000015A2  4E4F                     978      trap    #15
000015A4                           979  
000015A4                           980      
000015A4  5243                     981      add.w #1, d3
000015A6  7200                     982      move.l #0, d1
000015A8  1218                     983      move.b (a0)+, d1 ;000000bb
000015AA  4841                     984      swap d1          ;00bb0000
000015AC  1218                     985      move.b (a0)+, d1 ;00bb00gg
000015AE  E149                     986      lsl.w #8, d1     ;00bbgg00
000015B0  1218                     987      move.b (a0)+, d1 ;00bbggrr
000015B2                           988      ;;;;;;;    
000015B2                           989      
000015B2                           990      ;set the proper trap code to set the pen color
000015B2  1004                     991      move.b  d4, d0         
000015B4  4E4F                     992      trap    #15
000015B6                           993      
000015B6                           994      ;draw the pixel
000015B6  3203                     995      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000015B8  1006                     996      move.b  d6 ,d0
000015BA  4E4F                     997      trap    #15
000015BC                           998  
000015BC                           999      
000015BC  5243                    1000      add.w #1, d3
000015BE  7200                    1001      move.l #0, d1
000015C0  1218                    1002      move.b (a0)+, d1 ;000000bb
000015C2  4841                    1003      swap d1          ;00bb0000
000015C4  1218                    1004      move.b (a0)+, d1 ;00bb00gg
000015C6  E149                    1005      lsl.w #8, d1     ;00bbgg00
000015C8  1218                    1006      move.b (a0)+, d1 ;00bbggrr
000015CA                          1007      ;;;;;;;    
000015CA                          1008      
000015CA                          1009      ;set the proper trap code to set the pen color
000015CA  1004                    1010      move.b  d4, d0         
000015CC  4E4F                    1011      trap    #15
000015CE                          1012      
000015CE                          1013      ;draw the pixel
000015CE  3203                    1014      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000015D0  1006                    1015      move.b  d6 ,d0
000015D2  4E4F                    1016      trap    #15
000015D4                          1017  
000015D4                          1018      
000015D4  5243                    1019      add.w #1, d3
000015D6  7200                    1020      move.l #0, d1
000015D8  1218                    1021      move.b (a0)+, d1 ;000000bb
000015DA  4841                    1022      swap d1          ;00bb0000
000015DC  1218                    1023      move.b (a0)+, d1 ;00bb00gg
000015DE  E149                    1024      lsl.w #8, d1     ;00bbgg00
000015E0  1218                    1025      move.b (a0)+, d1 ;00bbggrr
000015E2                          1026      ;;;;;;;    
000015E2                          1027      
000015E2                          1028      ;set the proper trap code to set the pen color
000015E2  1004                    1029      move.b  d4, d0         
000015E4  4E4F                    1030      trap    #15
000015E6                          1031      
000015E6                          1032      ;draw the pixel
000015E6  3203                    1033      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000015E8  1006                    1034      move.b  d6 ,d0
000015EA  4E4F                    1035      trap    #15
000015EC                          1036  
000015EC                          1037      
000015EC  5243                    1038      add.w #1, d3
000015EE  7200                    1039      move.l #0, d1
000015F0  1218                    1040      move.b (a0)+, d1 ;000000bb
000015F2  4841                    1041      swap d1          ;00bb0000
000015F4  1218                    1042      move.b (a0)+, d1 ;00bb00gg
000015F6  E149                    1043      lsl.w #8, d1     ;00bbgg00
000015F8  1218                    1044      move.b (a0)+, d1 ;00bbggrr
000015FA                          1045      ;;;;;;;    
000015FA                          1046      
000015FA                          1047      ;set the proper trap code to set the pen color
000015FA  1004                    1048      move.b  d4, d0         
000015FC  4E4F                    1049      trap    #15
000015FE                          1050      
000015FE                          1051      ;draw the pixel
000015FE  3203                    1052      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001600  1006                    1053      move.b  d6 ,d0
00001602  4E4F                    1054      trap    #15
00001604                          1055  
00001604                          1056      
00001604  5243                    1057      add.w #1, d3
00001606  7200                    1058      move.l #0, d1
00001608  1218                    1059      move.b (a0)+, d1 ;000000bb
0000160A  4841                    1060      swap d1          ;00bb0000
0000160C  1218                    1061      move.b (a0)+, d1 ;00bb00gg
0000160E  E149                    1062      lsl.w #8, d1     ;00bbgg00
00001610  1218                    1063      move.b (a0)+, d1 ;00bbggrr
00001612                          1064      ;;;;;;;    
00001612                          1065      
00001612                          1066      ;set the proper trap code to set the pen color
00001612  1004                    1067      move.b  d4, d0         
00001614  4E4F                    1068      trap    #15
00001616                          1069      
00001616                          1070      ;draw the pixel
00001616  3203                    1071      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001618  1006                    1072      move.b  d6 ,d0
0000161A  4E4F                    1073      trap    #15
0000161C                          1074  
0000161C                          1075      
0000161C  5243                    1076      add.w #1, d3
0000161E  7200                    1077      move.l #0, d1
00001620  1218                    1078      move.b (a0)+, d1 ;000000bb
00001622  4841                    1079      swap d1          ;00bb0000
00001624  1218                    1080      move.b (a0)+, d1 ;00bb00gg
00001626  E149                    1081      lsl.w #8, d1     ;00bbgg00
00001628  1218                    1082      move.b (a0)+, d1 ;00bbggrr
0000162A                          1083      ;;;;;;;    
0000162A                          1084      
0000162A                          1085      ;set the proper trap code to set the pen color
0000162A  1004                    1086      move.b  d4, d0         
0000162C  4E4F                    1087      trap    #15
0000162E                          1088      
0000162E                          1089      ;draw the pixel
0000162E  3203                    1090      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001630  1006                    1091      move.b  d6 ,d0
00001632  4E4F                    1092      trap    #15
00001634                          1093  
00001634                          1094      
00001634  5243                    1095      add.w #1, d3
00001636  7200                    1096      move.l #0, d1
00001638  1218                    1097      move.b (a0)+, d1 ;000000bb
0000163A  4841                    1098      swap d1          ;00bb0000
0000163C  1218                    1099      move.b (a0)+, d1 ;00bb00gg
0000163E  E149                    1100      lsl.w #8, d1     ;00bbgg00
00001640  1218                    1101      move.b (a0)+, d1 ;00bbggrr
00001642                          1102      ;;;;;;;    
00001642                          1103      
00001642                          1104      ;set the proper trap code to set the pen color
00001642  1004                    1105      move.b  d4, d0         
00001644  4E4F                    1106      trap    #15
00001646                          1107      
00001646                          1108      ;draw the pixel
00001646  3203                    1109      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001648  1006                    1110      move.b  d6 ,d0
0000164A  4E4F                    1111      trap    #15
0000164C                          1112  
0000164C                          1113      
0000164C  5243                    1114      add.w #1, d3
0000164E  7200                    1115      move.l #0, d1
00001650  1218                    1116      move.b (a0)+, d1 ;000000bb
00001652  4841                    1117      swap d1          ;00bb0000
00001654  1218                    1118      move.b (a0)+, d1 ;00bb00gg
00001656  E149                    1119      lsl.w #8, d1     ;00bbgg00
00001658  1218                    1120      move.b (a0)+, d1 ;00bbggrr
0000165A                          1121      ;;;;;;;    
0000165A                          1122      
0000165A                          1123      ;set the proper trap code to set the pen color
0000165A  1004                    1124      move.b  d4, d0         
0000165C  4E4F                    1125      trap    #15
0000165E                          1126      
0000165E                          1127      ;draw the pixel
0000165E  3203                    1128      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001660  1006                    1129      move.b  d6 ,d0
00001662  4E4F                    1130      trap    #15
00001664                          1131  
00001664                          1132      
00001664  5243                    1133      add.w #1, d3
00001666  7200                    1134      move.l #0, d1
00001668  1218                    1135      move.b (a0)+, d1 ;000000bb
0000166A  4841                    1136      swap d1          ;00bb0000
0000166C  1218                    1137      move.b (a0)+, d1 ;00bb00gg
0000166E  E149                    1138      lsl.w #8, d1     ;00bbgg00
00001670  1218                    1139      move.b (a0)+, d1 ;00bbggrr
00001672                          1140      ;;;;;;;    
00001672                          1141      
00001672                          1142      ;set the proper trap code to set the pen color
00001672  1004                    1143      move.b  d4, d0         
00001674  4E4F                    1144      trap    #15
00001676                          1145      
00001676                          1146      ;draw the pixel
00001676  3203                    1147      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001678  1006                    1148      move.b  d6 ,d0
0000167A  4E4F                    1149      trap    #15
0000167C                          1150  
0000167C                          1151      
0000167C  5243                    1152      add.w #1, d3
0000167E  7200                    1153      move.l #0, d1
00001680  1218                    1154      move.b (a0)+, d1 ;000000bb
00001682  4841                    1155      swap d1          ;00bb0000
00001684  1218                    1156      move.b (a0)+, d1 ;00bb00gg
00001686  E149                    1157      lsl.w #8, d1     ;00bbgg00
00001688  1218                    1158      move.b (a0)+, d1 ;00bbggrr
0000168A                          1159      ;;;;;;;    
0000168A                          1160      
0000168A                          1161      ;set the proper trap code to set the pen color
0000168A  1004                    1162      move.b  d4, d0         
0000168C  4E4F                    1163      trap    #15
0000168E                          1164      
0000168E                          1165      ;draw the pixel
0000168E  3203                    1166      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
00001690  1006                    1167      move.b  d6 ,d0
00001692  4E4F                    1168      trap    #15
00001694                          1169  
00001694                          1170      
00001694  5243                    1171      add.w #1, d3
00001696  7200                    1172      move.l #0, d1
00001698  1218                    1173      move.b (a0)+, d1 ;000000bb
0000169A  4841                    1174      swap d1          ;00bb0000
0000169C  1218                    1175      move.b (a0)+, d1 ;00bb00gg
0000169E  E149                    1176      lsl.w #8, d1     ;00bbgg00
000016A0  1218                    1177      move.b (a0)+, d1 ;00bbggrr
000016A2                          1178      ;;;;;;;    
000016A2                          1179      
000016A2                          1180      ;set the proper trap code to set the pen color
000016A2  1004                    1181      move.b  d4, d0         
000016A4  4E4F                    1182      trap    #15
000016A6                          1183      
000016A6                          1184      ;draw the pixel
000016A6  3203                    1185      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000016A8  1006                    1186      move.b  d6 ,d0
000016AA  4E4F                    1187      trap    #15
000016AC                          1188  
000016AC                          1189      
000016AC  5243                    1190      add.w #1, d3
000016AE  7200                    1191      move.l #0, d1
000016B0  1218                    1192      move.b (a0)+, d1 ;000000bb
000016B2  4841                    1193      swap d1          ;00bb0000
000016B4  1218                    1194      move.b (a0)+, d1 ;00bb00gg
000016B6  E149                    1195      lsl.w #8, d1     ;00bbgg00
000016B8  1218                    1196      move.b (a0)+, d1 ;00bbggrr
000016BA                          1197      ;;;;;;;    
000016BA                          1198      
000016BA                          1199      ;set the proper trap code to set the pen color
000016BA  1004                    1200      move.b  d4, d0         
000016BC  4E4F                    1201      trap    #15
000016BE                          1202      
000016BE                          1203      ;draw the pixel
000016BE  3203                    1204      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000016C0  1006                    1205      move.b  d6 ,d0
000016C2  4E4F                    1206      trap    #15
000016C4                          1207  
000016C4                          1208      
000016C4  5243                    1209      add.w #1, d3
000016C6  7200                    1210      move.l #0, d1
000016C8  1218                    1211      move.b (a0)+, d1 ;000000bb
000016CA  4841                    1212      swap d1          ;00bb0000
000016CC  1218                    1213      move.b (a0)+, d1 ;00bb00gg
000016CE  E149                    1214      lsl.w #8, d1     ;00bbgg00
000016D0  1218                    1215      move.b (a0)+, d1 ;00bbggrr
000016D2                          1216      ;;;;;;;    
000016D2                          1217      
000016D2                          1218      ;set the proper trap code to set the pen color
000016D2  1004                    1219      move.b  d4, d0         
000016D4  4E4F                    1220      trap    #15
000016D6                          1221      
000016D6                          1222      ;draw the pixel
000016D6  3203                    1223      move.w  d3, d1 ;can use word because trap 82 only uses d1.w
000016D8  1006                    1224      move.b  d6 ,d0
000016DA  4E4F                    1225      trap    #15
000016DC                          1226  
000016DC                          1227      
000016DC                          1228      
000016DC                          1229  
000016DC                          1230      
000016DC                          1231      
000016DC                          1232      ;END ROW
000016DC                          1233      
000016DC                          1234      
000016DC                          1235      
000016DC                          1236      ;move the pointer to the end of the row of colors in the file
000016DC  2039 0000173C           1237      move.l width, d0
000016E2  90AF 0004               1238      sub.l PIECE_WIDTH(sp), d0 ;get the value of width - piecewidth
000016E6  90AF 000C               1239      sub.l PIECE_XPOS(sp), d0 ;get the value from the end of the piece to the end of the bmp
000016EA  C1FC 0003               1240      muls.w #3, d0
000016EE  D1C0                    1241      add.l d0, a0
000016F0                          1242      
000016F0                          1243      ;add the padding at the end of the row
000016F0  D1F9 00001744           1244      add.l padding, a0
000016F6                          1245      
000016F6  7600                    1246      move.l #0, d3 ;reset xPos
000016F8  D66F 0014               1247      add.w  SCREEN_X(sp), d3 ;correct for screenX
000016FC                          1248      
000016FC                          1249      ;set the left piece draw position
000016FC  222F 000C               1250      move.l PIECE_XPOS(sp), d1
00001700  C3FC 0003               1251      muls.w #3, d1 ; 3 colors each for 1 position, add that to the pixel address pointer
00001704  D1C1                    1252      add.l d1, a0
00001706  C03C 0001               1253      and.b #1, d0         
0000170A                          1254      ;check if we're done with the loop (hit top draw pos)
0000170A  5382                    1255      sub.l  #1,d2
0000170C                          1256      
0000170C  2039 0000174A           1257      move.l topPieceDrawBarrier, d0
00001712  B480                    1258      cmp.l d0 , d2 ;check topMost Barrier
00001714  6600 FCE0               1259      bne hilariousOptomization ;LOOP back to drawing the next row
00001718  4EF8 13B6               1260      jmp DONE
0000171C                          1261  
0000171C                          1262  
0000171C                          1263          
0000171C                          1264  
0000171C                          1265  
0000171C= 00000000                1266  fileAddress dc.l 0 
00001720= 00000280                1267  widthOfPiece dc.l  640
00001724= 000001E0                1268  heightOfPiece   dc.l    480
00001728= 00000000                1269  xPosOfPiece dc.l    0
0000172C= 00000000                1270  yPosOfPiece dc.l  0
00001730= 0000                    1271  screenX dc.w 0
00001732= 0000                    1272  screenY dc.w 0
00001734                          1273  
00001734= 00000001                1274  pixelStartAddress    dc.l    1
00001738= 00000001                1275  colorTableStartAddress dc.l 1
0000173C= 00000001                1276  width    dc.l    1
00001740= 00000001                1277  height    dc.l    1
00001744= 01                      1278  padding dc.b 1
00001746= 00000001                1279  rightPieceDrawBarrier dc.l 1
0000174A= 00000001                1280  topPieceDrawBarrier dc.l 1
0000174E= 00000001                1281  bottomPieceBoundary dc.l 1
00001752                          1282  
00001752                          1283  
00001752                          1284  
00001752                          1285  
00001752                          1286  
00001752                          1287  
00001752                          1288  
00001752                          1289  
00001752                          1290  
00001752                          1291          
00001752                          1292  
00001752                          1293  
00001752                          1294  
00001752                          1295  
00001752                          1296  
00001752                          1297  
00001752                          1298  
00001752                          1299  
00001752                          1300  
00001752                          1301  
00001752                          1302  -------------------- end include --------------------
00001752                          1303      include 'randomNumbers.x68'
00001752                          1304  
00001752                          1305  ALL_REG                 REG     D0-D7/A0-A6
00001752                          1306  
00001752  =00000008               1307  GET_TIME_COMMAND        equ     8
00001752                          1308  
00001752                          1309  
00001752                          1310  
00001752                          1311  
00001752                          1312  seedRandomNumber
00001752  48E7 FFFE               1313          movem.l ALL_REG,-(sp)
00001756  4286                    1314          clr.l   d6
00001758  103C 0008               1315          move.b  #GET_TIME_COMMAND,d0
0000175C  4E4F                    1316          TRAP    #15
0000175E                          1317  
0000175E  23C1 000017A4           1318          move.l  d1,RANDOMVAL
00001764  4CDF 7FFF               1319          movem.l (sp)+,ALL_REG
00001768  4E75                    1320          rts
0000176A                          1321  
0000176A                          1322  getRandomByteIntoD3
0000176A                          1323          ;jsr seedRandomNumber
0000176A  48E7 8000               1324          movem.l d0,-(sp)
0000176E  48E7 4000               1325          movem.l d1,-(sp)
00001772  48E7 2000               1326          movem.l d2,-(sp)
00001776  2039 000017A4           1327          move.l  RANDOMVAL,d0
0000177C  72AF                    1328          moveq   #$AF-$100,d1
0000177E  7412                    1329          moveq   #18,d2
00001780                          1330  Ninc0   
00001780  D080                    1331      add.l   d0,d0
00001782  6400 0004               1332      bcc Ninc1
00001786  B300                    1333      eor.b   d1,d0
00001788                          1334  Ninc1
00001788  51CA FFF6               1335      dbf d2,Ninc0
0000178C                          1336      
0000178C  23C0 000017A4           1337      move.l  d0,RANDOMVAL
00001792  7600                    1338          move.l #0, d3
00001794  1600                    1339          move.b d0, d3
00001796  4CDF 0004               1340      movem.l (sp)+,d2
0000179A  4CDF 0002               1341          movem.l (sp)+,d1
0000179E  4CDF 0001               1342          movem.l (sp)+,d0
000017A2  4E75                    1343          rts
000017A4                          1344  
000017A4                          1345  RANDOMVAL       ds.l    1
000017A8                          1346  TEMPRANDOMLONG  ds.l    1
000017AC                          1347  
000017AC                          1348  
000017AC                          1349  
000017AC                          1350  
000017AC                          1351  
000017AC                          1352  
000017AC                          1353  
000017AC                          1354  
000017AC                          1355  
000017AC                          1356  
000017AC                          1357  
000017AC                          1358  
000017AC                          1359  
000017AC                          1360  
000017AC                          1361  -------------------- end include --------------------
000017AC                          1362      include 'collision.x68'
000017AC                          1363  
000017AC                          1364  ;defenderXPos is d2, defenderYPos is d3
000017AC                          1365  checkCollisionWithPlayer
000017AC                          1366      ;check defender1 collision (x first)
000017AC  2007                    1367      move.l d7, d0 ;get the left side of the player
000017AE  2202                    1368      move.l d2, d1 
000017B0  0681 00001E00           1369      add.l #(PLAYER_WIDTH)<<8, d1 ;get the right side of the defender
000017B6  B081                    1370      cmp.l d1, d0 ;is the left side of the player to the right of the right side of the defender
000017B8  6C00 007A               1371      bge noCollision
000017BC  0680 00001E00           1372      add.l #(PLAYER_WIDTH)<<8,d0 ;get the left side of the player
000017C2  B082                    1373      cmp.l d2,d0 ;is the right side of the player less than the left side of the defender
000017C4  6F00 006E               1374      ble noCollision
000017C8                          1375      
000017C8                          1376      ;y collision
000017C8  2006                    1377      move.l d6, d0
000017CA  2203                    1378      move.l d3, d1
000017CC  0681 00001E00           1379      add.l #(PLAYER_HEIGHT)<<8, d1 ;get the bottom of the player
000017D2  B081                    1380      cmp.l d1, d0 ;is the top of the player below (greater than) the bottom of the receiver
000017D4  6C00 005E               1381      bge noCollision
000017D8  0680 00001E00           1382      add.l #(PLAYER_HEIGHT)<<8, d0
000017DE  B083                    1383      cmp.l d3, d0 ;is the bottom of the player above (less than) the top of the receiver
000017E0  6F00 0052               1384      ble noCollision
000017E4                          1385      
000017E4  103C 0001               1386      move.b #1, d0 ;yes collision
000017E8  4E75                    1387      rts
000017EA                          1388  
000017EA                          1389  
000017EA                          1390      ;TODO   
000017EA                          1391  ;XPos is d3, YPos is d4
000017EA                          1392  checkBallCollision 
000017EA  2039 0029DE68           1393      move.l ballPosX, d0 ;leftX of ball
000017F0  0680 00001900           1394      add.l #FOOTBALL_CARRY_OFFSET_X, d0 ;account for the draw position
000017F6  2400                    1395      move.l d0, d2
000017F8  0682 00000900           1396      add.l #(FOOTBALL_WIDTH)<<8, d2 ;rightX of ball
000017FE  2239 0029DE6C           1397      move.l ballPosY, d1
00001804  0681 00000A00           1398      add.l #FOOTBALL_CARRY_OFFSET_Y, d1 
0000180A                          1399      
0000180A                          1400      ;check collision with receiver1
0000180A                          1401      ;check y bounds
0000180A  B284                    1402      cmp.l   d4, d1 ;is ballPosY < Receiver1YPos
0000180C  6D00 0026               1403      blt noCollision  ;is it above the top of the receiver
00001810  0684 00001E00           1404      add.l   #(PLAYER_HEIGHT)<<8,d4
00001816  B284                    1405      cmp.l   d4, d1 ;is ballPosY  > Receiver1YPos + Player_Height
00001818  6E00 001A               1406      bgt noCollision ;is it below the bottom of the receiver
0000181C                          1407      ;check x bounds
0000181C  B483                    1408      cmp.l   d3, d2 ;is right edge ballPosX < Receiver1XPos
0000181E  6D00 0014               1409      blt noCollision  ;is it to the left of the receiver
00001822  0683 00001E00           1410      add.l   #(PLAYER_WIDTH)<<8,d3
00001828  B083                    1411      cmp.l   d3, d0 ;is left edge ballPosX > Receiver1XPos + player_width
0000182A  6E00 0008               1412      bgt noCollision ;is it below the bottom of the receiver
0000182E                          1413  
0000182E  103C 0001               1414      move.b #1, d0
00001832  4E75                    1415      rts
00001834                          1416  noCollision
00001834  103C 0000               1417      move.b #0, d0 ;no collision
00001838  4E75                    1418      rts
0000183A                          1419      
0000183A                          1420  
0000183A                          1421  
0000183A                          1422  
0000183A                          1423  -------------------- end include --------------------
0000183A                          1424      include '7segmentDisplay.x68'
0000183A                          1425  ;takes in d3 as val to draw, 0-9, d1 startXpos, d2 startYPos
0000183A                          1426  DrawSegments
0000183A  48E7 FFFE               1427      movem.l ALL_REG, -(sp)
0000183E  41F9 000018B6           1428      lea     segmentByteArray, a0
00001844  7E00                    1429      move.l  #0, d7                          ;counter
00001846  7C00                    1430      move.l  #0, d6
00001848  3C03                    1431      move.w  d3, d6
0000184A                          1432      
0000184A                          1433      ;store these
0000184A  2641                    1434      move.l  d1, a3
0000184C  2842                    1435      move.l  d2, a4
0000184E                          1436  drawSegmentLoop    
0000184E                          1437      ;move to the next segment
0000184E  4EB9 00001862           1438      jsr     drawSegment
00001854  5207                    1439      add.b   #1, d7 
00001856  BE3C 0007               1440      cmp.b   #7, d7
0000185A  66F2                    1441      bne     drawSegmentLoop
0000185C                          1442  doneDrawingSegments
0000185C  4CDF 7FFF               1443      movem.l (sp)+, ALL_REG
00001860  4E75                    1444      rts
00001862                          1445  
00001862                          1446  ;takes in d6 as segment to draw, d1 as startXpos, d2 startYPos
00001862                          1447  DrawSegment
00001862                          1448      ;get byte from segmentByteArray
00001862  7A00                    1449      move.l  #0, d5
00001864  1A30 6000               1450      move.b  (a0, d6), d5
00001868  0F05                    1451      btst    d7, d5
0000186A  6700 0048               1452      beq     dontDrawSegment
0000186E                          1453      
0000186E                          1454      ;copy the positions before the offset
0000186E  220B                    1455      move.l  a3, d1
00001870  240C                    1456      move.l  a4, d2
00001872  2601                    1457      move.l  d1, d3
00001874  2802                    1458      move.l  d2, d4
00001876  48E7 0200               1459      movem.l d6, -(sp)
0000187A  7C00                    1460      move.l  #0, d6
0000187C                          1461      
0000187C                          1462      ;get positions from tables
0000187C  2A07                    1463      move.l  d7, d5
0000187E  43F9 000018C0           1464      lea     segmentXStartPositions, a1
00001884  1C31 5000               1465      move.b  (a1, d5), d6                    ;set xpos1
00001888  D246                    1466      add.w   d6, d1
0000188A                          1467      
0000188A  43F9 000018CE           1468      lea     segmentYStartPositions, a1
00001890  1C31 5000               1469      move.b  (a1, d5), d6                    ;set ypos1
00001894  D446                    1470      add.w   d6, d2
00001896                          1471      
00001896  43F9 000018C7           1472      lea     segmentXEndPositions, a1
0000189C  1C31 5000               1473      move.b  (a1, d5), d6                    ;set xpos2
000018A0  D646                    1474      add.w   d6, d3
000018A2                          1475      
000018A2  43F9 000018D5           1476      lea     segmentYEndPositions, a1
000018A8  1C31 5000               1477      move.b  (a1, d5), d6                    ;set ypos2
000018AC  D846                    1478      add.w   d6, d4
000018AE                          1479      
000018AE  4E4F                    1480      trap    #15
000018B0  4CDF 0040               1481      movem.l (sp)+, d6 
000018B4                          1482         
000018B4                          1483  dontDrawSegment
000018B4  4E75                    1484      rts
000018B6                          1485  
000018B6= 3F 06 5B 4F 66 6D ...   1486  segmentByteArray        dc.b $3F, $06, $5B, $4F, $66, $6D, $7D, $07, $FF, $6F
000018C0                          1487  
000018C0= 03 12 12 03 00 00 03    1488  segmentXStartPositions  dc.b 3, 18, 18,  3,  0,  0, 3
000018C7= 0F 12 12 0F 00 00 0F    1489  segmentXEndPositions    dc.b 15, 18, 18,  15,  0,  0, 15
000018CE= 00 03 15 24 15 03 12    1490  segmentYStartPositions  dc.b 0, 3, 21,  36, 21,  3, 18
000018D5= 00 0F 21 24 21 0F 12    1491  segmentYEndPositions    dc.b 0, 15, 33, 36, 33, 15, 18
000018DC                          1492  
000018DC                          1493  
000018DC                          1494  
000018DC                          1495  
000018DC                          1496  -------------------- end include --------------------
000018DC                          1497      include 'drawing.x68'
000018DC                          1498  
000018DC                          1499  ;sets coordinates for being used with draw bitmap background
000018DC                          1500  ;d1 is xPos, d2 yPos, d3 width, d4 height
000018DC                          1501  setPieceCoordinates
000018DC  E089                    1502      lsr.l   #8, d1
000018DE  21C1 1728               1503      move.l  d1, xPosOfPiece
000018E2  31C1 1730               1504      move.w  d1, screenX
000018E6  E08A                    1505      lsr.l   #8, d2 
000018E8  21C2 172C               1506      move.l  d2, yPosOfPiece
000018EC  31C2 1732               1507      move.w  d2, screenY
000018F0  21C3 1720               1508      move.l  d3, widthOfPiece
000018F4  21C4 1724               1509      move.l  d4, heightOfPiece
000018F8  4E75                    1510      rts
000018FA                          1511      
000018FA                          1512  ;draws a piece of the bitmap given
000018FA                          1513  ;d1 xpos, d2 ypos, d3 width, d4 height
000018FA                          1514  drawAPiece
000018FA  4EB8 18DC               1515      jsr     setPieceCoordinates
000018FE  4EB8 136A               1516      jsr     drawBitmapPiece
00001902  4E75                    1517      rts
00001904                          1518      
00001904                          1519  ;draws a piece of the bitmap given parameters for a player/receiver
00001904                          1520  ;d1 xpos, d2 ypos, d3 width, d4 height
00001904                          1521  drawAPlayer
00001904  4EB8 18DC               1522      jsr     setPieceCoordinates
00001908  4EB8 131E               1523      jsr     drawPlayerBitmap
0000190C  4E75                    1524      rts
0000190E                          1525      
0000190E                          1526  ;draws a bitmap at x, y space given
0000190E                          1527  ;d1 xpos, d2 ypos, d3 width, d4 height    
0000190E                          1528  drawAMenu
0000190E  4EB8 18DC               1529      jsr     setPieceCoordinates
00001912  21FC 00000000 1728      1530      move.l  #0, xPosOfPiece
0000191A  21FC 00000000 172C      1531      move.l  #0, yPosOfPiece
00001922  4EB8 12D2               1532      jsr     drawMenuBitmap
00001926  4E75                    1533      rts
00001928                          1534  
00001928                          1535  ;d1 x1, d2 y1, d3 x2, d4 y2
00001928                          1536  drawLine
00001928  B4BC 0000004A           1537      cmp.l   #TOP_RECEIVER_MAX_POS, d2
0000192E  6C00 0004               1538      bge normalLine1
00001932  744A                    1539      move.l  #TOP_RECEIVER_MAX_POS, d2
00001934                          1540  normalLine1
00001934  B8BC 0000004A           1541      cmp.l   #TOP_RECEIVER_MAX_POS, d4
0000193A  6C00 0004               1542      bge     normalLine
0000193E  784A                    1543      move.l  #TOP_RECEIVER_MAX_POS, d4
00001940                          1544  normalLine
00001940  7054                    1545      move.l  #DRAW_LINE_COMMAND, d0
00001942  4E4F                    1546      trap    #15
00001944  4E75                    1547      rts
00001946                          1548  
00001946                          1549  ;draws a path given receiver patterns from the file
00001946                          1550  ;d0 xpos, d1 ypos, d2 turnpos, d3 xvel, d4 yvel
00001946                          1551  drawPath
00001946  2A00                    1552      move.l  d0, d5
00001948  2C01                    1553      move.l  d1, d6
0000194A  2E02                    1554      move.l  d2, d7
0000194C  4EB9 000024A6           1555      jsr     getXCoordAtYFromVelocity
00001952                          1556      
00001952  2205                    1557      move.l  d5, d1
00001954  E081                    1558      asr.l   #8, d1
00001956  2406                    1559      move.l  d6, d2
00001958  E082                    1560      asr.l   #8, d2
0000195A                          1561    
0000195A  E083                    1562      asr.l   #8, d3
0000195C  2807                    1563      move.l  d7, d4
0000195E  E084                    1564      asr.l   #8, d4
00001960                          1565      
00001960  4EB8 1928               1566      jsr     drawLine
00001964  4E75                    1567      rts
00001966                          1568  
00001966                          1569  ;draws all receiver paths 
00001966                          1570  drawPaths
00001966  705D                    1571      move.l  #SET_PEN_WIDTH_COMMAND, d0
00001968  7202                    1572      move.l  #LINE_OF_SCRIMMAGE_HEIGHT, d1
0000196A  4E4F                    1573      trap    #15
0000196C                          1574      
0000196C  7050                    1575      move.l  #SET_PEN_COLOR_COMMAND, d0
0000196E  223C 000000FF           1576      move.l  #PATH_COLOR, d1
00001974  4E4F                    1577      trap    #15
00001976                          1578      
00001976                          1579      
00001976  48E7 0700               1580      movem.l d5-d7, -(sp)
0000197A                          1581      ;receiver1 path1 
0000197A  2039 0029DDCC           1582      move.l  receiver1Xpos, d0
00001980  2239 0029DDD0           1583      move.l  receiver1Ypos, d1
00001986  2439 0029DDE4           1584      move.l  receiver1YTurnPos, d2
0000198C  2639 0029DDE8           1585      move.l  receiver1XVel1, d3
00001992  2839 0029DDEC           1586      move.l  receiver1YVel1,  d4
00001998                          1587      
00001998                          1588      ;move to player middle
00001998  2A3C 00001E00           1589      move.l  #(PLAYER_WIDTH)<<8, d5
0000199E  E28D                    1590      lsr.l   #1, d5
000019A0  D085                    1591      add.l   d5, d0
000019A2                          1592              
000019A2  2A3C 00001E00           1593      move.l  #(PLAYER_HEIGHT)<<8, d5
000019A8  E28D                    1594      lsr.l   #1, d5
000019AA  D285                    1595      add.l   d5, d1
000019AC  D485                    1596      add.l   d5, d2
000019AE  4EB8 1946               1597      jsr     drawPath
000019B2                          1598      
000019B2  23C1 0029DE94           1599      move.l  d1, path1X1
000019B8  23C2 0029DE98           1600      move.l  d2, path1Y1
000019BE  23C3 0029DE9C           1601      move.l  d3, path1X2
000019C4  23C4 0029DEA0           1602      move.l  d4, path1Y2
000019CA                          1603      
000019CA  E18B                    1604      lsl.l   #8, d3
000019CC  2003                    1605      move.l  d3, d0
000019CE  2239 0029DDE4           1606      move.l  receiver1YTurnPos, d1
000019D4  2401                    1607      move.l  d1, d2
000019D6                          1608  
000019D6  2A3C 00001E00           1609      move.l  #(PLAYER_HEIGHT)<<8, d5
000019DC  E28D                    1610      lsr.l   #1, d5
000019DE  D285                    1611      add.l   d5, d1
000019E0  D485                    1612      add.l   d5, d2
000019E2                          1613  
000019E2                          1614      ;determine if the receiver is going up or down
000019E2  2639 0029DDF4           1615      move.l  receiver1YVel2, d3
000019E8  EF83                    1616      asl.l   #7, d3                          ;get the line direction
000019EA  D483                    1617      add.l   d3, d2
000019EC                          1618  
000019EC  2639 0029DDF0           1619      move.l  receiver1XVel2, d3
000019F2  2839 0029DDF4           1620      move.l  receiver1YVel2,  d4
000019F8                          1621  
000019F8  4EB8 1946               1622      jsr     drawPath
000019FC                          1623      
000019FC  23C3 0029DEA4           1624      move.l  d3, path1X3
00001A02  23C4 0029DEA8           1625      move.l  d4, path1Y3
00001A08                          1626      
00001A08                          1627      
00001A08                          1628      ;receiver 2 paths
00001A08  2039 0029DDD4           1629      move.l  receiver2Xpos, d0
00001A0E  2239 0029DDD8           1630      move.l  receiver2Ypos, d1
00001A14  2439 0029DE04           1631      move.l  receiver2YTurnPos, d2
00001A1A  2639 0029DE08           1632      move.l  receiver2XVel1, d3
00001A20  2839 0029DE0C           1633      move.l  receiver2YVel1,  d4
00001A26                          1634      
00001A26                          1635      ;move to player middle
00001A26  2A3C 00001E00           1636      move.l  #(PLAYER_WIDTH)<<8, d5
00001A2C  E28D                    1637      lsr.l   #1, d5
00001A2E  D085                    1638      add.l   d5, d0
00001A30                          1639              
00001A30  2A3C 00001E00           1640      move.l  #(PLAYER_HEIGHT)<<8, d5
00001A36  E28D                    1641      lsr.l   #1, d5
00001A38  D285                    1642      add.l   d5, d1
00001A3A  D485                    1643      add.l   d5, d2
00001A3C  4EB8 1946               1644      jsr     drawPath
00001A40                          1645      
00001A40  23C1 0029DEAC           1646      move.l  d1, path2X1
00001A46  23C2 0029DEB0           1647      move.l  d2, path2Y1
00001A4C  23C3 0029DEB4           1648      move.l  d3, path2X2
00001A52  23C4 0029DEB8           1649      move.l  d4, path2Y2
00001A58                          1650      
00001A58  E18B                    1651      lsl.l   #8, d3
00001A5A  2003                    1652      move.l  d3, d0
00001A5C  2239 0029DE04           1653      move.l  receiver2YTurnPos, d1
00001A62  2401                    1654      move.l  d1, d2
00001A64                          1655  
00001A64  2A3C 00001E00           1656      move.l  #(PLAYER_HEIGHT)<<8, d5
00001A6A  E28D                    1657      lsr.l   #1, d5
00001A6C  D285                    1658      add.l   d5, d1
00001A6E  D485                    1659      add.l   d5, d2
00001A70                          1660  
00001A70                          1661      ;determine if the receiver is going up or down
00001A70  2639 0029DE14           1662      move.l  receiver2YVel2, d3
00001A76  EF83                    1663      asl.l   #7, d3                          ;get the line direction
00001A78  D483                    1664      add.l   d3, d2
00001A7A                          1665      
00001A7A  2639 0029DE10           1666      move.l  receiver2XVel2, d3
00001A80  2839 0029DE14           1667      move.l  receiver2YVel2,  d4
00001A86                          1668  
00001A86  4EB8 1946               1669      jsr     drawPath
00001A8A                          1670      
00001A8A  23C3 0029DEBC           1671      move.l  d3, path2X3
00001A90  23C4 0029DEC0           1672      move.l  d4, path2Y3
00001A96                          1673      
00001A96  4CDF 00E0               1674      movem.l (sp)+,d5-d7
00001A9A  4E75                    1675      rts
00001A9C                          1676  
00001A9C                          1677  ;redraws the bitmap over a given line generated by the drawPaths function    
00001A9C                          1678  ;accounts for the possible orientations of the line
00001A9C                          1679  coverPath
00001A9C  B882                    1680      cmp.l   d2, d4
00001A9E  6C00 0008               1681      bge     dontSwapYs
00001AA2  2002                    1682      move.l  d2, d0
00001AA4  2404                    1683      move.l  d4, d2
00001AA6  2800                    1684      move.l  d0, d4
00001AA8                          1685  dontSwapYs
00001AA8  B681                    1686      cmp.l   d1, d3
00001AAA  6C00 0008               1687      bge     dontSwapXs
00001AAE  2001                    1688      move.l  d1, d0
00001AB0  2203                    1689      move.l  d3, d1
00001AB2  2600                    1690      move.l  d0, d3
00001AB4                          1691  dontSwapXs
00001AB4  9681                    1692      sub.l   d1, d3
00001AB6  6600 0006               1693      bne     positiveWidth
00001ABA  7602                    1694      move.l  #2, d3
00001ABC  5381                    1695      sub.l   #1, d1
00001ABE                          1696  positiveWidth
00001ABE  9882                    1697      sub.l   d2, d4
00001AC0  6600 0008               1698      bne     positiveHeight
00001AC4  7802                    1699      move.l  #2, d4
00001AC6  5382                    1700      sub.l   #1, d2
00001AC8  5283                    1701      add.l   #1, d3
00001ACA                          1702  positiveHeight
00001ACA  5284                    1703      add.l   #1, d4
00001ACC  5283                    1704      add.l   #1, d3  
00001ACE  E189                    1705      lsl.l   #8, d1
00001AD0  E18A                    1706      lsl.l   #8, d2
00001AD2  4EB8 18FA               1707      jsr     drawAPiece
00001AD6  4E75                    1708      rts
00001AD8                          1709  
00001AD8                          1710  ;covers all receiver paths    
00001AD8                          1711  coverPaths
00001AD8  2239 0029DE94           1712      move.l  path1X1, d1
00001ADE  2439 0029DE98           1713      move.l  path1Y1, d2
00001AE4  2639 0029DE9C           1714      move.l  path1X2, d3
00001AEA  2839 0029DEA0           1715      move.l  path1Y2, d4
00001AF0  4EB8 1A9C               1716      jsr     coverPath   
00001AF4                          1717      
00001AF4  2239 0029DE9C           1718      move.l  path1X2, d1
00001AFA  2439 0029DEA0           1719      move.l  path1Y2, d2
00001B00  2639 0029DEA4           1720      move.l  path1X3, d3
00001B06  2839 0029DEA8           1721      move.l  path1Y3, d4
00001B0C  4EB8 1A9C               1722      jsr     coverPath
00001B10                          1723  
00001B10  2239 0029DEAC           1724      move.l  path2X1, d1
00001B16  2439 0029DEB0           1725      move.l  path2Y1, d2
00001B1C  2639 0029DEB4           1726      move.l  path2X2, d3
00001B22  2839 0029DEB8           1727      move.l  path2Y2, d4
00001B28  4EB8 1A9C               1728      jsr     coverPath
00001B2C                          1729      
00001B2C                          1730      
00001B2C                          1731      
00001B2C  2239 0029DEB4           1732      move.l  path2X2, d1
00001B32  2439 0029DEB8           1733      move.l  path2Y2, d2
00001B38  2639 0029DEBC           1734      move.l  path2X3, d3
00001B3E  2839 0029DEC0           1735      move.l  path2Y3, d4
00001B44  4EB8 1A9C               1736      jsr     coverPath        
00001B48  4E75                    1737      rts
00001B4A                          1738      
00001B4A                          1739  ;cover various parts of the background during the game's update loop
00001B4A                          1740  redrawBackgroundPieces
00001B4A  0C39 0002 0029DE7D      1741      cmp.b   #GAMESTATE_PLAY, gameState
00001B52  6600 F4AC               1742      bne     RETURN
00001B56                          1743      
00001B56  41F9 00003232           1744      lea     backgroundFile, a0
00001B5C  21C8 171C               1745      move.l  a0, fileAddress
00001B60                          1746      
00001B60                          1747      ;player
00001B60  2207                    1748      move.l  d7, d1
00001B62  2406                    1749      move.l  d6, d2
00001B64  761F                    1750      move.l  #PLAYER_WIDTH+1, d3
00001B66  781F                    1751      move.l  #PLAYER_HEIGHT+1, d4 
00001B68  4EB8 1904               1752      jsr     drawAPlayer
00001B6C                          1753          
00001B6C                          1754      ;Receiver1
00001B6C  2211                    1755      move.l  (a1), d1
00001B6E  2412                    1756      move.l  (a2), d2
00001B70  4EB8 1904               1757      jsr     drawAPlayer
00001B74                          1758    
00001B74                          1759      ;Receiver2
00001B74  2213                    1760      move.l  (a3), d1
00001B76  2414                    1761      move.l  (a4), d2
00001B78  4EB8 1904               1762      jsr     drawAPlayer
00001B7C                          1763  
00001B7C                          1764      ;Defender1
00001B7C  2239 0029DE1C           1765      move.l  defender1XPos, d1
00001B82  2439 0029DE20           1766      move.l  defender1YPos, d2
00001B88  4EB8 1904               1767      jsr     drawAPlayer
00001B8C                          1768  
00001B8C                          1769      ;Defender2
00001B8C  2239 0029DE34           1770      move.l  defender2XPos, d1
00001B92  2439 0029DE38           1771      move.l  defender2YPos, d2
00001B98  4EB8 1904               1772      jsr     drawAPlayer
00001B9C                          1773      
00001B9C                          1774      ;linebacker
00001B9C  2239 0029DE4C           1775      move.l  linebackerXPos, d1
00001BA2  2439 0029DE50           1776      move.l  linebackerYPos, d2
00001BA8  4EB8 1904               1777      jsr     drawAPlayer
00001BAC                          1778      
00001BAC                          1779      ;Football
00001BAC  2239 0029DE68           1780      move.l  ballPosX, d1
00001BB2  0681 00001900           1781      add.l   #FOOTBALL_CARRY_OFFSET_X, d1
00001BB8  2439 0029DE6C           1782      move.l  ballPosY, d2
00001BBE  0682 00000A00           1783      add.l   #FOOTBALL_CARRY_OFFSET_Y, d2
00001BC4  760A                    1784      move.l  #FOOTBALL_WIDTH+1, d3
00001BC6  7816                    1785      move.l  #FOOTBALL_HEIGHT+1, d4
00001BC8  4EB8 18FA               1786      jsr     drawAPiece
00001BCC                          1787          
00001BCC                          1788      ;change drawing to green
00001BCC  7050                    1789      move.l  #SET_PEN_COLOR_COMMAND, d0
00001BCE  223C 0000B05C           1790      move.l  #FIELD_GREEN, d1
00001BD4  4E4F                    1791      trap    #15
00001BD6  7051                    1792      move.l  #SET_FILL_COLOR_COMMAND, d0
00001BD8  4E4F                    1793      trap    #15
00001BDA                          1794      
00001BDA                          1795      ;cover timer
00001BDA  223C 00000252           1796      move.l  #TIMER_SECONDS_POSX_1-1, d1
00001BE0  740A                    1797      move.l  #DOWN_POSY-1, d2
00001BE2  2601                    1798      move.l  d1, d3
00001BE4  0683 00000019           1799      add.l   #25, d3
00001BEA  2802                    1800      move.l  d2, d4
00001BEC  0684 00000028           1801      add.l   #40, d4 
00001BF2  7057                    1802      move.l  #DRAW_RECTANGLE_COMMAND, d0
00001BF4  4E4F                    1803      trap    #15    
00001BF6                          1804      
00001BF6                          1805      ;cover timer
00001BF6  223C 00000234           1806      move.l  #TIMER_SECONDS_POSX_2-1, d1
00001BFC  740A                    1807      move.l  #DOWN_POSY-1, d2
00001BFE  2601                    1808      move.l  d1, d3
00001C00  0683 00000019           1809      add.l   #25, d3
00001C06  2802                    1810      move.l  d2, d4
00001C08  0684 00000028           1811      add.l   #40, d4 
00001C0E  4E4F                    1812      trap    #15
00001C10                          1813      
00001C10                          1814      ;cover timer    
00001C10  223C 00000211           1815      move.l  #TIMER_MINUTES_POSX-1, d1
00001C16  740A                    1816      move.l  #DOWN_POSY-1, d2
00001C18  2601                    1817      move.l  d1, d3
00001C1A  0683 00000019           1818      add.l   #25, d3
00001C20  2802                    1819      move.l  d2, d4
00001C22  0684 00000028           1820      add.l   #40, d4 
00001C28  4E4F                    1821      trap    #15
00001C2A  4E75                    1822      rts
00001C2C                          1823  
00001C2C                          1824  ;covers the UI drawn for the ball aiming
00001C2C                          1825  coverBallUI
00001C2C                          1826      ;cover old UI
00001C2C  2239 0029DED8           1827      move.l  oldUIX1, d1
00001C32  2439 0029DEDC           1828      move.l  oldUIY1, d2
00001C38  2639 0029DEE0           1829      move.l  oldUIX2, d3
00001C3E  2839 0029DEE4           1830      move.l  oldUIY2, d4
00001C44  B8BC 00000001           1831      cmp.l   #1, d4
00001C4A  6F00 0004               1832      ble     dontApplyUIFix1
00001C4E  5384                    1833      sub.l   #1, d4
00001C50                          1834  dontApplyUIFix1
00001C50  5383                    1835      sub.l   #1, d3
00001C52  B681                    1836      cmp.l   d1, d3 
00001C54  6D00 0004               1837      blt     dontApplyUIFix2
00001C58  5483                    1838      add.l   #2, d3
00001C5A                          1839  dontApplyUIFix2
00001C5A  4EB8 1A9C               1840      jsr     coverPath
00001C5E  4E75                    1841      rts
00001C60                          1842  
00001C60                          1843  ;draw ball UI for aiming
00001C60                          1844  DrawBallUI 
00001C60  4EB8 1C2C               1845      jsr     coverBallUI
00001C64  7050                    1846      move.l  #SET_PEN_COLOR_COMMAND, d0
00001C66  223C 00FFFFFF           1847      move.l  #WHITE, d1
00001C6C  4E4F                    1848      trap    #15
00001C6E                          1849      
00001C6E  2405                    1850      move.l  d5, d2
00001C70  48C2                    1851      ext.l   d2
00001C72  2602                    1852      move.l  d2, d3
00001C74  E583                    1853      asl.l   #2, d3
00001C76                          1854  
00001C76  2007                    1855      move.l  d7, d0
00001C78  0680 00000F00           1856      add.l   #(PLAYER_WIDTH/2)<<8, d0
00001C7E  2206                    1857      move.l  d6, d1
00001C80  2406                    1858      move.l  d6, d2
00001C82  0482 00001E00           1859      sub.l   #(UI_LENGTH)<<8, d2
00001C88                          1860      
00001C88  283C FFFFF900           1861      move.l  #FASTBALL_SPEED, d4
00001C8E  4EB9 000024A6           1862      jsr     getXCoordAtYFromVelocity
00001C94  2207                    1863      move.l  d7, d1
00001C96  0681 00000F00           1864      add.l   #(PLAYER_WIDTH/2)<<8, d1
00001C9C  2406                    1865      move.l  d6, d2
00001C9E  2802                    1866      move.l  d2, d4
00001CA0  0484 00001E00           1867      sub.l   #(UI_LENGTH)<<8, d4
00001CA6                          1868         
00001CA6  E081                    1869      asr.l   #8, d1
00001CA8  E082                    1870      asr.l   #8, d2
00001CAA  E083                    1871      asr.l   #8, d3
00001CAC  E084                    1872      asr.l   #8, d4
00001CAE                          1873      
00001CAE  23C1 0029DED8           1874      move.l  d1, oldUIX1
00001CB4  23C2 0029DEDC           1875      move.l  d2, oldUIY1
00001CBA  23C3 0029DEE0           1876      move.l  d3, oldUIX2
00001CC0  23C4 0029DEE4           1877      move.l  d4, oldUIY2
00001CC6                          1878      
00001CC6  4EB8 1928               1879      jsr     drawLine
00001CCA  4E75                    1880      rts
00001CCC                          1881  
00001CCC                          1882  ;covers a previously drawn first down line
00001CCC                          1883  coverFirstDownLine
00001CCC  223C 00002500           1884      move.l  #(LEFT_SIDE_OF_FIELD)<<8, d1
00001CD2  2439 0029DDBC           1885      move.l  firstDownLine, d2
00001CD8  0482 00000100           1886      sub.l   #256, d2                                                                                                                                                    ;ACCOUNT FOR RIGHT SHIFT
00001CDE  263C 0000025B           1887      move.l  #RIGHT_SIDE_OF_FIELD, d3
00001CE4  0483 00000024           1888      sub.l   #LEFT_SIDE_OF_FIELD-1, d3                                                                                                                                   ;get the width
00001CEA  780C                    1889      move.l  #LINE_OF_SCRIMMAGE_HEIGHT+10, d4 
00001CEC  4EB8 18FA               1890      jsr     drawAPiece
00001CF0  4E75                    1891      rts
00001CF2                          1892      
00001CF2                          1893  ;draws time at set position
00001CF2                          1894  drawTime
00001CF2  2239 0029DE88           1895      move.l  currentRoundTime, d1
00001CF8  263C 00002328           1896      move.l  #ROUND_TIME_IN_HUNDREDTHS, d3
00001CFE  9681                    1897      sub.l   d1, d3
00001D00  B6BC 00000000           1898      cmp.l   #0, d3
00001D06  6E00 0004               1899      bgt     dontSetTimeZero
00001D0A  7600                    1900      move.l  #0, d3
00001D0C                          1901  dontSetTimeZero
00001D0C  86FC 0064               1902      divu    #100, d3                                                                                                                                                    ;gets seconds
00001D10  48C3                    1903      ext.l   d3
00001D12  7800                    1904      move.l  #0, d4
00001D14                          1905  calculateMinutes
00001D14  B67C 003B               1906      cmp.w   #59, d3
00001D18  6F00 000A               1907      ble     doneGettingMinutes
00001D1C  5284                    1908      add.l   #1, d4                                                                                                                                                      ;increase minutes
00001D1E  0443 003C               1909      sub.w   #60, d3
00001D22  60F0                    1910      bra     calculateMinutes 
00001D24                          1911  doneGettingMinutes
00001D24                          1912      
00001D24  86FC 000A               1913      divu    #10, d3
00001D28  223C 00000235           1914      move.l  #TIMER_SECONDS_POSX_2, d1
00001D2E  740B                    1915      move.l  #DOWN_POSY, d2
00001D30  4EB8 183A               1916      jsr     DrawSegments
00001D34                          1917      
00001D34  223C 00000253           1918      move.l  #TIMER_SECONDS_POSX_1, d1
00001D3A  4843                    1919      swap    d3
00001D3C  4EB8 183A               1920      jsr     DrawSegments
00001D40                          1921  
00001D40                          1922      
00001D40  B87C 0000               1923      cmp     #0, d4
00001D44  6700 0032               1924      beq     dontDraw10s
00001D48  223C 00000212           1925      move.l  #TIMER_MINUTES_POSX, d1
00001D4E  2604                    1926      move.l  d4, d3
00001D50  4EB8 183A               1927      jsr     drawSegments  
00001D54  4E75                    1928      rts
00001D56                          1929      
00001D56                          1930  ;given d3 as number, d1 xpos, d2 ypos
00001D56                          1931  draw2Numbers
00001D56                          1932  
00001D56  86FC 000A               1933      divu    #10, d3
00001D5A                          1934      
00001D5A  4843                    1935      swap    d3
00001D5C  103C 0054               1936      move.b  #DRAW_LINE_COMMAND, d0
00001D60  4EB8 183A               1937      jsr     drawSegments
00001D64                          1938      
00001D64  4843                    1939      swap    d3
00001D66  B67C 0000               1940      cmp.w   #0, d3
00001D6A  6700 000C               1941      beq     dontDraw10s
00001D6E  0481 0000001E           1942      sub.l   #SECOND_NUMBER_OFFSET, d1
00001D74  4EB8 183A               1943      jsr     drawSegments
00001D78                          1944  dontDraw10s
00001D78  4E75                    1945      rts
00001D7A                          1946  
00001D7A                          1947  
00001D7A                          1948  ;draws the score and covers the old score at the same time
00001D7A                          1949  drawScore   
00001D7A  7050                    1950      move.l  #SET_PEN_COLOR_COMMAND, d0
00001D7C  223C 0000B05C           1951      move.l  #FIELD_GREEN, d1
00001D82  4E4F                    1952      trap    #15
00001D84  7051                    1953      move.l  #SET_FILL_COLOR_COMMAND, d0
00001D86  4E4F                    1954      trap    #15
00001D88                          1955  
00001D88                          1956      ;cover old score
00001D88  223C 0000014D           1957      move.l  #SCORE_POSX_1-1, d1
00001D8E  740A                    1958      move.l  #DOWN_POSY-1, d2
00001D90  2601                    1959      move.l  d1, d3
00001D92  0683 00000019           1960      add.l   #25, d3
00001D98  2802                    1961      move.l  d2, d4
00001D9A  0684 00000028           1962      add.l   #40, d4                                                                                                                                                     ;highest height in display
00001DA0  7057                    1963      move.l  #DRAW_RECTANGLE_COMMAND, d0
00001DA2  4E4F                    1964      trap    #15    
00001DA4                          1965      
00001DA4  223C 0000016B           1966      move.l  #SCORE_POSX_2-1, d1
00001DAA  740A                    1967      move.l  #DOWN_POSY-1, d2
00001DAC  2601                    1968      move.l  d1, d3
00001DAE  0683 00000019           1969      add.l   #25, d3
00001DB4  2802                    1970      move.l  d2, d4
00001DB6  0684 00000028           1971      add.l   #40, d4                                                                                                                                                     ;highest height in display  
00001DBC  4E4F                    1972      trap    #15
00001DBE                          1973      
00001DBE                          1974    
00001DBE  103C 005D               1975      move.b  #SET_PEN_WIDTH_COMMAND, d0
00001DC2  123C 0002               1976      move.b  #LINE_OF_SCRIMMAGE_HEIGHT, d1
00001DC6  4E4F                    1977      trap    #15
00001DC8                          1978      
00001DC8                          1979      
00001DC8  223C 000000FF           1980      move.l  #RED, d1
00001DCE  0CB9 00000000 0029DEC4  1981      cmp.l   #0, scoreFlashDigitTimer
00001DD8  6E00 0008               1982      bgt     flashRed
00001DDC  223C 00FFFFFF           1983      move.l  #WHITE, d1
00001DE2                          1984  flashRed
00001DE2  7050                    1985      move.l  #SET_PEN_COLOR_COMMAND, d0 
00001DE4  4E4F                    1986      trap    #15
00001DE6                          1987      
00001DE6  7600                    1988      move.l  #0, d3
00001DE8  1639 0029DE7F           1989      move.b  score, d3
00001DEE  223C 0000016C           1990      move.l  #SCORE_POSX_2, d1
00001DF4  740B                    1991      move.l  #DOWN_POSY, d2
00001DF6  4EB8 1D56               1992      jsr     draw2Numbers
00001DFA  4E75                    1993      rts
00001DFC                          1994  
00001DFC                          1995  ;handles clearing menu and drawing menu functions
00001DFC                          1996  drawMenu
00001DFC  0C39 0003 0029DE7D      1997      cmp.b   #GAMESTATE_DRAW_MENU, gameState
00001E04  6600 00CA               1998      bne     clearMenu
00001E08  41F9 0018CE68           1999      lea     veteranRules, a0
00001E0E  21C8 171C               2000      move.l  a0, fileAddress
00001E12  223C 00004100           2001      move.l  #(MENU_XPOS)<<8, d1
00001E18  243C 00006E00           2002      move.l  #(MENU_1_YPOS)<<8, d2
00001E1E  263C 000001F4           2003      move.l  #MENU_WIDTH, d3
00001E24  283C 00000136           2004      move.l  #MENU_HEIGHT, d4
00001E2A  4EB8 190E               2005      jsr     drawAMenu
00001E2E                          2006      
00001E2E  41F9 002031B0           2007      lea     noobRules, a0
00001E34  21C8 171C               2008      move.l  a0, fileAddress
00001E38  223C 00004100           2009      move.l  #(MENU_XPOS)<<8, d1
00001E3E  243C 0001D400           2010      move.l  #(MENU_2_YPOS)<<8, d2
00001E44  4EB8 190E               2011      jsr     drawAMenu
00001E48                          2012      
00001E48                          2013      
00001E48  41F9 002794F8           2014      lea     highscoreDude, a0
00001E4E  21C8 171C               2015      move.l  a0, fileAddress
00001E52  223C 00019000           2016      move.l  #(HIGHSCORE_XPOS)<<8, d1
00001E58  243C 00017C00           2017      move.l  #(HIGHSCORE_YPOS)<<8, d2
00001E5E  263C 000000C8           2018      move.l  #(HIGHSCORE_WIDTH), d3
00001E64  787C                    2019      move.l  #(HIGHSCORE_HEIGHT), d4
00001E66  4EB8 190E               2020      jsr     drawAMenu
00001E6A                          2021      
00001E6A  41F9 0028B7D0           2022      lea     yourScoreDude, a0
00001E70  21C8 171C               2023      move.l  a0, fileAddress
00001E74  223C 00002800           2024      move.l  #(YOURSCORE_XPOS)<<8, d1
00001E7A  243C 00018100           2025      move.l  #(YOURSCORE_YPOS)<<8, d2
00001E80  263C 000000C8           2026      move.l  #(HIGHSCORE_WIDTH), d3
00001E86  787C                    2027      move.l  #(HIGHSCORE_HEIGHT), d4
00001E88  4EB8 190E               2028      jsr     drawAMenu
00001E8C  13FC 0000 0029DE7D      2029      move.b  #GAMESTATE_MENU, gameState
00001E94                          2030      
00001E94  223C 00FFFFFF           2031      move.l  #WHITE, d1
00001E9A  7050                    2032      move.l  #SET_PEN_COLOR_COMMAND, d0 
00001E9C  4E4F                    2033      trap    #15
00001E9E                          2034      
00001E9E                          2035      
00001E9E  223C 000001F4           2036      move.l  #HIGHSCORE_DIGIT_XPOS, d1
00001EA4  243C 000001B6           2037      move.l  #HIGHSCORE_DIGIT_YPOS, d2
00001EAA  7600                    2038      move.l  #0, d3
00001EAC  1639 0029DE82           2039      move.b  highscore, d3
00001EB2  4EB8 1D56               2040      jsr     draw2Numbers
00001EB6                          2041      
00001EB6  223C 0000008C           2042      move.l  #YOURSCORE_DIGIT_XPOS, d1
00001EBC  243C 000001BB           2043      move.l  #YOURSCORE_DIGIT_YPOS, d2
00001EC2  7600                    2044      move.l  #0, d3
00001EC4  1639 0029DE83           2045      move.b  lastScore, d3
00001ECA  4EB8 1D56               2046      jsr     draw2Numbers
00001ECE  4E75                    2047      rts
00001ED0                          2048  clearMenu
00001ED0  0C39 0001 0029DE7D      2049      cmp.b   #GAMESTATE_CLEAR_MENU, gameState
00001ED8  6600 0084               2050      bne     dontClearMenu
00001EDC  41F9 00003232           2051      lea     backgroundFile, a0
00001EE2  21C8 171C               2052      move.l  a0, fileAddress
00001EE6  223C 00004100           2053      move.l  #(MENU_XPOS)<<8, d1
00001EEC  243C 00006E00           2054      move.l  #(MENU_1_YPOS)<<8, d2
00001EF2  263C 000001F4           2055      move.l  #MENU_WIDTH, d3
00001EF8  283C 00000136           2056      move.l  #MENU_HEIGHT, d4
00001EFE  4EB8 18FA               2057      jsr     drawAPiece
00001F02                          2058      
00001F02  223C 00004100           2059      move.l  #(MENU_XPOS)<<8, d1
00001F08  243C 0001D400           2060      move.l  #(MENU_2_YPOS)<<8, d2
00001F0E  4EB8 18FA               2061      jsr     drawAPiece
00001F12                          2062      
00001F12  223C 00019000           2063      move.l  #(HIGHSCORE_XPOS)<<8, d1
00001F18  243C 00017C00           2064      move.l  #(HIGHSCORE_YPOS)<<8, d2
00001F1E  263C 000000C8           2065      move.l  #(HIGHSCORE_WIDTH), d3
00001F24  787C                    2066      move.l  #(HIGHSCORE_HEIGHT), d4
00001F26  4EB8 18FA               2067      jsr     drawAPiece
00001F2A                          2068      
00001F2A  223C 00002800           2069      move.l  #(YOURSCORE_XPOS)<<8, d1
00001F30  243C 00018100           2070      move.l  #(YOURSCORE_YPOS)<<8, d2
00001F36  263C 000000C8           2071      move.l  #(HIGHSCORE_WIDTH), d3
00001F3C  787C                    2072      move.l  #(HIGHSCORE_HEIGHT), d4
00001F3E  4EB8 18FA               2073      jsr     drawAPiece
00001F42                          2074      
00001F42                          2075      ;cover old score
00001F42  223C 00018F00           2076      move.l  #(HIGHSCORE_XPOS-1)<<8, d1
00001F48  243C 00017B00           2077      move.l  #(HIGHSCORE_YPOS-1)<<8, d2
00001F4E  7619                    2078      move.l  #25, d3
00001F50  7828                    2079      move.l  #40, d4                                                                                                                                                     ;highest height in display
00001F52  4EB8 18FA               2080      jsr     drawAPiece    
00001F56                          2081  
00001F56                          2082      
00001F56  13FC 0002 0029DE7D      2083      move.b  #GAMESTATE_PLAY, gamestate
00001F5E                          2084  dontClearMenu
00001F5E  4E75                    2085      rts
00001F60                          2086          
00001F60                          2087  coverOldLineOfScrimmage 
00001F60  223C 00002500           2088      move.l  #(LEFT_SIDE_OF_FIELD)<<8, d1
00001F66  2439 0029DDC8           2089      move.l  oldLineOfScrimmage, d2
00001F6C  0482 00000100           2090      sub.l   #256, d2                                                                                                                                                    ;ACCOUNT FOR RIGHT SHIFT
00001F72  263C 0000025B           2091      move.l  #RIGHT_SIDE_OF_FIELD, d3
00001F78  0483 00000024           2092      sub.l   #LEFT_SIDE_OF_FIELD-1, d3                                                                                                                                   ;get the width
00001F7E  780C                    2093      move.l  #LINE_OF_SCRIMMAGE_HEIGHT+10, d4 
00001F80  4EB8 18FA               2094      jsr     drawAPiece
00001F84  4E75                    2095      rts
00001F86                          2096  
00001F86                          2097  ;main draw loop
00001F86                          2098  drawStuff
00001F86                          2099  
00001F86  4EB8 1DFC               2100      jsr     drawMenu
00001F8A                          2101      
00001F8A                          2102      ;set pen width 
00001F8A  103C 005D               2103      move.b  #SET_PEN_WIDTH_COMMAND, d0
00001F8E  123C 0002               2104      move.b  #LINE_OF_SCRIMMAGE_HEIGHT, d1
00001F92  4E4F                    2105      trap    #15
00001F94                          2106      
00001F94                          2107      ;draw seven segment display
00001F94  223C 000000FF           2108      move.l  #RED, d1
00001F9A  0CB9 00000000 0029DEC8  2109      cmp.l   #0, downFlashDigitTimer
00001FA4  6E00 0008               2110      bgt     flashRedDown
00001FA8  223C 00FFFFFF           2111      move.l  #WHITE, d1
00001FAE                          2112  flashRedDown
00001FAE  7050                    2113      move.l  #SET_PEN_COLOR_COMMAND, d0 
00001FB0  4E4F                    2114      trap    #15
00001FB2                          2115      
00001FB2  103C 0054               2116      move.b  #DRAW_LINE_COMMAND, d0 
00001FB6                          2117      
00001FB6  727B                    2118      move.l  #DOWN_POSX, d1
00001FB8  740B                    2119      move.l  #DOWN_POSY, d2
00001FBA  7600                    2120      move.l  #0, d3
00001FBC  1639 0029DE7E           2121      move.b  downCounter, d3
00001FC2  4EB8 183A               2122      jsr     DrawSegments
00001FC6                          2123      
00001FC6                          2124      
00001FC6                          2125      
00001FC6  223C 000000FF           2126      move.l  #RED, d1
00001FCC  0CB9 00000000 0029DECC  2127      cmp.l   #0, timerFlashDigitTimer
00001FD6  6E00 0008               2128      bgt     flashRedTimer
00001FDA  223C 00FFFFFF           2129      move.l  #WHITE, d1
00001FE0                          2130  flashRedTimer
00001FE0  7050                    2131      move.l  #SET_PEN_COLOR_COMMAND, d0 
00001FE2  4E4F                    2132      trap    #15
00001FE4  103C 0054               2133      move.b  #DRAW_LINE_COMMAND, d0 
00001FE8  4EB8 1CF2               2134      jsr     drawTime
00001FEC                          2135      
00001FEC                          2136      ;cmp.l   #0, scoreFlashDigitTimer
00001FEC                          2137      ;blt     dontDrawScore
00001FEC  4EB8 1D7A               2138      jsr     drawScore
00001FF0                          2139      
00001FF0  0C39 0002 0029DE7D      2140      cmp.b   #GAMESTATE_PLAY, gameState
00001FF8  6600 F006               2141      bne     RETURN
00001FFC                          2142      
00001FFC  0C39 0000 0029DE7C      2143      cmp.b   #BALLSTATE_QB, ballState
00002004  6600 0006               2144      bne     dontDrawUI
00002008  4EB8 1C60               2145      jsr     drawBallUI
0000200C                          2146  dontDrawUI    
0000200C                          2147      
0000200C                          2148      ;set pen color
0000200C  223C 00FF0000           2149      move.l  #BLUE, d1
00002012  103C 0050               2150      move.b  #SET_PEN_COLOR_COMMAND, d0
00002016  4E4F                    2151      trap    #15
00002018                          2152      
00002018                          2153      
00002018                          2154      ;draw lineOfScrimmage
00002018  103C 0054               2155      move.b  #DRAW_LINE_COMMAND, d0 
0000201C  323C 0025               2156      move.w  #LEFT_SIDE_OF_FIELD, d1
00002020  2439 0029DDC4           2157      move.l  lineOfScrimmage, d2
00002026  E08A                    2158      lsr.l   #8, d2
00002028  363C 025A               2159      move.w  #RIGHT_SIDE_OF_FIELD-1, d3
0000202C  3802                    2160      move.w  d2, d4
0000202E  4E4F                    2161      trap    #15
00002030                          2162      
00002030                          2163      ;set pen color
00002030  223C 0000FFFF           2164      move.l  #YELLOW, d1
00002036  103C 0050               2165      move.b  #SET_PEN_COLOR_COMMAND, d0
0000203A  4E4F                    2166      trap    #15
0000203C                          2167      
0000203C  0CB9 00008400 0029DDBC  2168      cmp.l   #(TOUCHDOWN_POS)<<8, firstDownLine
00002046  6F00 001A               2169      ble     dontDrawFirstDownLine
0000204A                          2170      ;draw firstDownLine
0000204A  103C 0054               2171      move.b  #DRAW_LINE_COMMAND, d0 
0000204E  323C 0025               2172      move.w  #LEFT_SIDE_OF_FIELD, d1
00002052  2439 0029DDBC           2173      move.l  firstDownLine, d2
00002058  E08A                    2174      lsr.l   #8, d2
0000205A  363C 025A               2175      move.w  #RIGHT_SIDE_OF_FIELD-1, d3
0000205E  3802                    2176      move.w  d2, d4
00002060  4E4F                    2177      trap    #15
00002062                          2178  dontDrawFirstDownLine
00002062                          2179      
00002062  103C 005D               2180      move.b  #SET_PEN_WIDTH_COMMAND, d0
00002066  123C 0001               2181      move.b  #1, d1
0000206A  4E4F                    2182      trap    #15
0000206C                          2183      ;set pen color for offense
0000206C  223C 00FCBF25           2184      move.l  #PANTHERS,d1
00002072  103C 0050               2185      move.b  #SET_PEN_COLOR_COMMAND,d0
00002076  4E4F                    2186      trap    #15
00002078  103C 0051               2187      move.b  #SET_FILL_COLOR_COMMAND,d0
0000207C  4E4F                    2188      trap    #15
0000207E                          2189      
0000207E                          2190      ;draw player 1
0000207E  103C 0058               2191      move.b  #DRAW_CIRCLE_COMMAND,d0
00002082  2207                    2192      move.l  d7,d1
00002084  E081                    2193      asr.l   #8,d1
00002086  2406                    2194      move.l  d6, d2
00002088  E082                    2195      asr.l   #8,d2
0000208A  2601                    2196      move.l  d1,d3
0000208C  0683 0000001E           2197      add.l   #PLAYER_WIDTH,d3        
00002092  2802                    2198      move.l  d2, d4
00002094  0684 0000001E           2199      add.l   #PLAYER_HEIGHT,d4
0000209A  4E4F                    2200      trap    #15  
0000209C                          2201      
0000209C                          2202      ;draw receiver1
0000209C  2211                    2203      move.l  (a1),d1
0000209E  E081                    2204      asr.l   #8,d1
000020A0  2412                    2205      move.l  (a2), d2
000020A2  E082                    2206      asr.l   #8,d2
000020A4  2601                    2207      move.l  d1,d3
000020A6  0683 0000001E           2208      add.l   #PLAYER_WIDTH,d3        
000020AC  2802                    2209      move.l  d2, d4
000020AE  0684 0000001E           2210      add.l   #PLAYER_HEIGHT,d4
000020B4  4E4F                    2211      trap    #15
000020B6                          2212      
000020B6                          2213      ;draw receiver2
000020B6  2213                    2214      move.l  (a3),d1
000020B8  E081                    2215      asr.l   #8,d1
000020BA  2414                    2216      move.l  (a4), d2
000020BC  E082                    2217      asr.l   #8,d2
000020BE  2601                    2218      move.l  d1,d3
000020C0  0683 0000001E           2219      add.l   #PLAYER_WIDTH,d3        
000020C6  2802                    2220      move.l  d2, d4
000020C8  0684 0000001E           2221      add.l   #PLAYER_HEIGHT,d4
000020CE  4E4F                    2222      trap    #15
000020D0                          2223  
000020D0                          2224      
000020D0                          2225      ;set pen color for defense
000020D0  223C 000077E0           2226      move.l  #BADGUYS,d1
000020D6  103C 0050               2227      move.b  #SET_PEN_COLOR_COMMAND,d0
000020DA  4E4F                    2228      trap    #15
000020DC  103C 0051               2229      move.b  #SET_FILL_COLOR_COMMAND,d0
000020E0  4E4F                    2230      trap    #15
000020E2                          2231  
000020E2                          2232      ;draw defender1
000020E2  103C 0058               2233      move.b  #DRAW_CIRCLE_COMMAND,d0
000020E6  2239 0029DE1C           2234      move.l  defender1XPos,d1
000020EC  E081                    2235      asr.l   #8,d1
000020EE  2439 0029DE20           2236      move.l  defender1YPos, d2
000020F4  E082                    2237      asr.l   #8,d2
000020F6  2601                    2238      move.l  d1,d3
000020F8  0683 0000001E           2239      add.l   #PLAYER_WIDTH,d3        
000020FE  2802                    2240      move.l  d2, d4
00002100  0684 0000001E           2241      add.l   #PLAYER_HEIGHT,d4
00002106  4E4F                    2242      trap    #15  
00002108                          2243      
00002108                          2244      ;draw defender2
00002108  103C 0058               2245      move.b  #DRAW_CIRCLE_COMMAND,d0
0000210C  2239 0029DE34           2246      move.l  defender2XPos,d1
00002112  E081                    2247      asr.l   #8,d1
00002114  2439 0029DE38           2248      move.l  defender2YPos, d2
0000211A  E082                    2249      asr.l   #8,d2
0000211C  2601                    2250      move.l  d1,d3
0000211E  0683 0000001E           2251      add.l   #PLAYER_WIDTH,d3        
00002124  2802                    2252      move.l  d2, d4
00002126  0684 0000001E           2253      add.l   #PLAYER_HEIGHT,d4
0000212C  4E4F                    2254      trap    #15  
0000212E                          2255      
0000212E                          2256      ;draw linebacker
0000212E  103C 0058               2257      move.b  #DRAW_CIRCLE_COMMAND,d0
00002132  2239 0029DE4C           2258      move.l  linebackerXPos,d1
00002138  E081                    2259      asr.l   #8,d1
0000213A  2439 0029DE50           2260      move.l  linebackerYPos, d2
00002140  E082                    2261      asr.l   #8,d2
00002142  2601                    2262      move.l  d1,d3
00002144  0683 0000001E           2263      add.l   #PLAYER_WIDTH,d3        
0000214A  2802                    2264      move.l  d2, d4
0000214C  0684 0000001E           2265      add.l   #PLAYER_HEIGHT,d4
00002152  4E4F                    2266      trap    #15  
00002154                          2267      
00002154                          2268            
00002154                          2269      ;set pen color
00002154  223C 00FFFFFF           2270      move.l  #WHITE,d1
0000215A  103C 0050               2271      move.b  #SET_PEN_COLOR_COMMAND,d0
0000215E  4E4F                    2272      trap    #15
00002160  223C 00080A3A           2273      move.l  #PIGSKIN,d1
00002166  103C 0051               2274      move.b  #SET_FILL_COLOR_COMMAND,d0
0000216A  4E4F                    2275      trap    #15
0000216C                          2276      
0000216C                          2277      ;draw football
0000216C  103C 0058               2278      move.b  #DRAW_CIRCLE_COMMAND,d0
00002170  2239 0029DE68           2279      move.l  ballPosX,d1
00002176  D2B9 0029DE60           2280      add.l   ballSpeedX, d1
0000217C  23C1 0029DE68           2281      move.l  d1, ballPosX 
00002182  0681 00001900           2282      add.l   #FOOTBALL_CARRY_OFFSET_X, d1
00002188  E081                    2283      asr.l   #8,d1
0000218A  2439 0029DE6C           2284      move.l  ballPosY, d2
00002190  D4B9 0029DE64           2285      add.l   ballSpeedY, d2
00002196  23C2 0029DE6C           2286      move.l  d2, ballPosY 
0000219C  0682 00000A00           2287      add.l   #FOOTBALL_CARRY_OFFSET_Y, d2
000021A2  E082                    2288      asr.l   #8,d2
000021A4  2601                    2289      move.l  d1,d3
000021A6  0683 00000009           2290      add.l   #FOOTBALL_WIDTH,d3      
000021AC  2802                    2291      move.l  d2, d4
000021AE  0684 00000015           2292      add.l   #FOOTBALL_HEIGHT,d4
000021B4  4E4F                    2293      trap    #15
000021B6                          2294  
000021B6  0C39 0003 0029DE7C      2295      cmp.b   #BALLSTATE_TIMEOUT, ballState
000021BE  6600 EE40               2296      bne     return
000021C2  4EB8 1966               2297      jsr     drawPaths
000021C6  4E75                    2298      rts 
000021C8                          2299  
000021C8                          2300  
000021C8                          2301  -------------------- end include --------------------
000021C8                          2302      include 'input.x68'
000021C8                          2303  
000021C8                          2304  getInput
000021C8  0C39 0000 0029DE7D      2305      cmp.b   #GAMESTATE_MENU, gameState
000021D0  6600 0016               2306      bne     doneMenuInput
000021D4                          2307      
000021D4                          2308      ;get input from keys jkl 
000021D4  103C 0013               2309      move.b  #KEY_SCAN_CODE, d0
000021D8  223C 4A4B4820           2310      move.l  #SPACEH_LONG, d1
000021DE  4E4F                    2311      trap    #15
000021E0                          2312      
000021E0                          2313      ;check space input
000021E0  0801 0000               2314      btst    #0, d1 
000021E4  6600 0CD6               2315      bne     startGame    
000021E8                          2316  doneMenuInput
000021E8  0C39 0002 0029DE7D      2317      cmp.b   #GAMESTATE_PLAY, gameState
000021F0  6600 EE0E               2318      bne     RETURN
000021F4                          2319      
000021F4  0C39 0003 0029DE7C      2320      cmp.b   #BALLSTATE_TIMEOUT, ballState
000021FC  6600 0026               2321      bne     continueInput
00002200                          2322      
00002200                          2323      ;get input from keys jkl 
00002200  103C 0013               2324      move.b  #KEY_SCAN_CODE, d0
00002204  223C 4A4B4820           2325      move.l  #SPACEH_LONG, d1
0000220A  4E4F                    2326      trap    #15
0000220C                          2327      
0000220C                          2328      
0000220C                          2329      ;check space input
0000220C  0CB9 00000000 0029DED4  2330      cmp.l   #0, resetPlayDebounceTimer
00002216  6E00 EDE8               2331      bgt     RETURN
0000221A  0801 0000               2332      btst    #0, d1 
0000221E  6600 0814               2333      bne     snapBall                                                                            ;the ball was snapped
00002222  4E75                    2334      rts
00002224                          2335      
00002224                          2336  continueInput
00002224                          2337      ;get player input
00002224  0C39 0001 0029DE7C      2338      cmp.b   #BALLSTATE_FLY, ballState
0000222C  6700 EDD2               2339      beq     RETURN  
00002230  103C 0013               2340      move.b  #KEY_SCAN_CODE, d0
00002234  0C39 0002 0029DE7C      2341      cmp.b   #BALLSTATE_CAUGHT, ballState
0000223C  6700 0028               2342      beq     doneSpaceInput                                                                     ;caught ball
00002240                          2343      
00002240                          2344      ;waits for a quarter second after snap to get space again
00002240  0CB9 00000000 0029DED0  2345      cmp.l   #0, snapDebounceTimer
0000224A  6E00 001A               2346      bgt     doneSpaceInput
0000224E                          2347      ;get input from key SPACE
0000224E  223C 4A4B4820           2348      move.l  #SPACEH_LONG, d1
00002254  4E4F                    2349      trap    #15
00002256                          2350  checkSpaceinput
00002256  0801 0000               2351      btst    #0, d1                                                                              ;is k input
0000225A  6700 000A               2352      beq     doneSpaceInput
0000225E  7001                    2353      move.l  #1, d0                                                                              ;k was pressed
00002260  4EF9 00002A5A           2354      jmp     throwBall
00002266                          2355      ;set to be thrown, ignore input
00002266                          2356  
00002266                          2357  doneSpaceInput
00002266                          2358      ;get input from keys wasd
00002266  223C 57415344           2359      move.l  #WASD_LONG, d1
0000226C  4E4F                    2360      trap    #15
0000226E  23FC 00000000 0029DE84  2361      move.l  #0, wWasPressed                                                                     ;clears aWas, sWas and dWas sneakily
00002278                          2362  checkAinput
00002278  0801 0010               2363      btst    #16, d1                                                                             ;is A input
0000227C  6700 000C               2364      beq     checkDInput
00002280  5145                    2365      sub.w   #PLAYER_X_ACCELLERATION, d5
00002282  13FC 0001 0029DE85      2366      move.b  #1, aWAsPressed
0000228A                          2367  checkDinput
0000228A  0801 0000               2368      btst    #0, d1
0000228E  6700 000C               2369      beq     checkWInput
00002292  5045                    2370      add.w   #PLAYER_X_ACCELLERATION, d5
00002294  13FC 0001 0029DE87      2371      move.b  #1, dWAsPressed
0000229C                          2372  checkWinput
0000229C  4845                    2373      swap    d5                                                                                  ;yx velocity
0000229E  0801 0018               2374      btst    #24, d1                                                                             ;is W 
000022A2  6700 000C               2375      beq     checkSInput                                                                         ;branch if z flag not set
000022A6  5145                    2376      sub.w   #PLAYER_Y_ACCELLERATION, d5
000022A8  13FC 0001 0029DE84      2377      move.b  #1, wWAsPressed
000022B0                          2378  checkSinput
000022B0  0801 0008               2379      btst    #8, d1
000022B4  6700 000C               2380      beq     doneWASD
000022B8  5045                    2381      add.w   #PLAYER_Y_ACCELLERATION, d5
000022BA  13FC 0001 0029DE86      2382      move.b  #1, sWAsPressed
000022C2                          2383  doneWASD
000022C2  4E75                    2384      rts
000022C4                          2385  
000022C4                          2386  
000022C4                          2387  -------------------- end include --------------------
000022C4                          2388      include 'movement.x68'
000022C4                          2389  
000022C4                          2390  ;takes Pos a0, vel d0, assumes d2 is correct value for deltaTime
000022C4                          2391  moveIndividual
000022C4  C1C2                    2392      muls   d2, d0                       ;deltaTime
000022C6  D190                    2393      add.l  d0, (a0)                     ;add to memorylocation
000022C8  4E75                    2394      rts
000022CA                          2395  
000022CA                          2396  ;moves receiver and defender 1 along their 1st scripted path    
000022CA                          2397  moveReceiverAndDefender1Path1
000022CA  2039 0029DDEC           2398      move.l  receiver1YVel1, d0
000022D0  23C0 0029DDF8           2399      move.l  d0, receiver1YVel3
000022D6  204A                    2400      move.l  a2, a0
000022D8  4EB8 22C4               2401      jsr     moveIndividual
000022DC                          2402   
000022DC  2039 0029DDE8           2403      move.l  receiver1XVel1, d0
000022E2  2049                    2404      move.l  a1, a0
000022E4  4EB8 22C4               2405      jsr     MoveIndividual
000022E8                          2406      
000022E8                          2407      ;also move defender1
000022E8  41F9 0029DE20           2408      lea     defender1YPos, a0
000022EE  2039 0029DE28           2409      move.l  defender1YVel1, d0
000022F4  4EB8 22C4               2410      jsr     MoveIndividual
000022F8                          2411      
000022F8  41F9 0029DE1C           2412      lea     defender1Xpos, a0
000022FE  2039 0029DE24           2413      move.l  defender1Xvel1, d0
00002304  4EB8 22C4               2414      jsr     MoveIndividual
00002308  4E75                    2415      rts
0000230A                          2416      
0000230A                          2417  ;moves receiver and defender 1 along their 2nd scripted path    
0000230A                          2418  moveReceiverAndDefender1Path2
0000230A  2039 0029DDF4           2419      move.l  receiver1YVel2, d0
00002310  23C0 0029DDF8           2420      move.l  d0, receiver1YVel3
00002316  204A                    2421      move.l  a2, a0
00002318  4EB8 22C4               2422      jsr     moveIndividual
0000231C                          2423   
0000231C  2039 0029DDF0           2424      move.l  receiver1XVel2, d0
00002322  2049                    2425      move.l  a1, a0
00002324  4EB8 22C4               2426      jsr     MoveIndividual
00002328                          2427      
00002328                          2428      ;also move defender1
00002328  41F9 0029DE20           2429      lea     defender1YPos, a0
0000232E  2039 0029DE30           2430      move.l  defender1YVel2, d0
00002334  4EB8 22C4               2431      jsr     MoveIndividual
00002338                          2432      
00002338  41F9 0029DE1C           2433      lea     defender1Xpos, a0
0000233E  2039 0029DE2C           2434      move.l  defender1Xvel2, d0
00002344  4EB8 22C4               2435      jsr     MoveIndividual    
00002348  4E75                    2436      rts
0000234A                          2437  
0000234A                          2438  ;moves receiver and defender 2 along their 1st scripted path    
0000234A                          2439  moveReceiverAndDefender2Path1
0000234A                          2440      ;also move receiver2
0000234A  2039 0029DE0C           2441      move.l  receiver2YVel1, d0
00002350  23C0 0029DE18           2442      move.l  d0, receiver2YVel3
00002356  204C                    2443      move.l  a4, a0
00002358  4EB8 22C4               2444      jsr     moveIndividual
0000235C                          2445   
0000235C  2039 0029DE08           2446      move.l  receiver2XVel1, d0
00002362  204B                    2447      move.l  a3, a0
00002364  4EB8 22C4               2448      jsr     MoveIndividual
00002368                          2449      
00002368                          2450      ;also move defender2
00002368  41F9 0029DE38           2451      lea     defender2YPos, a0
0000236E  2039 0029DE40           2452      move.l  defender2YVel1, d0
00002374  4EB8 22C4               2453      jsr     MoveIndividual
00002378                          2454      
00002378  41F9 0029DE34           2455      lea     defender2Xpos, a0
0000237E  2039 0029DE3C           2456      move.l  defender2Xvel1, d0
00002384  4EB8 22C4               2457      jsr     MoveIndividual
00002388  4E75                    2458      rts
0000238A                          2459      
0000238A                          2460  ;moves receiver and defender 2 along their 2nd scripted path    
0000238A                          2461  moveReceiverAndDefender2Path2
0000238A                          2462      ;also move receiver2
0000238A  2039 0029DE14           2463      move.l  receiver2YVel2, d0
00002390  23C0 0029DE18           2464      move.l  d0, receiver2YVel3
00002396  204C                    2465      move.l  a4, a0
00002398  4EB8 22C4               2466      jsr     moveIndividual
0000239C                          2467   
0000239C  2039 0029DE10           2468      move.l  receiver2XVel2, d0
000023A2  204B                    2469      move.l  a3, a0
000023A4  4EB8 22C4               2470      jsr     MoveIndividual
000023A8                          2471      
000023A8                          2472      ;also move defender2
000023A8  41F9 0029DE38           2473      lea     defender2YPos, a0
000023AE  2039 0029DE48           2474      move.l  defender2YVel2, d0
000023B4  4EB8 22C4               2475      jsr     MoveIndividual
000023B8                          2476      
000023B8  41F9 0029DE34           2477      lea     defender2Xpos, a0
000023BE  2039 0029DE44           2478      move.l  defender2Xvel2, d0
000023C4  4EB8 22C4               2479      jsr     MoveIndividual
000023C8  4E75                    2480      rts
000023CA                          2481  
000023CA                          2482  ;moves the receiver towards the ball while the ball is in the air
000023CA                          2483  receiverBallMagnetism
000023CA  2039 0029DE68           2484      move.l  ballPosX, d0
000023D0  2239 0029DE6C           2485      move.l  ballPosY, d1
000023D6  2439 0029DDD0           2486      move.l  receiver1YPos, d2
000023DC  2639 0029DE60           2487      move.l  ballSpeedX, d3
000023E2  2839 0029DE64           2488      move.l  ballSpeedY, d4
000023E8  4EB9 000024A6           2489      jsr     getXCoordAtYFromVelocity
000023EE                          2490  
000023EE                          2491      ;receiver1
000023EE  203C FFFFFF00           2492      move.l  #RECEIVER_SPEED_LEFT, d0            ;assume moving left 
000023F4  B6B9 0029DDCC           2493      cmp.l   receiver1XPos, d3 
000023FA  6F00 0008               2494      ble     dontMoveRightRec1                   ;if the player is to the left of the defender
000023FE  203C 00000100           2495      move.l  #RECEIVER_SPEED_RIGHT, d0
00002404                          2496  dontMoveRightRec1
00002404                          2497      ;update xpos receiver1
00002404  2439 0029DE74           2498      move.l  deltaTime, d2
0000240A  41F9 0029DDCC           2499      lea     receiver1Xpos, a0
00002410  4EB8 22C4               2500      jsr     moveIndividual
00002414                          2501      
00002414                          2502      ;update ypos receiver1
00002414  41F9 0029DDD0           2503      lea     receiver1Ypos, a0
0000241A  2039 0029DDF8           2504      move.l  receiver1Yvel3, d0
00002420  2610                    2505      move.l  (a0), d3
00002422  D680                    2506      add.l   d0, d3
00002424  B6BC 00004A00           2507      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8-0, d3
0000242A  6F00 0006               2508      ble     dontChaseBallRec1    
0000242E  4EB8 22C4               2509      jsr     moveIndividual
00002432                          2510  dontChaseBallRec1
00002432                          2511      
00002432  2039 0029DE68           2512      move.l  ballPosX, d0
00002438  2239 0029DE6C           2513      move.l  ballPosY, d1
0000243E  2439 0029DDD8           2514      move.l  receiver2YPos, d2
00002444  2639 0029DE60           2515      move.l  ballSpeedX, d3
0000244A  2839 0029DE64           2516      move.l  ballSpeedY, d4
00002450  4EB9 000024A6           2517      jsr     getXCoordAtYFromVelocity
00002456                          2518      
00002456                          2519      ;receiver2
00002456  203C FFFFFF00           2520      move.l  #RECEIVER_SPEED_LEFT, d0            ;assume moving left
0000245C  B6B9 0029DDD4           2521      cmp.l   receiver2XPos, d3
00002462  6F00 0008               2522      ble     dontMoveRightRec2                   ;if the player is to the left of the defender
00002466  203C 00000100           2523      move.l  #RECEIVER_SPEED_RIGHT, d0
0000246C                          2524  dontMoveRightRec2
0000246C                          2525      ;update xpos receiver2
0000246C  2439 0029DE74           2526      move.l  deltaTime, d2
00002472  41F9 0029DDD4           2527      lea     receiver2Xpos, a0
00002478  4EB8 22C4               2528      jsr     moveIndividual
0000247C                          2529      
0000247C                          2530      ;update ypos receiver2
0000247C  41F9 0029DDD8           2531      lea     receiver2Ypos, a0
00002482  2039 0029DE18           2532      move.l  receiver2Yvel3, d0
00002488  2610                    2533      move.l  (a0), d3
0000248A  D680                    2534      add.l   d0, d3
0000248C  B6BC 00004A00           2535      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8, d3
00002492  6F00 0006               2536      ble     dontChaseBallRec2    
00002496  4EB8 22C4               2537      jsr     moveIndividual
0000249A                          2538  dontChaseBallRec2
0000249A                          2539     
0000249A                          2540      ;move defenders
0000249A  4EB9 00002538           2541      jsr     defendersChaseBall
000024A0  6000 008C               2542      bra     donePathMoving
000024A4  4E75                    2543      rts
000024A6                          2544      
000024A6                          2545  ;x1 is d0, d1 is y1, d2 is y2, xvel is d3, yvel is d4. return val x2 in d3
000024A6                          2546  getXCoordAtYFromVelocity
000024A6  B8BC 00000000           2547      cmp.l   #0, d4
000024AC  6700 000C               2548      beq     returnX
000024B0  9481                    2549      sub.l   d1, d2                          ;y2 - y1
000024B2  85C4                    2550      divs    d4, d2                          ; / yvel
000024B4  C7C2                    2551      muls    d2, d3                          ; * xvel
000024B6  D680                    2552      add.l   d0, d3                          ; + x1
000024B8  4E75                    2553      rts
000024BA                          2554  returnX
000024BA  EF83                    2555      asl.l   #7, d3                          ;get the movement direction
000024BC  D083                    2556      add.l   d3, d0
000024BE  2600                    2557      move.l  d0, d3
000024C0  4E75                    2558      rts
000024C2                          2559      
000024C2                          2560  updateReceivers
000024C2  0C39 0002 0029DE7D      2561      cmp.b   #GAMESTATE_PLAY, gameState
000024CA  6600 EB34               2562      bne     RETURN
000024CE  0C39 0003 0029DE7C      2563      cmp.b   #BALLSTATE_TIMEOUT, ballState
000024D6  6600 0004               2564      bne     continueUpdating
000024DA                          2565      
000024DA                          2566      
000024DA  4E75                    2567      rts
000024DC                          2568  continueUpdating  
000024DC                          2569      
000024DC  0C39 0002 0029DE7C      2570      cmp.b   #BALLSTATE_CAUGHT, ballState          ;if the ball has been thrown and caught, skip to defenders chasing player
000024E4  6700 011E               2571      beq     defendersChasePlayer
000024E8                          2572      
000024E8  2439 0029DE74           2573      move.l  deltaTime, d2
000024EE                          2574  
000024EE  0C39 0001 0029DE7C      2575      cmp.b   #BALLSTATE_FLY, ballState
000024F6  6700 FED2               2576      beq     receiverBallMagnetism
000024FA                          2577  
000024FA                          2578      ;check the turn point
000024FA  2212                    2579      move.l  (a2), d1
000024FC  2039 0029DDE4           2580      move.l  receiver1YTurnPos, d0        
00002502  B280                    2581      cmp.l   d0, d1
00002504  6F00 000A               2582      ble     Rec1SecondVel                       ;if the receiver has posY above yTurnPos
00002508                          2583  Rec1FirstVel    
00002508  4EB8 22CA               2584      jsr     moveReceiverAndDefender1Path1
0000250C  6000 0006               2585      bra     movePath2
00002510                          2586  Rec1SecondVel
00002510  4EB8 230A               2587      jsr     moveReceiverAndDefender1Path2
00002514                          2588  movePath2
00002514                          2589      ;check the turn point
00002514  2214                    2590      move.l  (a4), d1
00002516  2039 0029DE04           2591      move.l  receiver2YTurnPos, d0        
0000251C  B280                    2592      cmp.l   d0, d1
0000251E  6F00 000A               2593      ble     Rec2SecondVel                       ;if the receiver has posY above yTurnPos
00002522                          2594  Rec2FirstVel    
00002522  4EB8 234A               2595      jsr     moveReceiverAndDefender2Path1
00002526  6000 0006               2596      bra     donePathMoving
0000252A                          2597  Rec2SecondVel
0000252A  4EB8 238A               2598      jsr     moveReceiverAndDefender2Path2
0000252E                          2599      
0000252E                          2600  donePathMoving
0000252E  4EB9 00002838           2601      jsr     updateLineBacker
00002534  6000 0156               2602      bra     checkReceiverAndDefenderBounds
00002538                          2603  defendersChaseBall
00002538  2639 0029DE68           2604      move.l  ballPosX, d3
0000253E  2839 0029DE6C           2605      move.l  ballPosY, d4
00002544  6000 00CA               2606      bra defendersChaseObject
00002548                          2607  linebackerChasePlayer
00002548                          2608      ;defender1
00002548  7080                    2609      move.l  #CHASE_SPEED_LEFT, d0               ;assume moving left
0000254A  B6B9 0029DE4C           2610      cmp.l   linebackerXPos, d3
00002550  6F00 0008               2611      ble     dontMoveRightLB                       ;if the player is to the left of the defender
00002554  203C 00000080           2612      move.l  #CHASE_SPEED_RIGHT, d0
0000255A                          2613  dontMoveRightLB
0000255A  7277                    2614      move.l  #CHASE_SPEED_DOWN, d1               ;assume moving down
0000255C  B8B9 0029DE50           2615      cmp.l   linebackerYPos, d4
00002562  6C00 0004               2616      bge     dontMoveUpLB                          ;if the player is above (less than) the defender
00002566  7285                    2617      move.l  #CHASE_SPEED_UP, d1
00002568                          2618  dontMoveUpLB
00002568  2439 0029DE74           2619      move.l  deltaTime, d2
0000256E                          2620      ;update xpos linebacker
0000256E  41F9 0029DE4C           2621      lea     linebackerXpos, a0
00002574  4EB8 22C4               2622      jsr     moveIndividual
00002578                          2623      
00002578                          2624      ;update ypos linebacker
00002578  41F9 0029DE50           2625      lea     linebackerYpos, a0
0000257E  2001                    2626      move.l  d1, d0
00002580  4EB8 22C4               2627      jsr     moveIndividual
00002584  4E75                    2628      rts
00002586                          2629  receiversChasePlayer
00002586                          2630      ;receiver1
00002586  7080                    2631      move.l  #CHASE_SPEED_LEFT, d0               ;assume moving left
00002588  B6B9 0029DDCC           2632      cmp.l   receiver1XPos, d3
0000258E  6F00 0008               2633      ble     dontMoveRight3                      ;if the player is to the left of the receiver
00002592  203C 00000080           2634      move.l  #CHASE_SPEED_RIGHT, d0
00002598                          2635  dontMoveRight3
00002598  223C 000000B0           2636      move.l  #LINEBACKER_CHASE_SPEED_DOWN, d1    ;assume moving down
0000259E  B8B9 0029DDD0           2637      cmp.l   receiver1YPos, d4
000025A4  6C00 0004               2638      bge     dontMoveUp3                         ;if the player is above (less than) the receiver
000025A8  72B0                    2639      move.l  #LINEBACKER_CHASE_SPEED_UP, d1
000025AA                          2640  dontMoveUp3
000025AA  2439 0029DE74           2641      move.l  deltaTime, d2
000025B0                          2642      ;update xpos receiver1
000025B0  41F9 0029DDCC           2643      lea     receiver1Xpos, a0
000025B6  4EB8 22C4               2644      jsr     moveIndividual
000025BA                          2645      
000025BA                          2646      ;update ypos receiver1
000025BA  41F9 0029DDD0           2647      lea     receiver1Ypos, a0
000025C0  2001                    2648      move.l  d1, d0
000025C2  4EB8 22C4               2649      jsr     moveIndividual
000025C6                          2650  
000025C6                          2651      ;defender2
000025C6  7080                    2652      move.l  #CHASE_SPEED_LEFT, d0           ;assume moving left
000025C8  B6B9 0029DDD4           2653      cmp.l   receiver2XPos, d3
000025CE  6F00 0008               2654      ble     dontMoveRight4                  ;if the player is to the left of the receiver
000025D2  203C 00000080           2655      move.l  #CHASE_SPEED_RIGHT, d0
000025D8                          2656  dontMoveRight4
000025D8  7277                    2657      move.l  #CHASE_SPEED_DOWN, d1           ;assume moving down
000025DA  B8B9 0029DDD8           2658      cmp.l   receiver2YPos, d4
000025E0  6C00 0004               2659      bge     dontMoveUp4                     ;if the player is above (less than) the receiver
000025E4  7285                    2660      move.l  #CHASE_SPEED_UP, d1
000025E6                          2661  dontMoveUp4
000025E6  2439 0029DE74           2662      move.l  deltaTime, d2
000025EC                          2663      ;update xpos receiver2
000025EC  41F9 0029DDD4           2664      lea     receiver2Xpos, a0
000025F2  4EB8 22C4               2665      jsr     moveIndividual
000025F6                          2666      
000025F6                          2667      ;update ypos receiver2
000025F6  41F9 0029DDD8           2668      lea     receiver2Ypos, a0
000025FC  2001                    2669      move.l  d1, d0
000025FE  4EB8 22C4               2670      jsr     moveIndividual
00002602  4E75                    2671      rts
00002604                          2672      
00002604                          2673  defendersChasePlayer
00002604  2607                    2674      move.l  d7, d3
00002606  2806                    2675      move.l  d6, d4
00002608  4EB8 2548               2676      jsr     linebackerChasePlayer
0000260C  4EB8 2586               2677      jsr     receiversChasePlayer
00002610                          2678  defendersChaseObject
00002610                          2679      
00002610                          2680      ;defender1
00002610  7080                    2681      move.l  #CHASE_SPEED_LEFT, d0               ;assume moving left
00002612  B6B9 0029DE1C           2682      cmp.l   defender1XPos, d3
00002618  6F00 0008               2683      ble     dontMoveRight                       ;if the player is to the left of the defender
0000261C  203C 00000080           2684      move.l  #CHASE_SPEED_RIGHT, d0
00002622                          2685  dontMoveRight
00002622  223C 000000B0           2686      move.l  #LINEBACKER_CHASE_SPEED_DOWN, d1    ;assume moving down
00002628  B8B9 0029DE20           2687      cmp.l   defender1YPos, d4
0000262E  6C00 0004               2688      bge     dontMoveUp                          ;if the player is above (less than) the defender
00002632  72B0                    2689      move.l  #LINEBACKER_CHASE_SPEED_UP, d1
00002634                          2690  dontMoveUp
00002634  2439 0029DE74           2691      move.l  deltaTime, d2
0000263A                          2692      ;update xpos def1
0000263A  41F9 0029DE1C           2693      lea     defender1Xpos, a0
00002640  4EB8 22C4               2694      jsr     moveIndividual
00002644                          2695      
00002644                          2696      ;update ypos rec1
00002644  41F9 0029DE20           2697      lea     defender1Ypos, a0
0000264A  2001                    2698      move.l  d1, d0
0000264C  4EB8 22C4               2699      jsr     moveIndividual
00002650                          2700  
00002650                          2701      ;defender2
00002650  7080                    2702      move.l  #CHASE_SPEED_LEFT, d0           ;assume moving left
00002652  B6B9 0029DE34           2703      cmp.l   defender2XPos, d3
00002658  6F00 0008               2704      ble     dontMoveRight2                  ;if the player is to the left of the defender
0000265C  203C 00000080           2705      move.l  #CHASE_SPEED_RIGHT, d0
00002662                          2706  dontMoveRight2
00002662  7277                    2707      move.l  #CHASE_SPEED_DOWN, d1           ;assume moving down
00002664  B8B9 0029DE38           2708      cmp.l   defender2YPos, d4
0000266A  6C00 0004               2709      bge     dontMoveUp2                     ;if the player is above (less than) the defender
0000266E  7285                    2710      move.l  #CHASE_SPEED_UP, d1
00002670                          2711  dontMoveUp2
00002670  2439 0029DE74           2712      move.l  deltaTime, d2
00002676                          2713      ;update xpos def1
00002676  41F9 0029DE34           2714      lea     defender2Xpos, a0
0000267C  4EB8 22C4               2715      jsr     moveIndividual
00002680                          2716      
00002680                          2717      ;update ypos rec1
00002680  41F9 0029DE38           2718      lea     defender2Ypos, a0
00002686  2001                    2719      move.l  d1, d0
00002688  4EB8 22C4               2720      jsr     moveIndividual
0000268C                          2721  checkReceiverAndDefenderBounds
0000268C                          2722      ;check if they are going into the sidelines
0000268C  0C91 00023500           2723      cmp.l   #(LEFT_RECEIVER_MAX_POS)<<8, (a1)
00002692  6F00 0016               2724      ble     checkRec1RightBounds
00002696  23FC FFFFFF80 0029DDE8  2725      move.l  #CHASE_SPEED_LEFT, receiver1XVel1
000026A0  23FC FFFFFF80 0029DDF0  2726      move.l  #CHASE_SPEED_LEFT, receiver1XVel2 ;set the receiver to go across the field
000026AA                          2727  checkRec1RightBounds
000026AA  0C91 00002800           2728      cmp.l   #(RIGHT_RECEIVER_MAX_POS-PLAYER_WIDTH)<<8, (a1)
000026B0  6C00 0016               2729      bge     checkRec1TopBounds
000026B4  23FC 00000080 0029DDE8  2730      move.l  #CHASE_SPEED_RIGHT, receiver1Xvel1
000026BE  23FC 00000080 0029DDF0  2731      move.l  #CHASE_SPEED_RIGHT, receiver1XVel2
000026C8                          2732  checkRec1TopBounds
000026C8  0C92 00004A00           2733      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8, (a2)
000026CE  6C00 002A               2734      bge     checkDef1LeftBounds
000026D2  23FC 00000000 0029DDEC  2735      move.l  #0, receiver1YVel1
000026DC  23FC 00000000 0029DDF4  2736      move.l  #0, receiver1Yvel2
000026E6  23F9 0029DDF0 0029DDE8  2737      move.l  receiver1XVel2, receiver1XVel1 
000026F0  23F9 0029DDF0 0029DDF0  2738      move.l  receiver1XVel2, receiver1XVel2 
000026FA                          2739  checkDef1LeftBounds
000026FA  0CB9 00023500 0029DE1C  2740      cmp.l   #(LEFT_RECEIVER_MAX_POS)<<8, defender1XPos
00002704  6F00 0016               2741      ble     checkDef1RightBounds
00002708  23FC FFFFFF80 0029DE24  2742      move.l  #CHASE_SPEED_LEFT, defender1XVel1
00002712  23FC FFFFFF80 0029DE2C  2743      move.l  #CHASE_SPEED_LEFT, defender1XVel2 ;set the receiver to go across the field
0000271C                          2744  checkDef1RightBounds
0000271C  0CB9 00002800 0029DE1C  2745      cmp.l   #(RIGHT_RECEIVER_MAX_POS-PLAYER_WIDTH)<<8, defender1XPos
00002726  6C00 0016               2746      bge     checkDef1TopBounds
0000272A  23FC 00000080 0029DE24  2747      move.l  #CHASE_SPEED_RIGHT, defender1Xvel1
00002734  23FC 00000080 0029DE2C  2748      move.l  #CHASE_SPEED_RIGHT, defender1XVel2
0000273E                          2749  checkDef1TopBounds
0000273E  0CB9 00004A00 0029DE20  2750      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8, defender1YPos
00002748  6C00 0016               2751      bge     doneFirstBoundsChecks
0000274C  23FC 00000000 0029DE28  2752      move.l  #0, defender1YVel1
00002756  23FC 00000000 0029DE30  2753      move.l  #0, defender1Yvel2
00002760                          2754  doneFirstBoundsChecks
00002760                          2755      ;rec2 and def2
00002760  0C93 00023500           2756      cmp.l   #(LEFT_RECEIVER_MAX_POS)<<8, (a3)
00002766  6F00 0016               2757      ble     checkRec2RightBounds
0000276A  23FC FFFFFF80 0029DE08  2758      move.l  #CHASE_SPEED_LEFT, receiver2XVel1
00002774  23FC FFFFFF80 0029DE10  2759      move.l  #CHASE_SPEED_LEFT, receiver2XVel2 ;set the receiver to go across the field
0000277E                          2760  checkRec2RightBounds
0000277E  0C93 00002800           2761      cmp.l   #(RIGHT_RECEIVER_MAX_POS-PLAYER_WIDTH)<<8, (a3)
00002784  6C00 0016               2762      bge     checkRec2TopBounds
00002788  23FC 00000080 0029DE08  2763      move.l  #CHASE_SPEED_RIGHT, receiver2Xvel1
00002792  23FC 00000080 0029DE10  2764      move.l  #CHASE_SPEED_RIGHT, receiver2XVel2
0000279C                          2765  checkRec2TopBounds
0000279C  0C94 00004A00           2766      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8, (a4)
000027A2  6C00 002A               2767      bge     checkDef2LeftBounds
000027A6  23FC 00000000 0029DE0C  2768      move.l  #0, receiver2YVel1
000027B0  23FC 00000000 0029DE14  2769      move.l  #0, receiver2Yvel2
000027BA  23F9 0029DE10 0029DE08  2770      move.l  receiver2XVel2, receiver2XVel1 
000027C4  23F9 0029DE10 0029DE10  2771      move.l  receiver2XVel2, receiver2XVel2 
000027CE                          2772  checkDef2LeftBounds
000027CE  0CB9 00023500 0029DE34  2773      cmp.l   #(LEFT_RECEIVER_MAX_POS)<<8, defender2XPos
000027D8  6F00 0016               2774      ble     checkDef2RightBounds
000027DC  23FC FFFFFF80 0029DE3C  2775      move.l  #CHASE_SPEED_LEFT, defender2XVel1
000027E6  23FC FFFFFF80 0029DE44  2776      move.l  #CHASE_SPEED_LEFT, defender2XVel2                                                   ;set the receiver to go across the field
000027F0                          2777  checkDef2RightBounds
000027F0  0CB9 00002800 0029DE34  2778      cmp.l   #(RIGHT_RECEIVER_MAX_POS-PLAYER_WIDTH)<<8, defender2XPos
000027FA  6C00 0016               2779      bge     checkDef2TopBounds
000027FE  23FC 00000080 0029DE3C  2780      move.l  #CHASE_SPEED_RIGHT, defender2Xvel1
00002808  23FC 00000080 0029DE44  2781      move.l  #CHASE_SPEED_RIGHT, defender2XVel2
00002812                          2782  checkDef2TopBounds
00002812  0CB9 00004A00 0029DE38  2783      cmp.l   #(TOP_RECEIVER_MAX_POS)<<8, defender2YPos
0000281C  6C00 0016               2784      bge     doneSecondBoundsChecks
00002820  23FC 00000000 0029DE40  2785      move.l  #0, defender2YVel1
0000282A  23FC 00000000 0029DE48  2786      move.l  #0, defender2Yvel2
00002834                          2787  doneSecondBoundsChecks
00002834  6000 00AA               2788      bra     updatePlayer1
00002838                          2789  
00002838                          2790  updateLinebacker
00002838  0CB9 00000000 0029DE5C  2791      cmp.l   #LINEBACKERSTATE_STRAFE, linebackerState
00002842  6600 001C               2792      bne     doneBlitzChecking
00002846                          2793                                                                                                  ;check if we should blitz
00002846  7600                    2794      move.l  #0, d3
00002848  7200                    2795      move.l  #0, d1
0000284A  4EB8 176A               2796      jsr     getRandomByteIntoD3
0000284E  E28B                    2797      lsr.l   #1, d3
00002850  B63C 0000               2798      cmp.b   #0, d3                                                                              ;checking something on a random chance 1/255
00002854  6600 000A               2799      bne     doneBlitzChecking
00002858  13FC 0001 0029DE5C      2800      move.b  #LINEBACKERSTATE_BLITZ, linebackerState
00002860                          2801  doneBlitzChecking
00002860                          2802      ;linebacker pathing
00002860                          2803      
00002860  7000                    2804      move.l  #0, d0
00002862  BEB9 0029DE4C           2805      cmp.l   linebackerXPos, d7
00002868  6700 0010               2806      beq     dontMoveLinebackerRight                                                             ;if equal dont move
0000286C  70F8                    2807      move.l  #LINEBACKER_CHASE_SPEED_LEFT, d0                                                    ;assume moving left
0000286E  BEB9 0029DE4C           2808      cmp.l   linebackerXPos, d7
00002874  6F00 0004               2809      ble     dontMoveLinebackerRight                                                             ;if the player is to the left of the defender
00002878  7008                    2810      move.l  #LINEBACKER_CHASE_SPEED_RIGHT, d0
0000287A                          2811      
0000287A                          2812  dontMoveLinebackerRight
0000287A  0C39 0001 0029DE7C      2813      cmp.b   #BALLSTATE_FLY, ballState
00002882  6700 001A               2814      beq     blitz    
00002886  0C39 0001 0029DE5C      2815      cmp.b   #LINEBACKERSTATE_BLITZ, linebackerState
0000288E  6700 000E               2816      beq     blitz
00002892  0C39 0002 0029DE7C      2817      cmp.b   #BALLSTATE_CAUGHT, ballstate
0000289A  6600 0026               2818      bne     dontBlitz
0000289E                          2819  blitz
0000289E  223C 000000B0           2820      move.l  #LINEBACKER_CHASE_SPEED_DOWN, d1                                                    ;assume moving down
000028A4  BCB9 0029DE50           2821      cmp.l   linebackerYPos, d6
000028AA  6C00 0004               2822      bge     blitzHorz                                                                           ;if the player is above (less than) the defender
000028AE  72B0                    2823      move.l  #LINEBACKER_CHASE_SPEED_UP, d1
000028B0                          2824  blitzHorz    
000028B0  7080                    2825      move.l  #CHASE_SPEED_LEFT, d0                                                               ;assume moving left
000028B2  BEB9 0029DE4C           2826      cmp.l   linebackerXPos, d7
000028B8  6F00 0008               2827      ble     dontBlitz                                                                           ;if the player is to the left of the defender
000028BC  203C 00000080           2828      move.l  #CHASE_SPEED_RIGHT, d0
000028C2                          2829  dontBlitz
000028C2                          2830      
000028C2  2439 0029DE74           2831      move.l  deltaTime, d2
000028C8                          2832      ;update xpos linebacker
000028C8  41F9 0029DE4C           2833      lea     linebackerXpos, a0
000028CE  4EB8 22C4               2834      jsr     moveIndividual
000028D2                          2835      
000028D2                          2836      
000028D2                          2837      ;update ypos linebacker
000028D2  41F9 0029DE50           2838      lea     linebackerYPos, a0
000028D8  2001                    2839      move.l  d1, d0
000028DA  4EB8 22C4               2840      jsr     moveIndividual
000028DE  4E75                    2841      rts
000028E0                          2842  ;gets input and moves the player or throws the ball  
000028E0                          2843  updatePlayer1
000028E0  0C39 0001 0029DE7C      2844      cmp.b   #BALLSTATE_FLY, ballState
000028E8  6700 01AC               2845      beq     flyBall 
000028EC                          2846      ;cap the accelleration Y
000028EC  BA7C 0078               2847      cmp.w   #PLAYER_MAX_SPEED_Y, d5
000028F0  6E00 0138               2848      bgt     dontAccellerateYPos
000028F4  BA7C FF82               2849      cmp.w   #PLAYER_MIN_SPEED_Y, d5
000028F8  6D00 0128               2850      blt     dontAccellerateYNeg
000028FC                          2851  
000028FC                          2852  doAccelleratey
000028FC  0C39 0000 0029DE84      2853      cmp.b   #0, wWasPressed
00002904  6600 000C               2854      bne     dontKillMomentumYUp
00002908  BA7C 0000               2855      cmp.w   #0, d5
0000290C  6C00 0004               2856      bge     dontKillMomentumYUp
00002910  5845                    2857      add.w   #PLAYER_Y_DRAG, d5
00002912                          2858  dontKillMomentumYUp
00002912                          2859  
00002912  0C39 0000 0029DE86      2860      cmp.b   #0, sWasPressed
0000291A  6600 000C               2861      bne     dontKillMomentumYDown
0000291E  BA7C 0000               2862      cmp.w   #0, d5
00002922  6F00 0004               2863      ble     dontKillMomentumYDown
00002926  5945                    2864      sub.w   #PLAYER_Y_DRAG, d5
00002928                          2865  dontKillMomentumYDown
00002928  3005                    2866      move.w  d5, d0                                                                              ;get the y accelleration
0000292A  48C0                    2867      ext.l   d0
0000292C  2239 0029DE74           2868      move.l   deltaTime,d1
00002932  C1C1                    2869      muls    d1, d0
00002934  DC80                    2870      add.l   d0, d6                                                                              ;add y accelleration
00002936                          2871      
00002936                          2872      ;cap the accelleration X
00002936  4845                    2873      swap    d5                                                                                  ;restore to xy
00002938  BA7C 0090               2874      cmp.w   #PLAYER_MAX_SPEED_X, d5
0000293C  6E00 00DC               2875      bgt     dontAccellerateXPos                                                                 ;should we cap?    
00002940  BA7C FF70               2876      cmp.w   #PLAYER_MIN_SPEED_X, d5
00002944  6D00 00CC               2877      blt     dontAccellerateXNeg                                                                 ;should we cap?
00002948                          2878      
00002948                          2879      
00002948                          2880  doAccellerateX
00002948  0C39 0000 0029DE87      2881      cmp.b   #0, dWasPressed
00002950  6600 000C               2882      bne     dontKillMomentumXRight
00002954  BA7C 0000               2883      cmp.w   #0, d5
00002958  6F00 0004               2884      ble     dontKillMomentumXRight
0000295C  5945                    2885      sub.w   #PLAYER_X_DRAG, d5
0000295E                          2886  dontKillMomentumXRight
0000295E                          2887  
0000295E  0C39 0000 0029DE85      2888      cmp.b   #0, aWasPressed
00002966  6600 000C               2889      bne     dontKillMomentumXLeft
0000296A  BA7C 0000               2890      cmp.w   #0, d5
0000296E  6C00 0004               2891      bge     dontKillMomentumXLeft
00002972  5845                    2892      add.w   #PLAYER_X_DRAG, d5
00002974                          2893  dontKillMomentumXLeft
00002974                          2894      
00002974  3005                    2895      move.w  d5, d0                                                                              ;get the x accelleration
00002976  48C0                    2896      ext.l   d0 
00002978  2239 0029DE74           2897      move.l  deltaTime,d1
0000297E  C1C1                    2898      muls    d1, d0
00002980  DE80                    2899      add.l   d0, d7                                                                              ;add x accelleration
00002982                          2900      
00002982                          2901      ;attach the football to the runner
00002982  23C7 0029DE68           2902      move.l  d7, ballPosX
00002988  23C6 0029DE6C           2903      move.l  d6, ballPosY
0000298E                          2904  
0000298E                          2905  updatePlayer
0000298E                          2906      ;check x bounds
0000298E  0C87 00023D00           2907      cmpi.l  #(RIGHT_SIDE_OF_FIELD-PLAYER_WIDTH)<<8,d7
00002994  6C00 01D6               2908      bge     outOfBounds
00002998  0C87 00002500           2909      cmpi.l  #(LEFT_SIDE_OF_FIELD)<<8,d7
0000299E  6F00 01CC               2910      ble     outOfBounds
000029A2                          2911      ;didn't go out of bounds
000029A2                          2912      
000029A2                          2913      ;safety
000029A2  0C86 00031B00           2914      cmpi.l  #(BOTTOM_OF_FIELD-PLAYER_HEIGHT)<<8, d6
000029A8  6C00 0230               2915      bge     touchback
000029AC                          2916      
000029AC                          2917      ;touchdown
000029AC  203C 00008400           2918      move.l  #(TOUCHDOWN_POS)<<8, d0
000029B2  0480 00000A00           2919      sub.l   #FOOTBALL_CARRY_OFFSET_Y, d0
000029B8  BC80                    2920      cmp.l   d0, d6
000029BA  6F00 01FC               2921      ble     touchdown
000029BE                          2922      
000029BE                          2923      ;defender1Collision
000029BE  2439 0029DE1C           2924      move.l  defender1XPos, d2
000029C4  2639 0029DE20           2925      move.l  defender1YPos, d3
000029CA  4EB8 17AC               2926      jsr     checkCollisionWithPlayer
000029CE  B03C 0001               2927      cmp.b   #1, d0
000029D2  6700 01A4               2928      beq     tackled                                                                             ;if there was a collision
000029D6                          2929      
000029D6                          2930      ;defender2Collision
000029D6  2439 0029DE34           2931      move.l  defender2XPos, d2
000029DC  2639 0029DE38           2932      move.l  defender2YPos, d3
000029E2  4EB8 17AC               2933      jsr     checkCollisionWithPlayer
000029E6  B03C 0001               2934      cmp.b   #1, d0
000029EA  6700 018C               2935      beq     tackled                                                                             ;if there was a collision
000029EE                          2936      
000029EE                          2937      ;linebackerCollision
000029EE  2439 0029DE4C           2938      move.l  linebackerXPos, d2
000029F4  2639 0029DE50           2939      move.l  linebackerYPos, d3
000029FA  4EB8 17AC               2940      jsr     checkCollisionWithPlayer
000029FE  B03C 0001               2941      cmp.b   #1, d0
00002A02  6700 0174               2942      beq     tackled                                                                             ;if there was a collision
00002A06                          2943  
00002A06                          2944  
00002A06                          2945  ;TODO
00002A06                          2946  noCollisionWithTD
00002A06                          2947  
00002A06                          2948  ;TODO
00002A06                          2949  noCollisionWithTouchBack
00002A06                          2950      ;line of scrimmage collision
00002A06  BCB9 0029DDC4           2951      cmp.l   lineOfScrimmage, d6
00002A0C  6D00 05D2               2952      blt     caughtPass
00002A10  4E75                    2953      rts 
00002A12                          2954  
00002A12                          2955      
00002A12                          2956  dontAccellerateXNeg
00002A12  3A3C FF70               2957      move.w  #PLAYER_MIN_SPEED_X, d5
00002A16  6000 FF30               2958      bra     doAccellerateX
00002A1A                          2959  dontAccellerateXPos  
00002A1A  3A3C 0090               2960      move.w  #PLAYER_MAX_SPEED_X, d5
00002A1E  6000 FF28               2961      bra     doAccellerateX
00002A22                          2962  dontAccellerateYNeg
00002A22  3A3C FF82               2963      move.w  #PLAYER_MIN_SPEED_Y, d5
00002A26  6000 FED4               2964      bra     doAccellerateY
00002A2A                          2965  dontAccellerateYPos
00002A2A  3A3C 0078               2966      move.w  #PLAYER_MAX_SPEED_Y, d5
00002A2E  6000 FECC               2967      bra     doAccellerateY
00002A32                          2968      
00002A32                          2969      
00002A32                          2970      
00002A32                          2971  noPositiveSet
00002A32  4E75                    2972      rts
00002A34                          2973  
00002A34                          2974      
00002A34                          2975     
00002A34                          2976      
00002A34                          2977  
00002A34                          2978  
00002A34                          2979  -------------------- end include --------------------
00002A34                          2980      include 'footballLogic.x68'
00002A34                          2981  
00002A34                          2982  snapBall
00002A34  4EB9 000030F2           2983      jsr     playSnapSound
00002A3A  4EB8 1AD8               2984      jsr     coverPaths
00002A3E  23FC 00000023 0029DED0  2985      move.l  #SNAP_DEBOUNCE_TIMER, snapDebounceTimer
00002A48  13FC 0000 0029DE7C      2986      move.b  #BALLSTATE_QB, ballState
00002A50  2A3C 01000000           2987      move.l  #DROPBACK_VELOCITY_Y, d5
00002A56  4845                    2988      swap    d5
00002A58  4E75                    2989      rts
00002A5A                          2990  
00002A5A                          2991  throwBall
00002A5A                          2992  
00002A5A  13FC 0001 0029DE7C      2993      move.b  #BALLSTATE_FLY, ballState
00002A62                          2994      
00002A62                          2995      ;put ball in air
00002A62  4EB8 1C2C               2996      jsr     coverBallUI
00002A66  4EB9 00003156           2997      jsr     playThrowSound
00002A6C  2239 0029DE74           2998      move.l  deltaTime, d1                                                                                                          ;move so we get register word properly
00002A72                          2999      
00002A72  263C FFFFF900           3000      move.l  #FASTBALL_SPEED, d3                                                                                      
00002A78  23C3 0029DE64           3001      move.l  d3, ballSpeedY
00002A7E  3405                    3002      move.w  d5, d2                                                                                                                  ;get xvel of player
00002A80  48C2                    3003      ext.l   d2
00002A82  2602                    3004      move.l  d2, d3
00002A84  E282                    3005      asr.l   #1, d2
00002A86  C7FC 0003               3006      muls.w  #3, d3
00002A8A  D682                    3007      add.l   d2, d3
00002A8C  C7C1                    3008      muls.w  d1, d3
00002A8E  23C3 0029DE60           3009      move.l  d3, ballSpeedX
00002A94  4E75                    3010      rts
00002A96                          3011  
00002A96                          3012      
00002A96                          3013    
00002A96                          3014  flyBall ; the ball is in the air
00002A96                          3015      ;input is locked for player as we just branched here
00002A96                          3016      ;if the ball collides with a player, have that player catch the ball and swap the Player1 with the Receiver
00002A96  2611                    3017      move.l  (a1), d3 
00002A98  2812                    3018      move.l  (a2), d4                                                                                                               ;top y pos
00002A9A  4EB8 17EA               3019      jsr     checkBallCollision
00002A9E  B03C 0000               3020      cmp.b   #0, d0
00002AA2  6700 0018               3021      beq     noCatch1
00002AA6                          3022      
00002AA6                          3023      ;swap Receiver1 with player control
00002AA6                          3024          
00002AA6  2011                    3025      move.l  (a1), d0
00002AA8  2287                    3026      move.l  d7, (a1)
00002AAA  2E00                    3027      move.l  d0, d7
00002AAC  2012                    3028      move.l  (a2), d0
00002AAE  2486                    3029      move.l  d6, (a2)
00002AB0  2C00                    3030      move.l  d0, d6
00002AB2                          3031      
00002AB2  4EB9 00003100           3032      jsr     playCatchSound
00002AB8  6000 0526               3033      bra     caughtPass   
00002ABC                          3034  noCatch1
00002ABC                          3035  
00002ABC                          3036      ;check collision with receiver2
00002ABC  2613                    3037      move.l  (a3), d3 
00002ABE  2814                    3038      move.l  (a4), d4                                                                                                                ;top y pos
00002AC0  4EB8 17EA               3039      jsr     checkBallCollision
00002AC4  B03C 0000               3040      cmp.b   #0, d0
00002AC8  6700 0018               3041      beq     noCatch2
00002ACC                          3042   
00002ACC                          3043      ;swap Receiver2 with player control
00002ACC  2013                    3044      move.l  (a3), d0
00002ACE  2687                    3045      move.l  d7, (a3)
00002AD0  2E00                    3046      move.l  d0, d7
00002AD2  2014                    3047      move.l  (a4), d0
00002AD4  2886                    3048      move.l  d6, (a4)
00002AD6  2C00                    3049      move.l  d0, d6
00002AD8                          3050  
00002AD8  4EB9 00003100           3051      jsr     playCatchSound
00002ADE  6000 0500               3052      bra     caughtPass
00002AE2                          3053  noCatch2
00002AE2                          3054  
00002AE2                          3055  defenderCollisionCheck
00002AE2                          3056      ;interception
00002AE2  2639 0029DE1C           3057      move.l  defender1XPos, d3
00002AE8  2839 0029DE20           3058      move.l  defender1YPos, d4
00002AEE  4EB8 17EA               3059      jsr     checkBallCollision
00002AF2  B03C 0001               3060      cmp.b   #1, d0                                                                                                                    ;if collision, there was an interception
00002AF6  6700 00A2               3061      beq interception
00002AFA                          3062      
00002AFA                          3063      ;interception
00002AFA  2639 0029DE34           3064      move.l  defender2XPos, d3
00002B00  2839 0029DE38           3065      move.l  defender2YPos, d4
00002B06  4EB8 17EA               3066      jsr     checkBallCollision
00002B0A  B03C 0001               3067      cmp.b   #1, d0                                                                                                                      ;if collision, there was an interception
00002B0E  6700 008A               3068      beq     interception
00002B12                          3069      
00002B12                          3070      ;interception
00002B12  2639 0029DE4C           3071      move.l  linebackerXPos, d3
00002B18  2839 0029DE50           3072      move.l  linebackerYPos, d4
00002B1E  4EB8 17EA               3073      jsr     checkBallCollision
00002B22  B03C 0001               3074      cmp.b   #1, d0 ;if collision, there was an interception
00002B26  6700 0072               3075      beq     interception
00002B2A                          3076      
00002B2A                          3077  ballOutOfPlayCheck
00002B2A                          3078      
00002B2A                          3079      ;out the end 
00002B2A  0CB9 00003B00 0029DE6C  3080      cmp.l   #(TOP_OF_FIELD-10)<<8, ballPosY                                                                        
00002B34  6F00 003E               3081      ble     incompletePass                                                                                                              ;is it above the top of the screen
00002B38                          3082      
00002B38  0CB9 00022E00 0029DE68  3083      cmp.l   #(RIGHT_SIDE_OF_FIELD-FOOTBALL_WIDTH*5)<<8, ballPosX
00002B42  6C00 0030               3084      bge     incompletePass
00002B46                          3085      
00002B46  0CB9 00001300 0029DE68  3086      cmp.l   #(LEFT_SIDE_OF_FIELD-FOOTBALL_WIDTH*2)<<8, ballPosX
00002B50  6F00 0022               3087      ble     incompletePass
00002B54  4E75                    3088      rts
00002B56                          3089  ;in d0
00002B56                          3090  GetLineOfScrimmage 
00002B56  2006                    3091      move.l  d6, d0
00002B58  0480 00000A00           3092      sub.l   #FOOTBALL_CARRY_OFFSET_Y, d0
00002B5E  0680 00000A80           3093      add.l   #(FOOTBALL_HEIGHT)<<7, d0                                                                                                   ;subtract the height over 2 to get the center of the ball
00002B64  23C0 0029DDC4           3094      move.l  d0, lineOfScrimmage
00002B6A  4E75                    3095      rts
00002B6C                          3096  outOfBounds
00002B6C  4EB8 2B56               3097      jsr     GetLineOfScrimmage
00002B70  6000 0094               3098      bra     checkTurnOverOnDowns
00002B74                          3099  incompletePass
00002B74                          3100      
00002B74  6000 0090               3101      bra     checkTurnoverOnDowns
00002B78                          3102  tackled
00002B78  203C 0002F100           3103      move.l  #(TOUCHBACK_POS)<<8, d0
00002B7E  2206                    3104      move.l  d6, d1
00002B80  0686 00001500           3105      add.l   #(FOOTBALL_HEIGHT)<<8, d6 
00002B86  BC80                    3106      cmp.l   d0, d6                                                                                                                      ;is the bottom of the ball in the endzone?
00002B88  6C00 0050               3107      bge     touchback
00002B8C  4EB9 00003164           3108      jsr     playTackleSound
00002B92  4EB8 2B56               3109      jsr     GetLineOfScrimmage    
00002B96  6000 006E               3110      bra     checkTurnoverOnDowns
00002B9A                          3111  interception
00002B9A  4EB9 00003122           3112      jsr     playInterceptionSound
00002BA0  23F9 0029DDB8 0029DDC4  3113      move.l  playerStartYPos, lineOfScrimmage
00002BAA  23FC 00000064 0029DEC8  3114      move.l  #DOWN_FLASH_TIMER, downFlashDigitTimer
00002BB4  6000 0024               3115      bra     turnoverOnDowns
00002BB8                          3116  touchdown
00002BB8  7000                    3117      move.l  #0, d0
00002BBA  223C 0001BC00           3118      move.l  #(FIFTY_YARD_LINE_LOCATION)<<8, d1
00002BC0  2439 0029DDC4           3119      move.l  lineOfScrimmage, d2
00002BC6  B481                    3120      cmp.l   d1, d2
00002BC8  6D00 0004               3121      blt     noHailMary
00002BCC  7001                    3122      move.l  #1, d0
00002BCE                          3123  noHailMary
00002BCE  4EB9 000030CC           3124      jsr     playTouchdownSound
00002BD4  4EB9 00003002           3125      jsr     updateScore
00002BDA                          3126  touchback
00002BDA                          3127  turnoverOnDowns
00002BDA  13FC 0001 0029DE7E      3128      move.b  #1, downCounter
00002BE2  23F9 0029DDB8 0029DDC4  3129      move.l  playerStartYPos, lineOfScrimmage
00002BEC  2039 0029DDC4           3130      move.l  lineOfScrimmage, d0
00002BF2  0680 00009B00           3131      add.l   #FIRST_DOWN_YARDS, d0
00002BF8  4EB8 1CCC               3132      jsr     coverFirstDownLine 
00002BFC  23C0 0029DDBC           3133      move.l  d0, firstDownLine
00002C02  6000 005A               3134      bra     resetPlay
00002C06                          3135  
00002C06                          3136  checkTurnoverOnDowns
00002C06  23FC 00000064 0029DEC8  3137      move.l  #DOWN_FLASH_TIMER, downFlashDigitTimer
00002C10  5239 0029DE7E           3138      add.b   #1, downCounter
00002C16  4EB9 00002C2A           3139      jsr     checkFirstDown
00002C1C  0C39 0004 0029DE7E      3140      cmp.b   #4, downCounter
00002C24  6EB4                    3141      bgt     turnoverOnDowns
00002C26  6000 0036               3142      bra     resetPlay
00002C2A                          3143  
00002C2A                          3144  checkFirstDown
00002C2A  BCB9 0029DDBC           3145      cmp.l   firstDownLine, d6
00002C30  6E00 E3CE               3146      bgt     RETURN
00002C34  23FC 00000064 0029DEC8  3147      move.l  #DOWN_FLASH_TIMER, downFlashDigitTimer
00002C3E  13FC 0001 0029DE7E      3148      move.b  #1, downCounter
00002C46  4EB8 1CCC               3149      jsr     coverFirstDownLine
00002C4A  2039 0029DDC4           3150      move.l  lineOfScrimmage, d0
00002C50  0480 00009B00           3151      sub.l   #FIRST_DOWN_YARDS, d0
00002C56  23C0 0029DDBC           3152      move.l  d0, firstDownLine
00002C5C                          3153      
00002C5C                          3154  
00002C5C  4E75                    3155      rts
00002C5E                          3156  resetPlay    
00002C5E  0CB9 000022C4 0029DE88  3157      cmp.l   #ROUND_TIME_IN_HUNDREDTHS-100, currentRoundTime
00002C68  6C00 02E8               3158      bge     whistleRestart
00002C6C  4EB8 1C2C               3159      jsr     coverBallUI
00002C70                          3160      
00002C70                          3161      ;set hike debounce
00002C70  23FC 00000023 0029DED4  3162      move.l  #SNAP_DEBOUNCE_TIMER, resetPlayDebounceTimer
00002C7A                          3163      
00002C7A                          3164      ;change drawing to green
00002C7A  7050                    3165      move.l  #SET_PEN_COLOR_COMMAND, d0
00002C7C  223C 0000B05C           3166      move.l  #FIELD_GREEN, d1
00002C82  4E4F                    3167      trap    #15
00002C84  7051                    3168      move.l  #SET_FILL_COLOR_COMMAND, d0
00002C86  4E4F                    3169      trap    #15
00002C88                          3170      
00002C88                          3171      ;cover downCounter
00002C88  727A                    3172      move.l  #DOWN_POSX-1, d1
00002C8A  740A                    3173      move.l  #DOWN_POSY-1, d2
00002C8C  2601                    3174      move.l  d1, d3
00002C8E  0683 00000019           3175      add.l   #25, d3
00002C94  2802                    3176      move.l  d2, d4
00002C96  0684 00000028           3177      add.l   #40, d4                                                                                                                                             ;highest height in display 
00002C9C                          3178      
00002C9C                          3179       
00002C9C                          3180      
00002C9C  7057                    3181      move.l  #DRAW_RECTANGLE_COMMAND, d0
00002C9E  4E4F                    3182      trap    #15
00002CA0                          3183      
00002CA0                          3184      ;reset the ball state
00002CA0  13FC 0003 0029DE7C      3185      move.b  #BALLSTATE_TIMEOUT, ballState
00002CA8  13FC 0000 0029DE5C      3186      move.b  #LINEBACKERSTATE_STRAFE, linebackerState
00002CB0                          3187      ;set all players on offense to line of scrimmage
00002CB0  2C39 0029DDC4           3188      move.l  lineOfScrimmage, d6
00002CB6  2E39 0029DDB4           3189      move.l  playerStartXpos, d7
00002CBC  2486                    3190      move.l  d6, (a2)
00002CBE  26B9 0029DDFC           3191      move.l  receiver2StartXpos, (a3)
00002CC4  2886                    3192      move.l  d6, (a4)
00002CC6  7021                    3193      move.l  #33, d0
00002CC8  4EB8 2C2A               3194      jsr     checkFirstDown
00002CCC  41F9 00003232           3195      lea     backgroundFile, a0
00002CD2  21C8 171C               3196      move.l  a0, fileAddress
00002CD6  4EB8 1F60               3197      jsr     coverOldLineOfScrimmage
00002CDA  23F9 0029DDC4 0029DDC8  3198      move.l  lineOfScrimmage, oldLineOfScrimmage
00002CE4                          3199      
00002CE4                          3200      ;grab the play from the paths.bin
00002CE4  41F9 0029DAA8           3201      lea     paths1, a0
00002CEA                          3202      
00002CEA                          3203      ;get random play in file (offset a0 by this)
00002CEA  4EB8 176A               3204      jsr     getRandomByteIntoD3
00002CEE  E88B                    3205      lsr.l   #4, d3                                                                                                                                               ;get 1-16    
00002CF0  C7FC 0030               3206      muls    #$30, d3
00002CF4  D1C3                    3207      add.l   d3, a0                                                                                                                                              ;add the proper offset
00002CF6                          3208      
00002CF6                          3209      
00002CF6                          3210      ;update the receiver1 start xpos
00002CF6  2039 0029DDDC           3211      move.l  receiver1StartXPos, d0
00002CFC  D090                    3212      add.l   (a0), d0                                                                                                                                              ;grab the receiver x offset
00002CFE  2280                    3213      move.l  d0, (a1)
00002D00                          3214      
00002D00                          3215      ;update the turnPosY for rec
00002D00  2006                    3216      move.l  d6, d0                                                                                                                                                 ;grab line of scrimmage
00002D02  90A8 0004               3217      sub.l   4(a0), d0                                                                                                                                               ;add the position offset (it's positive in the file)
00002D06  23C0 0029DDE4           3218      move.l  d0, receiver1YTurnPos
00002D0C                          3219      
00002D0C                          3220      ;update the receiver velocities
00002D0C  23E8 0008 0029DDE8      3221      move.l  8(a0), receiver1XVel1
00002D14  23E8 000C 0029DDEC      3222      move.l  12(a0), receiver1YVel1
00002D1C  23E8 0010 0029DDF0      3223      move.l  16(a0), receiver1XVel2
00002D24  23E8 0014 0029DDF4      3224      move.l  20(a0), receiver1YVel2
00002D2C                          3225      
00002D2C                          3226      ;update the defender position offsets
00002D2C  2039 0029DDDC           3227      move.l  receiver1StartXPos, d0
00002D32  D0A8 0018               3228      add.l   24(a0), d0
00002D36  23C0 0029DE1C           3229      move.l  d0, defender1XPos
00002D3C  2006                    3230      move.l  d6, d0                                                                                                                                               ;grab line of scrimmage
00002D3E  90A8 001C               3231      sub.l   28(a0), d0                                                                                                                                            ;add the position offset (it's positive in the file)
00002D42  23C0 0029DE20           3232      move.l  d0, defender1YPos
00002D48                          3233      
00002D48                          3234      ;update the defender velocities
00002D48  23E8 0020 0029DE24      3235      move.l  32(a0), defender1XVel1
00002D50  23E8 0024 0029DE28      3236      move.l  36(a0), defender1YVel1
00002D58  23E8 0028 0029DE2C      3237      move.l  40(a0), defender1XVel2
00002D60  23E8 002C 0029DE30      3238      move.l  44(a0), defender1YVel2
00002D68                          3239      
00002D68                          3240      
00002D68                          3241      ;get random play in file (offset a0 by this)
00002D68  41F9 0029DAA8           3242      lea     paths1, a0
00002D6E  4EB8 176A               3243      jsr     getRandomByteIntoD3
00002D72  E88B                    3244      lsr.l   #4, d3                                                                                                                                                  ;get 1-16
00002D74                          3245      
00002D74                          3246      ;move.l #4, d3
00002D74  C7FC 0030               3247      muls    #$30, d3
00002D78  D1C3                    3248      add.l   d3, a0                                                                                                                                                  ;add the proper offset
00002D7A                          3249      
00002D7A                          3250      
00002D7A                          3251      ;update the receiver2 start xpos
00002D7A  2039 0029DDFC           3252      move.l  receiver2StartXPos, d0
00002D80  9090                    3253      sub.l   (a0), d0                                                                                                                                                ;grab the receiver2 x offset
00002D82  2680                    3254      move.l  d0, (a3)
00002D84                          3255      
00002D84                          3256      ;update the turnPosY for rec
00002D84  2006                    3257      move.l  d6, d0                                                                                                                                                  ;grab line of scrimmage
00002D86  90A8 0004               3258      sub.l   4(a0), d0                                                                                                                                               ;add the position offset (it's positive in the file)
00002D8A  23C0 0029DE04           3259      move.l  d0, receiver2YTurnPos
00002D90                          3260      
00002D90                          3261      ;update the receiver velocities
00002D90  2028 0008               3262      move.l  8(a0), d0
00002D94  4480                    3263      neg.l   d0
00002D96  23C0 0029DE08           3264      move.l  d0, receiver2XVel1
00002D9C  23E8 000C 0029DE0C      3265      move.l  12(a0), receiver2YVel1
00002DA4  2028 0010               3266      move.l  16(a0), d0
00002DA8  4480                    3267      neg.l   d0
00002DAA  23C0 0029DE10           3268      move.l  d0, receiver2XVel2
00002DB0  23E8 0014 0029DE14      3269      move.l  20(a0), receiver2YVel2
00002DB8                          3270      
00002DB8                          3271      ;update the defender2 position offsets
00002DB8  2039 0029DDFC           3272      move.l  receiver2StartXPos, d0
00002DBE  90A8 0018               3273      sub.l   24(a0), d0
00002DC2  23C0 0029DE34           3274      move.l  d0, defender2XPos
00002DC8  2006                    3275      move.l  d6, d0                                                                                                                                                  ;grab line of scrimmage
00002DCA  90A8 001C               3276      sub.l   28(a0), d0                                                                                                                                              ;add the position offset (it's positive in the file) 
00002DCE  23C0 0029DE38           3277      move.l  d0, defender2YPos
00002DD4                          3278      
00002DD4                          3279      ;update the defender velocities
00002DD4  2028 0020               3280      move.l  32(a0), d0
00002DD8  4480                    3281      neg.l   d0
00002DDA  23C0 0029DE3C           3282      move.l  d0, defender2XVel1
00002DE0  23E8 0024 0029DE40      3283      move.l  36(a0), defender2YVel1
00002DE8  2028 0028               3284      move.l  40(a0), d0
00002DEC  4480                    3285      neg.l   d0
00002DEE  23C0 0029DE44           3286      move.l  d0, defender2XVel2
00002DF4  23E8 002C 0029DE48      3287      move.l  44(a0), defender2YVel2
00002DFC                          3288      
00002DFC                          3289      
00002DFC                          3290      
00002DFC                          3291      ;update the linebacker position and velocity
00002DFC                          3292      
00002DFC  4EB8 176A               3293      jsr     getRandomByteIntoD3                                                                                                                                     ;get a random offset
00002E00  E18B                    3294      lsl.l   #8, d3                                                                                                                                                  ;make it a bigger offset
00002E02  0CB9 0001DF00 0029DDC4  3295      cmp.l   #SQUISHPOS_1, lineOfScrimmage
00002E0C  6E00 0034               3296      bgt     doneSquishing
00002E10  E28B                    3297      lsr.l   #1, d3 ;127 max
00002E12  0CB9 00015400 0029DDC4  3298      cmp.l   #SQUISHPOS_2, lineOfScrimmage
00002E1C  6E00 0024               3299      bgt     doneSquishing
00002E20  E28B                    3300      lsr.l   #1, d3 ;63 max
00002E22  0CB9 0000BE00 0029DDC4  3301      cmp.l   #SQUISHPOS_3, lineOfScrimmage
00002E2C  6E00 0014               3302      bgt     doneSquishing
00002E30  E28B                    3303      lsr.l   #1, d3 ;31 max
00002E32  0CB9 0000B400 0029DDC4  3304      cmp.l   #SQUISHPOS_4, lineOfScrimmage
00002E3C  6E00 0004               3305      bgt     doneSquishing
00002E40  E68B                    3306      lsr.l   #3, d3
00002E42                          3307  doneSquishing    
00002E42                          3308      
00002E42  0683 00005000           3309      add.l   #SHOTGUN_OFFSET_1, d3
00002E48                          3310      
00002E48  2839 0029DDC4           3311      move.l  lineOfScrimmage, d4
00002E4E  9883                    3312      sub.l   d3, d4                                                                                                                                                  ;move the linebacker off of the offset
00002E50  23C4 0029DE50           3313      move.l  d4, lineBackerYPos
00002E56  23C7 0029DE4C           3314      move.l  d7, linebackerXPos
00002E5C                          3315      
00002E5C  23FC 00000000 0029DE54  3316      move.l  #0, linebackerXVel
00002E66  23FC 00000000 0029DE58  3317      move.l  #0, linebackerYVel
00002E70                          3318      
00002E70                          3319      
00002E70                          3320      
00002E70                          3321      ;move the QB back a bit
00002E70  0686 00005000           3322      add.l   #SHOTGUN_OFFSET_1, d6
00002E76  2006                    3323      move.l  d6, d0
00002E78  B0BC 0002F100           3324      cmp.l   #(TOUCHBACK_POS)<<8, d0
00002E7E  6D00 0008               3325      blt     normalOffset
00002E82  0486 00003200           3326      sub.l   #SHOTGUN_OFFSET_2, d6
00002E88                          3327  normalOffset
00002E88                          3328  
00002E88                          3329      ;reset player velocities
00002E88  2A3C 01000000           3330      move.l  #DROPBACK_VELOCITY_Y, d5
00002E8E  BCBC 0002F500           3331      cmp.l   #(NEAR_ENDZONE_POS)<<8, d6    
00002E94  6D00 0004               3332      blt     dontDropback
00002E98  7A00                    3333      move.l  #0, d5
00002E9A                          3334  dontDropback
00002E9A                          3335      
00002E9A                          3336      ;reset football position
00002E9A  23FC 00000000 0029DE60  3337      move.l  #0, ballSpeedX
00002EA4  23FC 00000000 0029DE64  3338      move.l  #0, ballSpeedY
00002EAE  23C7 0029DE68           3339      move.l  d7, ballPosX
00002EB4  23C6 0029DE6C           3340      move.l  d6, ballPosY
00002EBA  4E75                    3341      rts
00002EBC                          3342  startGame   
00002EBC  4EB9 0000307C           3343      jsr     stopAllSoundsNonTrap
00002EC2  4EB9 00003180           3344      jsr     playWhistleSound
00002EC8  4EB9 00003148           3345      jsr     playLevelTheme
00002ECE  23FC 00000000 0029DE88  3346      move.l  #0, currentRoundTime
00002ED8  23FC 00000064 0029DEC8  3347      move.l  #DOWN_FLASH_TIMER, downFlashDigitTimer
00002EE2  23FC 00000064 0029DEC4  3348      move.l  #SCORE_FLASH_TIMER, scoreFlashDigitTimer
00002EEC  23FC 00000064 0029DECC  3349      move.l  #TIMER_FLASH_TIMER, timerFlashDigitTimer
00002EF6  41F9 00003232           3350      lea     backgroundFile, a0
00002EFC  21C8 171C               3351      move.l  a0, fileAddress
00002F00  4EB9 0029DF84           3352      jsr     initPlayers
00002F06  23F9 0029DDB8 0029DDC8  3353      move.l  playerStartYPos, oldLineOfScrimmage    
00002F10  4EB8 2C5E               3354      jsr     resetPlay
00002F14  13FC 0000 0029DE7F      3355      move.b  #0, score  
00002F1C  0C39 0000 0029DE82      3356      cmp.b   #0, highscore  
00002F24  6600 000A               3357      bne     dontResetHighScore
00002F28  13FC 0000 0029DE82      3358      move.b  #0, highscore
00002F30                          3359  dontResetHighscore
00002F30  0C39 0000 0029DE83      3360      cmp.b   #0, lastScore
00002F38  6600 000A               3361      bne     dontResetLastScore
00002F3C  13FC 0000 0029DE83      3362      move.b  #0, lastScore
00002F44                          3363  dontResetLastScore
00002F44  13FC 0001 0029DE7D      3364      move.b  #GAMESTATE_CLEAR_MENU, gameState
00002F4C  4EB8 1D7A               3365      jsr drawScore
00002F50  4E75                    3366      rts
00002F52                          3367  whistleRestart
00002F52                          3368  restartGame 
00002F52  4EB9 0000307C           3369      jsr     stopAllSoundsNonTrap
00002F58  4EB9 00003180           3370      jsr     playWhistleSound
00002F5E  4EB9 0000313A           3371      jsr     playMenuTheme
00002F64  7000                    3372      move.l  #0, d0
00002F66  1039 0029DE82           3373      move.b  highscore, d0
00002F6C  B039 0029DE7F           3374      cmp.b   score, d0
00002F72  6E00 000C               3375      bgt     dontSetHighscore
00002F76  13F9 0029DE7F 0029DE82  3376      move.b  score, highScore
00002F80                          3377  dontSetHighScore    
00002F80  13F9 0029DE7F 0029DE83  3378      move.b  score, lastScore
00002F8A  13FC 0000 0029DE7F      3379      move.b  #0, score
00002F92  23FC 00000000 0029DE88  3380      move.l  #0, currentRoundTime
00002F9C  23F9 0029DDB8 0029DDC4  3381      move.l  playerStartYPos, lineOfScrimmage
00002FA6  23FC 00000064 0029DEC8  3382      move.l  #DOWN_FLASH_TIMER, downFlashDigitTimer
00002FB0  23FC 00000064 0029DEC4  3383      move.l  #SCORE_FLASH_TIMER, scoreFlashDigitTimer
00002FBA  23FC 00000064 0029DECC  3384      move.l  #TIMER_FLASH_TIMER, timerFlashDigitTimer
00002FC4  4EB8 1CCC               3385      jsr     coverFirstDownLine
00002FC8  4EB9 0029DF84           3386      jsr     initPlayers
00002FCE  4EB8 2C5E               3387      jsr     resetPlay
00002FD2  13FC 0003 0029DE7D      3388      move.b  #GAMESTATE_DRAW_MENU, gameState
00002FDA  4EB8 1D7A               3389      jsr drawScore
00002FDE  4E75                    3390      rts
00002FE0                          3391  caughtPass
00002FE0                          3392      ;set ball state
00002FE0  4EB8 1C2C               3393      jsr     coverBallUI
00002FE4  13FC 0002 0029DE7C      3394      move.b  #BALLSTATE_CAUGHT, ballState
00002FEC  23FC 00000000 0029DE60  3395      move.l  #0, ballSpeedX
00002FF6  23FC 00000000 0029DE64  3396      move.l  #0, ballSpeedY
00003000  4E75                    3397      rts 
00003002                          3398  
00003002                          3399  
00003002                          3400  updateScore
00003002  7600                    3401      move.l  #0, d3
00003004  1639 0029DE7F           3402      move.b  score, d3
0000300A  5E03                    3403      add.b   #7, d3    
0000300C  13C3 0029DE7F           3404      move.b  d3, score
00003012  23FC 00000064 0029DEC4  3405      move.l  #SCORE_FLASH_TIMER, scoreFlashDigitTimer
0000301C  4EB8 1D7A               3406      jsr     drawScore
00003020  4E75                    3407      rts
00003022                          3408  
00003022                          3409  
00003022                          3410  
00003022                          3411  
00003022                          3412  
00003022                          3413  
00003022                          3414  -------------------- end include --------------------
00003022                          3415      include 'Audio.x68'    
00003022                          3416      ;ORG $1000
00003022  =00000000               3417  LEVEL_THEME_SOUND_REF   equ 0
00003022  =00000001               3418  SOUND_1_REF             equ 1
00003022  =00000002               3419  MENU_THEME_SOUND_REF    equ 2
00003022  =00000003               3420  TOUCHDOWN_SOUND_REF     equ 3
00003022  =00000004               3421  SNAP_SOUND_REF          equ 4
00003022  =00000005               3422  CATCH_SOUND_REF         equ 5
00003022  =00000006               3423  FIRST_DOWN_SOUND_REF    equ 6
00003022  =00000007               3424  INTERCEPTION_SOUND_REF  equ 7
00003022  =00000008               3425  THROW_SOUND_REF         equ 8
00003022  =00000009               3426  TACKLE_SOUND_REF        equ 9
00003022  =0000000A               3427  HAIL_MARY_SOUND_REF     equ 10
00003022  =0000000A               3428  WHISTLE_SOUND_REF       equ 10
00003022  =0000000C               3429  NUM_SOUNDS              equ 12           
00003022                          3430  ;requires a1, d0-d2
00003022                          3431  PlaySound1:                             ;nonLooping
00003022  48E7 E040               3432      movem.l D0-D2/A1, -(sp)    
00003026  1239 00003230           3433      move.b  soundMemoryAddress, d1      ;store memory location of sound in d1
0000302C                          3434  
0000302C  43F9 000031B6           3435      lea     sound1, a1
00003032  103C 004A               3436      move.b  #74, d0
00003036  4E4F                    3437      trap    #15         
00003038                          3438      
00003038  103C 004D               3439      move.b  #77, d0                     ;control directX player
0000303C  143C 0000               3440      move.b  #0, d2                      ;play looping sound (1), play nonLooping sound (0)
00003040  4E4F                    3441      trap    #15                         ;play sound at d1
00003042                          3442          
00003042  4CDF 0207               3443      movem.l (sp)+, D0-D2/A1    
00003046  4E75                    3444      rts
00003048                          3445  
00003048                          3446  playNonLoopingSound:
00003048  48E7 0040               3447      movem.l a1, -(sp)
0000304C  2248                    3448      move.l  a0, a1
0000304E  704A                    3449      move.l  #74, d0
00003050  4E4F                    3450      trap    #15
00003052                          3451     
00003052  704D                    3452      move.l  #77, d0                     ;control directX player
00003054  7400                    3453      move.l  #0, d2                      ;play looping sound (1), play nonLooping sound (0)
00003056  4E4F                    3454      trap    #15                         ;play sound at d1
00003058  4CDF 0200               3455      movem.l (sp)+, a1 
0000305C  4E75                    3456      rts
0000305E                          3457  
0000305E                          3458  ;takes in a0 as the theme, d1 as memory ref 
0000305E                          3459  playLoopingSound:
0000305E  48E7 0040               3460      movem.l a1, -(sp)
00003062  2248                    3461      move.l  a0, a1
00003064  704A                    3462      move.l  #74, d0
00003066  4E4F                    3463      trap    #15
00003068                          3464     
00003068  704D                    3465      move.l  #77, d0                     ;control directX player
0000306A  7401                    3466      move.l  #1, d2                      ;play looping sound (1), play nonLooping sound (0)
0000306C  4E4F                    3467      trap    #15                         ;play sound at d1
0000306E  4CDF 0200               3468      movem.l (sp)+, a1    
00003072  4E75                    3469      rts
00003074                          3470  
00003074                          3471  ;d1 as memory ref
00003074                          3472  stopSound
00003074  704D                    3473      move.l  #77, d0                     ;control directX player
00003076  7402                    3474      move.l  #2, d2                      ;stop sound (1), play nonLooping sound (0)
00003078  4E4F                    3475      trap    #15                         ;play sound at d1
0000307A  4E75                    3476      rts
0000307C                          3477  
0000307C                          3478  stopAllSoundsNonTrap
0000307C  48E7 E000               3479      movem.l d0-d2, -(sp)
00003080  7600                    3480      move.l  #0, d3
00003082                          3481  loopStopSounds
00003082  704D                    3482      move.l  #77, d0
00003084  2203                    3483      move.l  d3, d1
00003086  7402                    3484      move.l  #2, d2
00003088  4E4F                    3485      trap    #15
0000308A  5283                    3486      add.l   #1, d3
0000308C  B6BC 0000000C           3487      cmp.l   #NUM_SOUNDS, d3
00003092  66EE                    3488      bne     loopStopSounds
00003094  4CDF 0007               3489      movem.l (sp)+, d0-d2
00003098  4E75                    3490      rts
0000309A                          3491  stopAllSounds
0000309A  48E7 E000               3492      movem.l d0-d2, -(sp)
0000309E  704D                    3493      move.l  #77, d0
000030A0  7200                    3494      move.l  #0, d1
000030A2  7403                    3495      move.l  #3, d2
000030A4  4E4F                    3496      trap    #15
000030A6                          3497      
000030A6  4CDF 0007               3498      movem.l (sp)+, d0-d2
000030AA  4E75                    3499      rts
000030AC                          3500  stopLevelTheme
000030AC  48E7 E000               3501      movem.l d0-d2, -(sp)
000030B0  7200                    3502      move.l  #LEVEL_THEME_SOUND_REF, d1
000030B2  4EB8 3074               3503      jsr     stopSound
000030B6  4CDF 0007               3504      movem.l (sp)+, d0-d2
000030BA  4E75                    3505      rts
000030BC                          3506  stopMenuTheme
000030BC  48E7 E000               3507      movem.l d0-d2, -(sp)
000030C0  7202                    3508      move.l  #MENU_THEME_SOUND_REF, d1
000030C2  4EB8 3074               3509      jsr     stopSound
000030C6  4CDF 0007               3510      movem.l (sp)+, d0-d2
000030CA  4E75                    3511      rts
000030CC                          3512  playTouchdownSound
000030CC  4EB9 0000318E           3513      jsr     stopThrowSound
000030D2  B0BC 00000001           3514      cmp.l   #1, d0
000030D8  6600 000A               3515      bne     noHailMarySound
000030DC  4EB9 00003172           3516      jsr     playHailMarySound
000030E2  4E75                    3517      rts
000030E4                          3518  noHailMarySound
000030E4  7203                    3519      move.l  #TOUCHDOWN_SOUND_REF, d1
000030E6  41F9 000031C3           3520      lea     touchdownSound, a0
000030EC  4EB8 3048               3521      jsr     playNonLoopingSound
000030F0  4E75                    3522      rts
000030F2                          3523  playSnapSound
000030F2  7204                    3524      move.l  #SNAP_SOUND_REF, d1
000030F4  41F9 000031E6           3525      lea     snapSound, a0
000030FA  4EB8 3048               3526      jsr     playNonLoopingSound
000030FE  4E75                    3527      rts
00003100                          3528  playCatchSound
00003100  4EB9 0000318E           3529      jsr     stopThrowSound
00003106  7205                    3530      move.l  #CATCH_SOUND_REF, d1
00003108  41F9 000031FC           3531      lea     catchSound, a0
0000310E  4EB8 3048               3532      jsr     playNonLoopingSound
00003112  4E75                    3533      rts
00003114                          3534  playFirstDownSound
00003114  7206                    3535      move.l  #FIRST_DOWN_SOUND_REF, d1
00003116  41F9 000031EF           3536      lea     firstDownSound, a0
0000311C  4EB8 3048               3537      jsr     playNonLoopingSound
00003120  4E75                    3538      rts
00003122                          3539  playInterceptionSound
00003122  4EB9 0000318E           3540      jsr     stopThrowSound
00003128  4EB8 3100               3541      jsr     playCatchSound
0000312C  7207                    3542      move.l  #INTERCEPTION_SOUND_REF, d1
0000312E  41F9 00003206           3543      lea     interceptionSound, a0
00003134  4EB8 3048               3544      jsr     playNonLoopingSound
00003138  4E75                    3545      rts
0000313A                          3546  playMenuTheme
0000313A  7202                    3547      move.l  #MENU_THEME_SOUND_REF, d1
0000313C  41F9 0000319E           3548      lea     menuTheme, a0
00003142  4EB8 305E               3549      jsr     PlayLoopingSound
00003146  4E75                    3550      rts
00003148                          3551  playLevelTheme
00003148  7200                    3552      move.l  #LEVEL_THEME_SOUND_REF, d1   ;store memory location of sound in d1
0000314A  41F9 000031AC           3553      lea     levelTheme, a0
00003150  4EB8 305E               3554      jsr     PlayLoopingSound
00003154  4E75                    3555      rts
00003156                          3556  playThrowSound
00003156  7208                    3557      move.l  #THROW_SOUND_REF, d1
00003158  41F9 000031D1           3558      lea     throwSound, a0
0000315E  4EB8 3048               3559      jsr     playNonLoopingSound
00003162  4E75                    3560      rts
00003164                          3561  playTackleSound
00003164  7209                    3562      move.l  #TACKLE_SOUND_REF, d1
00003166  41F9 000031DB           3563      lea     tackleSound, a0
0000316C  4EB8 3048               3564      jsr     playNonLoopingSound
00003170  4E75                    3565      rts
00003172                          3566  playHailMarySound
00003172  720A                    3567      move.l  #HAIL_MARY_SOUND_REF, d1
00003174  41F9 00003217           3568      lea     hailMarySound, a0
0000317A  4EB8 3048               3569      jsr     playNonLoopingSound
0000317E  4E75                    3570      rts
00003180                          3571  playWhistleSound
00003180  720A                    3572      move.l  #WHISTLE_SOUND_REF, d1
00003182  41F9 00003224           3573      lea     whistleSound, a0
00003188  4EB8 3048               3574      jsr     playNonLoopingSound
0000318C  4E75                    3575      rts
0000318E                          3576  stopThrowSound
0000318E  48E7 E000               3577      movem.l d0-d2, -(sp)
00003192  7208                    3578      move.l  #THROW_SOUND_REF, d1
00003194  4EB8 3074               3579      jsr     stopSound
00003198  4CDF 0007               3580      movem.l (sp)+, d0-d2
0000319C  4E75                    3581      rts
0000319E                          3582  
0000319E= 6D 65 6E 75 54 68 ...   3583  menuTheme           dc.b    'menuTheme.wav', 0
000031AC= 63 72 6F 77 64 2E ...   3584  levelTheme          dc.b    'crowd.wav', 0
000031B6= 6D 75 73 68 72 6F ...   3585  sound1              dc.b    'mushroom.wav', 0
000031C3= 74 6F 75 63 68 64 ...   3586  touchdownSound      dc.b    'touchdown.wav', 0
000031D1= 74 68 72 6F 77 2E ...   3587  throwSound          dc.b    'throw.wav', 0
000031DB= 74 61 63 6B 6C 65 ...   3588  tackleSound         dc.b    'tackle.wav', 0
000031E6= 68 69 6B 65 2E 77 ...   3589  snapSound           dc.b    'hike.wav', 0
000031EF= 6D 75 73 68 72 6F ...   3590  firstDownSound      dc.b    'mushroom.wav', 0
000031FC= 63 61 74 63 68 2E ...   3591  catchSound          dc.b    'catch.wav', 0
00003206= 69 6E 74 65 72 63 ...   3592  interceptionSound   dc.b    'interception.wav', 0
00003217= 68 61 69 6C 4D 61 ...   3593  hailMarySound       dc.b    'hailMary.wav', 0
00003224= 77 68 69 73 74 6C ...   3594  whistleSound        dc.b    'whistle.wav', 0
00003230= 00                      3595  soundMemoryAddress  dc.b    0
00003231= 00                      3596  dummyByte           dc.b    0
00003232                          3597  
00003232                          3598  
00003232                          3599  
00003232                          3600  
00003232                          3601  
00003232                          3602  
00003232                          3603  
00003232                          3604  
00003232                          3605  
00003232                          3606  
00003232                          3607  
00003232                          3608  -------------------- end include --------------------
00003232                          3609      include 'variables.x68'
00003232                          3610  
00003232                          3611  backgroundFile              INCBIN "footballfield3.bmp"
0018CE68                          3612  veteranRules                INCBIN "veteranRules.bmp"
002031B0                          3613  noobRules                   INCBIN "noobRules.bmp"
002794F8                          3614  highscoreDude               INCBIN "highscoreDude.bmp"
0028B7D0                          3615  yourscoreDude               INCBIN "yourscoreDude.bmp"
0029DAA8                          3616  paths1                      INCBIN "paths1.bin"
0029DDA8= 00                      3617  lastWinput                  dc.b 0
0029DDA9= 00                      3618  lastAinput                  dc.b 0
0029DDAA= 00                      3619  lastSinput                  dc.b 0
0029DDAB= 00                      3620  lastDinput                  dc.b 0
0029DDAC                          3621  
0029DDAC= FFFFFFF0                3622  PLAYER_MIN_X_SPEED          dc.l $FFFFFFF0
0029DDB0= FFFFFFF0                3623  PLAYER_MIN_Y_SPEED          dc.l $FFFFFFF0
0029DDB4                          3624  
0029DDB4                          3625      
0029DDB4= 00013000                3626  playerStartXpos             dc.l $13000
0029DDB8= 00027600                3627  playerStartYpos             dc.l $27600
0029DDBC= 0001F900                3628  firstDownLine               dc.l $1F900
0029DDC0= 0001F900                3629  oldFirstDownLine            dc.l $1F900
0029DDC4= 00027600                3630  lineOfScrimmage             dc.l $27600
0029DDC8= 00028000                3631  oldLineOfScrimmage          dc.l $28000
0029DDCC                          3632      
0029DDCC= 00008000                3633  receiver1XPos               dc.l $8000
0029DDD0= 00028000                3634  receiver1YPos               dc.l $28000
0029DDD4                          3635  
0029DDD4= 00020000                3636  receiver2XPos               dc.l $20000
0029DDD8= 00028000                3637  receiver2YPos               dc.l $28000
0029DDDC                          3638  
0029DDDC= 00006500                3639  receiver1StartXPos          dc.l $6500
0029DDE0= 00028000                3640  receiver1StartYPos          dc.l $28000
0029DDE4= 00020000                3641  receiver1YTurnPos           dc.l $20000
0029DDE8= 00000000                3642  receiver1XVel1              dc.l $00000000
0029DDEC= FFFFFEFF                3643  receiver1YVel1              dc.l $FFFFFEFF
0029DDF0= 00000100                3644  receiver1XVel2              dc.l $00000100
0029DDF4= 00000000                3645  receiver1YVel2              dc.l $00000000
0029DDF8= 00000000                3646  receiver1YVel3              dc.l $00000000
0029DDFC                          3647  
0029DDFC= 00020000                3648  receiver2StartXPos          dc.l $20000
0029DE00= 00028000                3649  receiver2StartYPos          dc.l $28000
0029DE04= 00200000                3650  receiver2YTurnPos           dc.l $200000
0029DE08= 00000000                3651  receiver2XVel1              dc.l $00000000
0029DE0C= FFFFFEFF                3652  receiver2YVel1              dc.l $FFFFFEFF
0029DE10= 00000100                3653  receiver2XVel2              dc.l $00000100
0029DE14= 00000000                3654  receiver2YVel2              dc.l $00000000
0029DE18= 00000000                3655  receiver2Yvel3              dc.l $00000000
0029DE1C                          3656  
0029DE1C= 00006500                3657  defender1XPos               dc.l $6500
0029DE20= 00020000                3658  defender1YPos               dc.l $20000
0029DE24= 00000000                3659  defender1XVel1              dc.l $00000000
0029DE28= FFFFFEFF                3660  defender1YVel1              dc.l $FFFFFEFF
0029DE2C= 00000100                3661  defender1XVel2              dc.l $00000100
0029DE30= 00000000                3662  defender1YVel2              dc.l $00000000
0029DE34                          3663  
0029DE34= 00008000                3664  defender2XPos               dc.l $8000
0029DE38= 00020000                3665  defender2YPos               dc.l $20000
0029DE3C= 00000000                3666  defender2XVel1              dc.l $00000000
0029DE40= FFFFFEFF                3667  defender2YVel1              dc.l $FFFFFEFF
0029DE44= 00000100                3668  defender2XVel2              dc.l $00000100
0029DE48= 00000000                3669  defender2YVel2              dc.l $00000000
0029DE4C                          3670  
0029DE4C= 00000800                3671  linebackerXPos              dc.l $800
0029DE50= 00020000                3672  linebackerYPos              dc.l $20000
0029DE54= 00000000                3673  linebackerXVel              dc.l $00000000
0029DE58= FFFFFEFF                3674  linebackerYVel              dc.l $FFFFFEFF
0029DE5C                          3675  
0029DE5C= 00000000                3676  linebackerState             dc.l 0
0029DE60                          3677  
0029DE60= 00000000                3678  ballSpeedX                  dc.l  0
0029DE64= 00000000                3679  ballSpeedY                  dc.l 0
0029DE68                          3680  
0029DE68= 00000000                3681  ballPosX                    dc.l 0
0029DE6C= 00000000                3682  ballPosY                    dc.l 0
0029DE70                          3683  
0029DE70                          3684  
0029DE70= 00000000                3685  lastTime                    dc.l 0
0029DE74= 00000000                3686  deltaTime                   dc.l 0
0029DE78= 00000000                3687  deltaTimeForMultiplication  dc.l 0
0029DE7C                          3688  
0029DE7C                          3689  ;bytes
0029DE7C                          3690  
0029DE7C                          3691  ;0 carried by qb, 1 thrown, 2 caught by receiver 
0029DE7C= 00                      3692  ballState                   dc.b 0
0029DE7D= 00                      3693  gameState                   dc.b 0
0029DE7E= 01                      3694  downCounter                 dc.b 1
0029DE7F= 00                      3695  score                       dc.b 0
0029DE80                          3696  
0029DE80= 00                      3697  timerSeconds                dc.b 0
0029DE81= 03                      3698  timerMinutes                dc.b 3 
0029DE82                          3699  
0029DE82= 00                      3700  highScore                   dc.b 0
0029DE83= 00                      3701  lastScore                   dc.b 0
0029DE84                          3702  
0029DE84= 00                      3703  wWasPressed                 dc.b 0
0029DE85= 00                      3704  aWasPressed                 dc.b 0
0029DE86= 00                      3705  sWasPressed                 dc.b 0
0029DE87= 00                      3706  dWasPressed                 dc.b 0
0029DE88                          3707  
0029DE88= 00000000                3708  currentRoundTime            dc.l 0
0029DE8C= 00000000                3709  playTimer                   dc.l 0
0029DE90= 00000000                3710  pathTimer                   dc.l 0
0029DE94                          3711  
0029DE94= 00000000                3712  path1X1                     dc.l 0
0029DE98= 00000000                3713  path1Y1                     dc.l 0
0029DE9C= 00000000                3714  path1X2                     dc.l 0
0029DEA0= 00000000                3715  path1Y2                     dc.l 0
0029DEA4= 00000000                3716  path1X3                     dc.l 0
0029DEA8= 00000000                3717  path1Y3                     dc.l 0
0029DEAC                          3718  
0029DEAC= 00000000                3719  path2X1                     dc.l 0
0029DEB0= 00000000                3720  path2Y1                     dc.l 0
0029DEB4= 00000000                3721  path2X2                     dc.l 0
0029DEB8= 00000000                3722  path2Y2                     dc.l 0  
0029DEBC= 00000000                3723  path2X3                     dc.l 0  
0029DEC0= 00000000                3724  path2Y3                     dc.l 0
0029DEC4                          3725  
0029DEC4= 00000000                3726  scoreflashDigitTimer        dc.l 0
0029DEC8= 00000000                3727  downflashDigitTimer         dc.l 0
0029DECC= 00000000                3728  timerflashDigitTimer        dc.l 0
0029DED0= 00000000                3729  snapDebounceTimer           dc.l 0
0029DED4= 00000000                3730  resetPlayDebounceTimer      dc.l 0
0029DED8                          3731       
0029DED8= 00000000                3732  oldUIX1                     dc.l 0
0029DEDC= 00000000                3733  oldUIY1                     dc.l 0
0029DEE0= 00000001                3734  oldUIX2                     dc.l 1
0029DEE4= 00000001                3735  oldUIY2                     dc.l 1       
0029DEE8                          3736  
0029DEE8                          3737  -------------------- end include --------------------
0029DEE8                          3738  
0029DEE8                          3739      
0029DEE8                          3740      
0029DEE8                          3741  START:              
0029DEE8                          3742      
0029DEE8                          3743      
0029DEE8  4EB9 0029DF70           3744      jsr     setScreenResolution
0029DEEE                          3745      
0029DEEE                          3746      *set double buffered mode
0029DEEE  103C 005C               3747      move.b  #DRAWING_MODE_TRAP_CODE,d0
0029DEF2  123C 0011               3748      move.b  #DOUBLE_BUFFERED_MODE,d1
0029DEF6  4E4F                    3749      trap    #15 
0029DEF8                          3750      
0029DEF8                          3751  
0029DEF8                          3752  
0029DEF8  4EB9 0029DF36           3753      jsr     loadBackground    
0029DEFE                          3754      ;jsr     playLevelTheme
0029DEFE  4EB8 2F52               3755      jsr     restartGame
0029DF02                          3756  
0029DF02  4EB8 1752               3757      jsr     seedRandomNumber
0029DF06  4EB9 0029DFE0           3758      jsr     initTime  
0029DF0C                          3759        
0029DF0C                          3760  GAME_LOOP
0029DF0C  4EB9 0029DFEA           3761      jsr     updateTime
0029DF12  4EB8 1B4A               3762      jsr     redrawBackgroundPieces
0029DF16  4EB8 21C8               3763      jsr     getInput
0029DF1A  4EB8 24C2               3764      jsr     updateReceivers             ;also calls update player
0029DF1E  4EB8 1F86               3765      jsr     drawStuff
0029DF22  4EB9 0029DF2E           3766      jsr     swapBuffers
0029DF28  60E2                    3767      bra     GAME_LOOP
0029DF2A                          3768      
0029DF2A  FFFF FFFF               3769      SIMHALT
0029DF2E                          3770     
0029DF2E                          3771  swapBuffers
0029DF2E  103C 005E               3772      move.b  #REPAINT_SCREEN_TRAP_CODE,d0 
0029DF32  4E4F                    3773      Trap    #15
0029DF34  4E75                    3774      rts        
0029DF36                          3775  
0029DF36                          3776      
0029DF36                          3777  loadBackground:
0029DF36                          3778      ;load variables
0029DF36  41F8 3232               3779      lea     backgroundFile, a0
0029DF3A  21C8 171C               3780      move.l  a0, fileAddress
0029DF3E  21FC 00000280 1720      3781      move.l  #OUTPUT_WIDTH, widthOfPiece
0029DF46  21FC 00000348 1724      3782      move.l  #OUTPUT_HEIGHT, heightOfPiece
0029DF4E  21FC 00000000 1728      3783      move.l  #0, xPosOfPiece
0029DF56  21FC 00000000 172C      3784      move.l  #0, yPosOfPiece
0029DF5E  31FC 0000 1730          3785      move.w  #0, screenX
0029DF64  31FC 0000 1732          3786      move.w  #0, screenY
0029DF6A  4EB8 136A               3787      jsr     drawBitmapPiece
0029DF6E  4E75                    3788      rts
0029DF70                          3789  setScreenResolution:
0029DF70  103C 0021               3790      move.b  #SET_OUTPUT_RESOLUTION_TRAP_CODE,D0
0029DF74  223C 00000280           3791      move.l  #OUTPUT_WIDTH,d1
0029DF7A  4841                    3792      swap.w  d1
0029DF7C  323C 0348               3793      move.w  #OUTPUT_HEIGHT,d1
0029DF80  4E4F                    3794      TRAP    #15    
0029DF82  4E75                    3795      rts    
0029DF84                          3796      
0029DF84                          3797  initPlayers:
0029DF84                          3798      *initialize x position and x velocity
0029DF84  2E39 0029DDB4           3799      move.l  playerStartXPos,d7
0029DF8A                          3800      
0029DF8A                          3801      *set ball y position and height
0029DF8A  2C39 0029DDB8           3802      move.l  playerStartYpos, d6
0029DF90  2806                    3803      move.l  d6,d4
0029DF92  0684 0000001E           3804      add.l   #PLAYER_HEIGHT,d4
0029DF98                          3805      
0029DF98  43F9 0029DDCC           3806      lea     receiver1Xpos, a1
0029DF9E  45F9 0029DDD0           3807      lea     receiver1Ypos, a2
0029DFA4  47F9 0029DDD4           3808      lea     receiver2Xpos, a3
0029DFAA  49F9 0029DDD8           3809      lea     receiver2Ypos, a4
0029DFB0                          3810      
0029DFB0                          3811  
0029DFB0                          3812      
0029DFB0                          3813      ;set football start position
0029DFB0  2039 0029DE68           3814      move.l  ballPosX, d0
0029DFB6  D087                    3815      add.l   d7, d0
0029DFB8  23C0 0029DE68           3816      move.l  d0, ballPosX
0029DFBE  2039 0029DE6C           3817      move.l  ballPosY, d0
0029DFC4  D086                    3818      add.l   d6, d0
0029DFC6  23C0 0029DE6C           3819      move.l  d0, ballPosY
0029DFCC                          3820      
0029DFCC                          3821      ;reset first down
0029DFCC  2006                    3822      move.l  d6, d0
0029DFCE  0680 00009B00           3823      add.l   #FIRST_DOWN_YARDS, d0
0029DFD4  23C0 0029DDBC           3824      move.l  d0, firstDownLine
0029DFDA  4EB8 2C5E               3825      jsr     resetPlay
0029DFDE  4E75                    3826      rts
0029DFE0                          3827  initTime
0029DFE0  7008                    3828      move.l  #TIME_SINCE_MIDNIGHT_CODE, d0
0029DFE2  4E4F                    3829      trap    #15
0029DFE4  23C1 0029DE70           3830      move.l  d1, lastTime
0029DFEA                          3831  updateTime
0029DFEA  7008                    3832      move.l  #TIME_SINCE_MIDNIGHT_CODE, d0
0029DFEC  4E4F                    3833      trap    #15
0029DFEE                          3834      
0029DFEE                          3835      ;get the delta time
0029DFEE  2639 0029DE70           3836      move.l  lastTime, d3
0029DFF4  23C1 0029DE70           3837      move.l  d1, lastTime 
0029DFFA  9283                    3838      sub.l   d3, d1            
0029DFFC  23C1 0029DE74           3839      move.l  d1, deltaTime
0029E002  0C39 0003 0029DE7C      3840      cmp.b   #BALLSTATE_TIMEOUT, ballState
0029E00A  6700 0008               3841      beq     dontTickTimer
0029E00E  D3B9 0029DE88           3842      add.l   d1, currentRoundTime 
0029E014                          3843  dontTickTimer
0029E014  0CB9 00000000 0029DEC4  3844      cmp.l   #0, scoreFlashDigitTimer
0029E01E  6F00 0008               3845      ble     dontUpdateScoreFlashtimer
0029E022  93B9 0029DEC4           3846      sub.l   d1, scoreflashDigitTimer
0029E028                          3847  dontUpdateScoreFlashtimer
0029E028  0CB9 00000000 0029DEC8  3848      cmp.l   #0, downFlashDigitTimer
0029E032  6F00 0008               3849      ble     dontUpdateDownFlashtimer
0029E036  93B9 0029DEC8           3850      sub.l   d1, downflashDigitTimer
0029E03C                          3851  dontUpdateDownFlashtimer
0029E03C  0CB9 00000000 0029DECC  3852      cmp.l   #0, timerFlashDigitTimer
0029E046  6F00 0008               3853      ble     dontUpdateTimerFlashtimer
0029E04A  93B9 0029DECC           3854      sub.l   d1, timerflashDigitTimer
0029E050                          3855  dontUpdatetimerFlashtimer
0029E050  93B9 0029DED0           3856      sub.l   d1, snapDebounceTimer
0029E056  93B9 0029DED4           3857      sub.l   d1, resetPlayDebounceTimer
0029E05C                          3858  
0029E05C  4E75                    3859      rts
0029E05E                          3860  
0029E05E                          3861      
0029E05E                          3862  EXIT_GAME:
0029E05E  FFFF FFFF               3863      SIMHALT             
0029E062                          3864  
0029E062                          3865  * Put variables and constants here
0029E062                          3866  
0029E062                          3867            
0029E062                          3868      END    START      

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_REG             7FFF
AWASPRESSED         29DE85
BACKGROUNDFILE      3232
BADGUYS             77E0
BALLOUTOFPLAYCHECK  2B2A
BALLPOSX            29DE68
BALLPOSY            29DE6C
BALLSPEEDX          29DE60
BALLSPEEDY          29DE64
BALLSTATE           29DE7C
BALLSTATE_CAUGHT    2
BALLSTATE_FLY       1
BALLSTATE_QB        0
BALLSTATE_TIMEOUT   3
BALL_FLIGHT_DIST    1FE
BALL_Y_SPEED_BASE   FFFFFEE0
BLITZ               289E
BLITZHORZ           28B0
BLUE                FF0000
BOTTOMPIECEBOUNDARY  174E
BOTTOM_OF_FIELD     339
CALCULATEMINUTES    1D14
CATCHSOUND          31FC
CATCH_SOUND_REF     5
CAUGHTPASS          2FE0
CHASE_SPEED_DOWN    77
CHASE_SPEED_LEFT    FFFFFF80
CHASE_SPEED_RIGHT   80
CHASE_SPEED_UP      FFFFFF85
CHECKAINPUT         2278
CHECKBALLCOLLISION  17EA
CHECKCOLLISIONWITHPLAYER  17AC
CHECKDEF1LEFTBOUNDS  26FA
CHECKDEF1RIGHTBOUNDS  271C
CHECKDEF1TOPBOUNDS  273E
CHECKDEF2LEFTBOUNDS  27CE
CHECKDEF2RIGHTBOUNDS  27F0
CHECKDEF2TOPBOUNDS  2812
CHECKDINPUT         228A
CHECKFIRSTDOWN      2C2A
CHECKREC1RIGHTBOUNDS  26AA
CHECKREC1TOPBOUNDS  26C8
CHECKREC2RIGHTBOUNDS  277E
CHECKREC2TOPBOUNDS  279C
CHECKRECEIVERANDDEFENDERBOUNDS  268C
CHECKSINPUT         22B0
CHECKSPACEINPUT     2256
CHECKTURNOVERONDOWNS  2C06
CHECKWINPUT         229C
CLEARMENU           1ED0
CLEARREG            13C2
CLEAR_SCREEN_COMMAND  B
CLEAR_SCREEN_MAGIC_VAL  FF00
COLORTABLESTARTADDRESS  1738
CONTINUEINPUT       2224
CONTINUEROW24       113C
CONTINUEROW256      1284
CONTINUEROWMENU     1198
CONTINUEUPDATING    24DC
COVERBALLUI         1C2C
COVERFIRSTDOWNLINE  1CCC
COVEROLDLINEOFSCRIMMAGE  1F60
COVERPATH           1A9C
COVERPATHS          1AD8
CURRENTROUNDTIME    29DE88
DEFENDER1XPOS       29DE1C
DEFENDER1XVEL1      29DE24
DEFENDER1XVEL2      29DE2C
DEFENDER1YPOS       29DE20
DEFENDER1YVEL1      29DE28
DEFENDER1YVEL2      29DE30
DEFENDER2XPOS       29DE34
DEFENDER2XVEL1      29DE3C
DEFENDER2XVEL2      29DE44
DEFENDER2YPOS       29DE38
DEFENDER2YVEL1      29DE40
DEFENDER2YVEL2      29DE48
DEFENDERCOLLISIONCHECK  2AE2
DEFENDERSCHASEBALL  2538
DEFENDERSCHASEOBJECT  2610
DEFENDERSCHASEPLAYER  2604
DELTATIME           29DE74
DELTATIMEFORMULTIPLICATION  29DE78
DOACCELLERATEX      2948
DOACCELLERATEY      28FC
DONE                13B6
DONEBLITZCHECKING   2860
DONEDRAWINGSEGMENTS  185C
DONEFIRSTBOUNDSCHECKS  2760
DONEGETTINGMINUTES  1D24
DONEMENUINPUT       21E8
DONEPATHMOVING      252E
DONESECONDBOUNDSCHECKS  2834
DONESPACEINPUT      2266
DONESQUISHING       2E42
DONEWASD            22C2
DONTACCELLERATEXNEG  2A12
DONTACCELLERATEXPOS  2A1A
DONTACCELLERATEYNEG  2A22
DONTACCELLERATEYPOS  2A2A
DONTAPPLYUIFIX1     1C50
DONTAPPLYUIFIX2     1C5A
DONTBLITZ           28C2
DONTCHASEBALLREC1   2432
DONTCHASEBALLREC2   249A
DONTCLEARMENU       1F5E
DONTDRAW10S         1D78
DONTDRAWFIRSTDOWNLINE  2062
DONTDRAWPIXEL       11B8
DONTDRAWSEGMENT     18B4
DONTDRAWUI          200C
DONTDROPBACK        2E9A
DONTFLIP            10B0
DONTKILLMOMENTUMXLEFT  2974
DONTKILLMOMENTUMXRIGHT  295E
DONTKILLMOMENTUMYDOWN  2928
DONTKILLMOMENTUMYUP  2912
DONTMOVELINEBACKERRIGHT  287A
DONTMOVERIGHT       2622
DONTMOVERIGHT2      2662
DONTMOVERIGHT3      2598
DONTMOVERIGHT4      25D8
DONTMOVERIGHTLB     255A
DONTMOVERIGHTREC1   2404
DONTMOVERIGHTREC2   246C
DONTMOVEUP          2634
DONTMOVEUP2         2670
DONTMOVEUP3         25AA
DONTMOVEUP4         25E6
DONTMOVEUPLB        2568
DONTRESETHIGHSCORE  2F30
DONTRESETLASTSCORE  2F44
DONTSETHIGHSCORE    2F80
DONTSETTIMEZERO     1D0C
DONTSWAPXS          1AB4
DONTSWAPYS          1AA8
DONTTICKTIMER       29E014
DONTUPDATEDOWNFLASHTIMER  29E03C
DONTUPDATESCOREFLASHTIMER  29E028
DONTUPDATETIMERFLASHTIMER  29E050
DONT_DRAW_COLOR     C9AEFF
DOUBLE_BUFFERED_MODE  11
DOWNCOUNTER         29DE7E
DOWNFLASHDIGITTIMER  29DEC8
DOWN_FLASH_TIMER    64
DOWN_POSX           7B
DOWN_POSY           B
DRAW24BIT           1092
DRAW256             11FE
DRAW2NUMBERS        1D56
DRAWAMENU           190E
DRAWAPIECE          18FA
DRAWAPLAYER         1904
DRAWBALLUI          1C60
DRAWBITMAP          100A
DRAWBITMAPPIECE     136A
DRAWING_MODE_TRAP_CODE  5C
DRAWLINE            1928
DRAWMENU            1DFC
DRAWMENUBITMAP      12D2
DRAWPATH            1946
DRAWPATHS           1966
DRAWPLAYERBITMAP    131E
DRAWSCORE           1D7A
DRAWSEGMENT         1862
DRAWSEGMENTLOOP     184E
DRAWSEGMENTS        183A
DRAWSTUFF           1F86
DRAWTIME            1CF2
DRAW_CIRCLE_COMMAND  58
DRAW_LINE_COMMAND   54
DRAW_PIXEL_TRAP_CODE  52
DRAW_RECTANGLE_COMMAND  57
DROPBACK_VELOCITY_Y  1000000
DUMMYBYTE           3231
DWASPRESSED         29DE87
EXIT_GAME           29E05E
FASTBALL_SPEED      FFFFF900
FIELD_GREEN         B05C
FIFTY_YARD_LINE_LOCATION  1BC
FILEADDRESS         171C
FILE_ADDRESS        1C
FIRSTDOWNLINE       29DDBC
FIRSTDOWNSOUND      31EF
FIRST_DOWN_SOUND_REF  6
FIRST_DOWN_YARDS    9B00
FLASHRED            1DE2
FLASHREDDOWN        1FAE
FLASHREDTIMER       1FE0
FLYBALL             2A96
FOOTBALL_CARRY_OFFSET_X  1900
FOOTBALL_CARRY_OFFSET_Y  A00
FOOTBALL_HEIGHT     15
FOOTBALL_WIDTH      9
GAMESTATE           29DE7D
GAMESTATE_CLEAR_MENU  1
GAMESTATE_DRAW_MENU  3
GAMESTATE_MENU      0
GAMESTATE_PLAY      2
GAME_LOOP           29DF0C
GETINPUT            21C8
GETLINEOFSCRIMMAGE  2B56
GETRANDOMBYTEINTOD3  176A
GETXCOORDATYFROMVELOCITY  24A6
GET_TIME_COMMAND    8
HAILMARYSOUND       3217
HAIL_MARY_SOUND_REF  A
HEIGHT              1740
HEIGHTOFPIECE       1724
HIGHSCORE           29DE82
HIGHSCOREDUDE       2794F8
HIGHSCORE_DIGIT_XPOS  1F4
HIGHSCORE_DIGIT_YPOS  1B6
HIGHSCORE_HEIGHT    7C
HIGHSCORE_WIDTH     C8
HIGHSCORE_XPOS      190
HIGHSCORE_YPOS      17C
HILARIOUSOPTOMIZATION  13F6
INCOMPLETEPASS      2B74
INITIAL_FIRST_DOWN  1F900
INITPLAYERS         29DF84
INITTIME            29DFE0
INTERCEPTION        2B9A
INTERCEPTIONSOUND   3206
INTERCEPTION_SOUND_REF  7
KEY_SCAN_CODE       13
LASTAINPUT          29DDA9
LASTDINPUT          29DDAB
LASTSCORE           29DE83
LASTSINPUT          29DDAA
LASTTIME            29DE70
LASTWINPUT          29DDA8
LEFT_RECEIVER_MAX_POS  235
LEFT_SIDE_OF_FIELD  25
LEFT_X              0
LEVELTHEME          31AC
LEVEL_THEME_SOUND_REF  0
LINEBACKERCHASEPLAYER  2548
LINEBACKERSTATE     29DE5C
LINEBACKERSTATE_BLITZ  1
LINEBACKERSTATE_STRAFE  0
LINEBACKERXPOS      29DE4C
LINEBACKERXVEL      29DE54
LINEBACKERYPOS      29DE50
LINEBACKERYVEL      29DE58
LINEBACKER_CHASE_SPEED_DOWN  B0
LINEBACKER_CHASE_SPEED_LEFT  FFFFFFF8
LINEBACKER_CHASE_SPEED_RIGHT  8
LINEBACKER_CHASE_SPEED_UP  FFFFFFB0
LINEOFSCRIMMAGE     29DDC4
LINE_OF_SCRIMMAGE_HEIGHT  2
LITTLEENDIANTOBIGENDIAN  1002
LOADBACKGROUND      29DF36
LOOPSTOPSOUNDS      3082
MENUTHEME           319E
MENU_1_YPOS         6E
MENU_2_YPOS         1D4
MENU_HEIGHT         136
MENU_THEME_SOUND_REF  2
MENU_WIDTH          1F4
MENU_XPOS           41
MOVEINDIVIDUAL      22C4
MOVEPATH2           2514
MOVERECEIVERANDDEFENDER1PATH1  22CA
MOVERECEIVERANDDEFENDER1PATH2  230A
MOVERECEIVERANDDEFENDER2PATH1  234A
MOVERECEIVERANDDEFENDER2PATH2  238A
NEAR_ENDZONE_POS    2F5
NINC0               1780
NINC1               1788
NOCATCH1            2ABC
NOCATCH2            2AE2
NOCOLLISION         1834
NOCOLLISIONWITHTD   2A06
NOCOLLISIONWITHTOUCHBACK  2A06
NOHAILMARY          2BCE
NOHAILMARYSOUND     30E4
NOOBRULES           2031B0
NOPOSITIVESET       2A32
NORMALLINE          1940
NORMALLINE1         1934
NORMALOFFSET        2E88
NUM_SOUNDS          C
OFFSET_TO_BITS_PER_PIXEL  1C
OFFSET_TO_COLOR_TABLE  36
OFFSET_TO_HEIGHT    16
OFFSET_TO_PIXEL_OFFSET  A
OFFSET_TO_WIDTH     12
OLDFIRSTDOWNLINE    29DDC0
OLDLINEOFSCRIMMAGE  29DDC8
OLDUIX1             29DED8
OLDUIX2             29DEE0
OLDUIY1             29DEDC
OLDUIY2             29DEE4
OUTOFBOUNDS         2B6C
OUTPUT_HEIGHT       348
OUTPUT_WIDTH        280
PADDING             1744
PANTHERS            FCBF25
PATH1X1             29DE94
PATH1X2             29DE9C
PATH1X3             29DEA4
PATH1Y1             29DE98
PATH1Y2             29DEA0
PATH1Y3             29DEA8
PATH2X1             29DEAC
PATH2X2             29DEB4
PATH2X3             29DEBC
PATH2Y1             29DEB0
PATH2Y2             29DEB8
PATH2Y3             29DEC0
PATHS1              29DAA8
PATHTIMER           29DE90
PATH_COLOR          FF
PEN_COLOR_TRAP_CODE  50
PIECE_HEIGHT        8
PIECE_WIDTH         4
PIECE_XPOS          C
PIECE_YPOS          10
PIGSKIN             80A3A
PIXELSTARTADDRESS   1734
PLAYCATCHSOUND      3100
PLAYERSTARTXPOS     29DDB4
PLAYERSTARTYPOS     29DDB8
PLAYER_HEIGHT       1E
PLAYER_LEFT_X_POS   0
PLAYER_MAX_SPEED_X  90
PLAYER_MAX_SPEED_Y  78
PLAYER_MIN_SPEED_X  FF70
PLAYER_MIN_SPEED_Y  FF82
PLAYER_MIN_X_SPEED  29DDAC
PLAYER_MIN_Y_SPEED  29DDB0
PLAYER_TOP_Y_POS    0
PLAYER_WIDTH        1E
PLAYER_X_ACCELLERATION  8
PLAYER_X_DRAG       4
PLAYER_Y_ACCELLERATION  8
PLAYER_Y_DRAG       4
PLAYFIRSTDOWNSOUND  3114
PLAYHAILMARYSOUND   3172
PLAYINTERCEPTIONSOUND  3122
PLAYLEVELTHEME      3148
PLAYLOOPINGSOUND    305E
PLAYMENUTHEME       313A
PLAYNONLOOPINGSOUND  3048
PLAYSNAPSOUND       30F2
PLAYSOUND1          3022
PLAYTACKLESOUND     3164
PLAYTHROWSOUND      3156
PLAYTIMER           29DE8C
PLAYTOUCHDOWNSOUND  30CC
PLAYWHISTLESOUND    3180
POSITIVEHEIGHT      1ACA
POSITIVEWIDTH       1ABE
RANDOMVAL           17A4
REC1FIRSTVEL        2508
REC1SECONDVEL       2510
REC2FIRSTVEL        2522
REC2SECONDVEL       252A
RECEIVER1STARTXPOS  29DDDC
RECEIVER1STARTYPOS  29DDE0
RECEIVER1XPOS       29DDCC
RECEIVER1XVEL1      29DDE8
RECEIVER1XVEL2      29DDF0
RECEIVER1YPOS       29DDD0
RECEIVER1YTURNPOS   29DDE4
RECEIVER1YVEL1      29DDEC
RECEIVER1YVEL2      29DDF4
RECEIVER1YVEL3      29DDF8
RECEIVER2STARTXPOS  29DDFC
RECEIVER2STARTYPOS  29DE00
RECEIVER2XPOS       29DDD4
RECEIVER2XVEL1      29DE08
RECEIVER2XVEL2      29DE10
RECEIVER2YPOS       29DDD8
RECEIVER2YTURNPOS   29DE04
RECEIVER2YVEL1      29DE0C
RECEIVER2YVEL2      29DE14
RECEIVER2YVEL3      29DE18
RECEIVERBALLMAGNETISM  23CA
RECEIVERSCHASEPLAYER  2586
RECEIVER_SPEED_LEFT  FFFFFF00
RECEIVER_SPEED_RIGHT  100
RECT_COLOR          808080
RED                 FF
REDRAWBACKGROUNDPIECES  1B4A
REPAINT_SCREEN_TRAP_CODE  5E
RESETPLAY           2C5E
RESETPLAYDEBOUNCETIMER  29DED4
RESTARTGAME         2F52
RETURN              1000
RETURNX             24BA
RIGHTPIECEDRAWBARRIER  1746
RIGHT_RECEIVER_MAX_POS  46
RIGHT_SIDE_OF_FIELD  25B
ROUND_TIME_IN_HUNDREDTHS  2328
SCORE               29DE7F
SCOREFLASHDIGITTIMER  29DEC4
SCORE_FLASH_TIMER   64
SCORE_POSX_1        14E
SCORE_POSX_2        16C
SCREENX             1730
SCREENY             1732
SCREEN_X            14
SCREEN_Y            18
SECOND_NUMBER_OFFSET  1E
SEEDRANDOMNUMBER    1752
SEGMENTBYTEARRAY    18B6
SEGMENTXENDPOSITIONS  18C7
SEGMENTXSTARTPOSITIONS  18C0
SEGMENTYENDPOSITIONS  18D5
SEGMENTYSTARTPOSITIONS  18CE
SETPIECECOORDINATES  18DC
SETSCREENRESOLUTION  29DF70
SET_FILL_COLOR_COMMAND  51
SET_OUTPUT_RESOLUTION_TRAP_CODE  21
SET_PEN_COLOR_COMMAND  50
SET_PEN_WIDTH_COMMAND  5D
SHOTGUN_OFFSET_1    5000
SHOTGUN_OFFSET_2    3200
SLOWBALL_SPEED      FFFFFB00
SNAPBALL            2A34
SNAPDEBOUNCETIMER   29DED0
SNAPSOUND           31E6
SNAP_DEBOUNCE_TIMER  23
SNAP_SOUND_REF      4
SOUND1              31B6
SOUNDMEMORYADDRESS  3230
SOUND_1_REF         1
SPACEH_LONG         4A4B4820
SQUISHPOS_1         1DF00
SQUISHPOS_2         15400
SQUISHPOS_3         BE00
SQUISHPOS_4         B400
START               29DEE8
STARTGAME           2EBC
STOPALLSOUNDS       309A
STOPALLSOUNDSNONTRAP  307C
STOPLEVELTHEME      30AC
STOPMENUTHEME       30BC
STOPSOUND           3074
STOPTHROWSOUND      318E
SWAPBUFFERS         29DF2E
SWASPRESSED         29DE86
TACKLED             2B78
TACKLESOUND         31DB
TACKLE_SOUND_REF    9
TEMPRANDOMLONG      17A8
THROWBALL           2A5A
THROWSOUND          31D1
THROW_SOUND_REF     8
TIMERFLASHDIGITTIMER  29DECC
TIMERMINUTES        29DE81
TIMERSECONDS        29DE80
TIMER_FLASH_TIMER   64
TIMER_MINUTES_POSX  212
TIMER_SECONDS_POSX_1  253
TIMER_SECONDS_POSX_2  235
TIME_SINCE_MIDNIGHT_CODE  8
TOPPIECEDRAWBARRIER  174A
TOP_OF_FIELD        45
TOP_RECEIVER_MAX_POS  4A
TOP_Y               FFFFFFFF
TOUCHBACK           2BDA
TOUCHBACK_POS       2F1
TOUCHDOWN           2BB8
TOUCHDOWNSOUND      31C3
TOUCHDOWN_POS       84
TOUCHDOWN_SOUND_REF  3
TURNOVERONDOWNS     2BDA
UI_LENGTH           1E
UPDATELINEBACKER    2838
UPDATEPLAYER        298E
UPDATEPLAYER1       28E0
UPDATERECEIVERS     24C2
UPDATESCORE         3002
UPDATETIME          29DFEA
VETERANRULES        18CE68
WASD_LONG           57415344
WHISTLERESTART      2F52
WHISTLESOUND        3224
WHISTLE_SOUND_REF   A
WHITE               FFFFFF
WIDTH               173C
WIDTHOFPIECE        1720
WWASPRESSED         29DE84
XPOSOFPIECE         1728
YELLOW              FFFF
YOURSCOREDUDE       28B7D0
YOURSCORE_DIGIT_XPOS  8C
YOURSCORE_DIGIT_YPOS  1BB
YOURSCORE_XPOS      28
YOURSCORE_YPOS      181
YPOSOFPIECE         172C
